/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/a11y-dialog/dist/a11y-dialog.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/a11y-dialog/dist/a11y-dialog.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ A11yDialog)\n/* harmony export */ });\nvar focusableSelectors = [\n  'a[href]:not([tabindex^=\"-\"])',\n  'area[href]:not([tabindex^=\"-\"])',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not([disabled]):not([tabindex^=\"-\"])',\n  'input[type=\"radio\"]:not([disabled]):not([tabindex^=\"-\"])',\n  'select:not([disabled]):not([tabindex^=\"-\"])',\n  'textarea:not([disabled]):not([tabindex^=\"-\"])',\n  'button:not([disabled]):not([tabindex^=\"-\"])',\n  'iframe:not([tabindex^=\"-\"])',\n  'audio[controls]:not([tabindex^=\"-\"])',\n  'video[controls]:not([tabindex^=\"-\"])',\n  '[contenteditable]:not([tabindex^=\"-\"])',\n  '[tabindex]:not([tabindex^=\"-\"])',\n];\n\nvar TAB_KEY = 9;\nvar ESCAPE_KEY = 27;\n\n/**\n * Define the constructor to instantiate a dialog\n *\n * @constructor\n * @param {Element} element\n */\nfunction A11yDialog(element) {\n  // Prebind the functions that will be bound in addEventListener and\n  // removeEventListener to avoid losing references\n  this._show = this.show.bind(this);\n  this._hide = this.hide.bind(this);\n  this._maintainFocus = this._maintainFocus.bind(this);\n  this._bindKeypress = this._bindKeypress.bind(this);\n\n  this.$el = element;\n  this.shown = false;\n  this._id = this.$el.getAttribute('data-a11y-dialog') || this.$el.id;\n  this._previouslyFocused = null;\n  this._listeners = {};\n\n  // Initialise everything needed for the dialog to work properly\n  this.create();\n}\n\n/**\n * Set up everything necessary for the dialog to be functioning\n *\n * @param {(NodeList | Element | string)} targets\n * @return {this}\n */\nA11yDialog.prototype.create = function () {\n  this.$el.setAttribute('aria-hidden', true);\n  this.$el.setAttribute('aria-modal', true);\n  this.$el.setAttribute('tabindex', -1);\n\n  if (!this.$el.hasAttribute('role')) {\n    this.$el.setAttribute('role', 'dialog');\n  }\n\n  // Keep a collection of dialog openers, each of which will be bound a click\n  // event listener to open the dialog\n  this._openers = $$('[data-a11y-dialog-show=\"' + this._id + '\"]');\n  this._openers.forEach(\n    function (opener) {\n      opener.addEventListener('click', this._show);\n    }.bind(this)\n  );\n\n  // Keep a collection of dialog closers, each of which will be bound a click\n  // event listener to close the dialog\n  this._closers = $$('[data-a11y-dialog-hide]', this.$el).concat(\n    $$('[data-a11y-dialog-hide=\"' + this._id + '\"]')\n  );\n  this._closers.forEach(\n    function (closer) {\n      closer.addEventListener('click', this._hide);\n    }.bind(this)\n  );\n\n  // Execute all callbacks registered for the `create` event\n  this._fire('create');\n\n  return this\n};\n\n/**\n * Show the dialog element, disable all the targets (siblings), trap the\n * current focus within it, listen for some specific key presses and fire all\n * registered callbacks for `show` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.show = function (event) {\n  // If the dialog is already open, abort\n  if (this.shown) {\n    return this\n  }\n\n  // Keep a reference to the currently focused element to be able to restore\n  // it later\n  this._previouslyFocused = document.activeElement;\n  this.$el.removeAttribute('aria-hidden');\n  this.shown = true;\n\n  // Set the focus to the dialog element\n  moveFocusToDialog(this.$el);\n\n  // Bind a focus event listener to the body element to make sure the focus\n  // stays trapped inside the dialog while open, and start listening for some\n  // specific key presses (TAB and ESC)\n  document.body.addEventListener('focus', this._maintainFocus, true);\n  document.addEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `show` event\n  this._fire('show', event);\n\n  return this\n};\n\n/**\n * Hide the dialog element, enable all the targets (siblings), restore the\n * focus to the previously active element, stop listening for some specific\n * key presses and fire all registered callbacks for `hide` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.hide = function (event) {\n  // If the dialog is already closed, abort\n  if (!this.shown) {\n    return this\n  }\n\n  this.shown = false;\n  this.$el.setAttribute('aria-hidden', 'true');\n\n  // If there was a focused element before the dialog was opened (and it has a\n  // `focus` method), restore the focus back to it\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/108\n  if (this._previouslyFocused && this._previouslyFocused.focus) {\n    this._previouslyFocused.focus();\n  }\n\n  // Remove the focus event listener to the body element and stop listening\n  // for specific key presses\n  document.body.removeEventListener('focus', this._maintainFocus, true);\n  document.removeEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `hide` event\n  this._fire('hide', event);\n\n  return this\n};\n\n/**\n * Destroy the current instance (after making sure the dialog has been hidden)\n * and remove all associated listeners from dialog openers and closers\n *\n * @return {this}\n */\nA11yDialog.prototype.destroy = function () {\n  // Hide the dialog to avoid destroying an open instance\n  this.hide();\n\n  // Remove the click event listener from all dialog openers\n  this._openers.forEach(\n    function (opener) {\n      opener.removeEventListener('click', this._show);\n    }.bind(this)\n  );\n\n  // Remove the click event listener from all dialog closers\n  this._closers.forEach(\n    function (closer) {\n      closer.removeEventListener('click', this._hide);\n    }.bind(this)\n  );\n\n  // Execute all callbacks registered for the `destroy` event\n  this._fire('destroy');\n\n  // Keep an object of listener types mapped to callback functions\n  this._listeners = {};\n\n  return this\n};\n\n/**\n * Register a new callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.on = function (type, handler) {\n  if (typeof this._listeners[type] === 'undefined') {\n    this._listeners[type] = [];\n  }\n\n  this._listeners[type].push(handler);\n\n  return this\n};\n\n/**\n * Unregister an existing callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.off = function (type, handler) {\n  var index = (this._listeners[type] || []).indexOf(handler);\n\n  if (index > -1) {\n    this._listeners[type].splice(index, 1);\n  }\n\n  return this\n};\n\n/**\n * Iterate over all registered handlers for given type and call them all with\n * the dialog element as first argument, event as second argument (if any). Also\n * dispatch a custom event on the DOM element itself to make it possible to\n * react to the lifecycle of auto-instantiated dialogs.\n *\n * @access private\n * @param {string} type\n * @param {CustomEvent} event\n */\nA11yDialog.prototype._fire = function (type, event) {\n  var listeners = this._listeners[type] || [];\n  var domEvent = new CustomEvent(type, { detail: event });\n\n  this.$el.dispatchEvent(domEvent);\n\n  listeners.forEach(\n    function (listener) {\n      listener(this.$el, event);\n    }.bind(this)\n  );\n};\n\n/**\n * Private event handler used when listening to some specific key presses\n * (namely ESCAPE and TAB)\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._bindKeypress = function (event) {\n  // This is an escape hatch in case there are nested dialogs, so the keypresses\n  // are only reacted to for the most recent one\n  if (!this.$el.contains(document.activeElement)) return\n\n  // If the dialog is shown and the ESCAPE key is being pressed, prevent any\n  // further effects from the ESCAPE key and hide the dialog, unless its role\n  // is 'alertdialog', which should be modal\n  if (\n    this.shown &&\n    event.which === ESCAPE_KEY &&\n    this.$el.getAttribute('role') !== 'alertdialog'\n  ) {\n    event.preventDefault();\n    this.hide(event);\n  }\n\n  // If the dialog is shown and the TAB key is being pressed, make sure the\n  // focus stays trapped within the dialog element\n  if (this.shown && event.which === TAB_KEY) {\n    trapTabKey(this.$el, event);\n  }\n};\n\n/**\n * Private event handler used when making sure the focus stays within the\n * currently open dialog\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._maintainFocus = function (event) {\n  // If the dialog is shown and the focus is not within a dialog element (either\n  // this one or another one in case of nested dialogs) or within an element\n  // with the `data-a11y-dialog-focus-trap-ignore` attribute, move it back to\n  // its first focusable child.\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/177\n  if (\n    this.shown &&\n    !event.target.closest('[aria-modal=\"true\"]') &&\n    !event.target.closest('[data-a11y-dialog-ignore-focus-trap]')\n  ) {\n    moveFocusToDialog(this.$el);\n  }\n};\n\n/**\n * Convert a NodeList into an array\n *\n * @param {NodeList} collection\n * @return {Array<Element>}\n */\nfunction toArray(collection) {\n  return Array.prototype.slice.call(collection)\n}\n\n/**\n * Query the DOM for nodes matching the given selector, scoped to context (or\n * the whole document)\n *\n * @param {String} selector\n * @param {Element} [context = document]\n * @return {Array<Element>}\n */\nfunction $$(selector, context) {\n  return toArray((context || document).querySelectorAll(selector))\n}\n\n/**\n * Set the focus to the first element with `autofocus` with the element or the\n * element itself\n *\n * @param {Element} node\n */\nfunction moveFocusToDialog(node) {\n  var focused = node.querySelector('[autofocus]') || node;\n\n  focused.focus();\n}\n\n/**\n * Get the focusable children of the given element\n *\n * @param {Element} node\n * @return {Array<Element>}\n */\nfunction getFocusableChildren(node) {\n  return $$(focusableSelectors.join(','), node).filter(function (child) {\n    return !!(\n      child.offsetWidth ||\n      child.offsetHeight ||\n      child.getClientRects().length\n    )\n  })\n}\n\n/**\n * Trap the focus inside the given element\n *\n * @param {Element} node\n * @param {Event} event\n */\nfunction trapTabKey(node, event) {\n  var focusableChildren = getFocusableChildren(node);\n  var focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n  // If the SHIFT key is being pressed while tabbing (moving backwards) and\n  // the currently focused item is the first one, move the focus to the last\n  // focusable item from the dialog element\n  if (event.shiftKey && focusedItemIndex === 0) {\n    focusableChildren[focusableChildren.length - 1].focus();\n    event.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n  } else if (\n    !event.shiftKey &&\n    focusedItemIndex === focusableChildren.length - 1\n  ) {\n    focusableChildren[0].focus();\n    event.preventDefault();\n  }\n}\n\nfunction instantiateDialogs() {\n  $$('[data-a11y-dialog]').forEach(function (node) {\n    new A11yDialog(node);\n  });\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', instantiateDialogs);\n  } else {\n    if (window.requestAnimationFrame) {\n      window.requestAnimationFrame(instantiateDialogs);\n    } else {\n      window.setTimeout(instantiateDialogs, 16);\n    }\n  }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/a11y-dialog/dist/a11y-dialog.esm.js\n");

/***/ }),

/***/ "./node_modules/react-axe/dist/after.js":
/*!**********************************************!*\
  !*** ./node_modules/react-axe/dist/after.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("\nvar restoreFunctions = [];\nfunction after(host, name, cb) {\n    var originalFn = host[name];\n    var restoreFn;\n    if (originalFn) {\n        host[name] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            originalFn.apply(this, args);\n            cb(host);\n        };\n        restoreFn = function () {\n            host[name] = originalFn;\n        };\n    }\n    else {\n        host[name] = function () {\n            cb(host);\n        };\n        restoreFn = function () {\n            delete host[name];\n        };\n    }\n    restoreFunctions.push(restoreFn);\n}\nafter.restorePatchedMethods = function () {\n    restoreFunctions.forEach(function (restoreFn) { return restoreFn(); });\n    restoreFunctions = [];\n};\nmodule.exports = after;\n//# sourceMappingURL=after.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtYXhlL2Rpc3QvYWZ0ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWd0YWlsLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWF4ZS9kaXN0L2FmdGVyLmpzP2E4MTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgcmVzdG9yZUZ1bmN0aW9ucyA9IFtdO1xuZnVuY3Rpb24gYWZ0ZXIoaG9zdCwgbmFtZSwgY2IpIHtcbiAgICB2YXIgb3JpZ2luYWxGbiA9IGhvc3RbbmFtZV07XG4gICAgdmFyIHJlc3RvcmVGbjtcbiAgICBpZiAob3JpZ2luYWxGbikge1xuICAgICAgICBob3N0W25hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3JpZ2luYWxGbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIGNiKGhvc3QpO1xuICAgICAgICB9O1xuICAgICAgICByZXN0b3JlRm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBob3N0W25hbWVdID0gb3JpZ2luYWxGbjtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGhvc3RbbmFtZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYihob3N0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVzdG9yZUZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGVsZXRlIGhvc3RbbmFtZV07XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJlc3RvcmVGdW5jdGlvbnMucHVzaChyZXN0b3JlRm4pO1xufVxuYWZ0ZXIucmVzdG9yZVBhdGNoZWRNZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgIHJlc3RvcmVGdW5jdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocmVzdG9yZUZuKSB7IHJldHVybiByZXN0b3JlRm4oKTsgfSk7XG4gICAgcmVzdG9yZUZ1bmN0aW9ucyA9IFtdO1xufTtcbm1vZHVsZS5leHBvcnRzID0gYWZ0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZnRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-axe/dist/after.js\n");

/***/ }),

/***/ "./node_modules/react-axe/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/react-axe/dist/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/* global Promise */\nvar axeCore = __webpack_require__(/*! axe-core */ \"./node_modules/react-axe/node_modules/axe-core/axe.js\");\nvar rIC = __webpack_require__(/*! requestidlecallback */ \"./node_modules/requestidlecallback/index.js\");\nvar after = __webpack_require__(/*! ./after */ \"./node_modules/react-axe/dist/after.js\");\nvar requestIdleCallback = rIC.request;\nvar cancelIdleCallback = rIC.cancel;\nvar React;\nvar ReactDOM;\n// contrasted against Chrome default color of #ffffff\nvar lightTheme = {\n    serious: '#d93251',\n    minor: '#d24700',\n    text: 'black'\n};\n// contrasted against Safari dark mode color of #535353\nvar darkTheme = {\n    serious: '#ffb3b3',\n    minor: '#ffd500',\n    text: 'white'\n};\nvar theme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches\n    ? darkTheme\n    : lightTheme;\nvar boldCourier = 'font-weight:bold;font-family:Courier;';\nvar critical = \"color:\" + theme.serious + \";font-weight:bold;\";\nvar serious = \"color:\" + theme.serious + \";font-weight:normal;\";\nvar moderate = \"color:\" + theme.minor + \";font-weight:bold;\";\nvar minor = \"color:\" + theme.minor + \";font-weight:normal;\";\nvar defaultReset = \"font-color:\" + theme.text + \";font-weight:normal;\";\nvar idleId;\nvar timeout;\nvar context;\nvar _createElement;\nvar components = {};\nvar nodes = [document.documentElement];\nvar cache = {};\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\n// @see https://davidwalsh.name/javascript-debounce-function\nfunction debounce(func, wait, immediate) {\n    var _timeout;\n    return function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var later = function () {\n            _timeout = null;\n            if (!immediate)\n                func.apply(_this, args);\n        };\n        var callNow = immediate && !_timeout;\n        clearTimeout(_timeout);\n        _timeout = setTimeout(later, wait);\n        if (callNow)\n            func.apply(this, args);\n    };\n}\n/**\n * Return the entire parent tree of a node (from HTML down).\n * @param {Node} node\n * @return {Node[]}\n */\nfunction getPath(node) {\n    var path = [node];\n    while (node && node.nodeName.toLowerCase() !== 'html') {\n        path.push(node.parentNode);\n        node = node.parentNode;\n    }\n    if (!node || !node.parentNode) {\n        return null;\n    }\n    return path.reverse();\n}\n/**\n * Find the common parent of an array of nodes.\n * @param {Node[]} nodes\n * @return {Node}\n */\nfunction getCommonParent(nodes) {\n    var path;\n    var nextPath;\n    if (nodes.length === 1) {\n        return nodes.pop();\n    }\n    while (!path && nodes.length) {\n        path = getPath(nodes.pop());\n    }\n    while (nodes.length) {\n        nextPath = getPath(nodes.pop());\n        if (nextPath) {\n            path = path.filter(function (node, index) {\n                return nextPath.length > index && nextPath[index] === node;\n            });\n        }\n    }\n    return path ? path[path.length - 1] : document;\n}\n/**\n * Log the axe result node to the console\n * @param {NodeResult} node\n * @param {Function} logFn console log function to use (error, warn, log, etc.)\n */\nfunction logElement(node, logFn) {\n    var el = document.querySelector(node.target.toString());\n    if (!el) {\n        logFn('Selector: %c%s', boldCourier, node.target.toString());\n    }\n    else {\n        logFn('Element: %o', el);\n    }\n}\n/**\n * Log the axe result node html tot he console\n * @param {NodeResult} node\n */\nfunction logHtml(node) {\n    console.log('HTML: %c%s', boldCourier, node.html);\n}\n/**\n * Log the failure message of a node result.\n * @param {NodeResult} node\n * @param {String} key which check array to log from (any, all, none)\n */\nfunction logFailureMessage(node, key) {\n    // this exists on axe but we don't export it as part of the typescript\n    // namespace, so just let me use it as I need\n    var message = axeCore._audit.data.failureSummaries[key].failureMessage(node[key].map(function (check) { return check.message || ''; }));\n    console.error(message);\n}\n/**\n * Log as a group the node result and failure message.\n * @param {NodeResult} node\n * @param {String} key which check array to log from (any, all, none)\n */\nfunction failureSummary(node, key) {\n    if (node[key].length > 0) {\n        logElement(node, console.groupCollapsed);\n        logHtml(node);\n        logFailureMessage(node, key);\n        var relatedNodes_1 = [];\n        node[key].forEach(function (check) {\n            relatedNodes_1 = relatedNodes_1.concat(check.relatedNodes);\n        });\n        if (relatedNodes_1.length > 0) {\n            console.groupCollapsed('Related nodes');\n            relatedNodes_1.forEach(function (relatedNode) {\n                logElement(relatedNode, console.log);\n                logHtml(relatedNode);\n            });\n            console.groupEnd();\n        }\n        console.groupEnd();\n    }\n}\n/**\n * Run axe against the passed in node and report violations\n * @param {*} node\n * @param {Number} timeout force call of axe.run after the timeout has passed (if not called before)\n * @return {Promise}\n */\nfunction checkAndReport(node, timeout) {\n    if (idleId) {\n        cancelIdleCallback(idleId);\n        idleId = undefined;\n    }\n    return new Promise(function (resolve, reject) {\n        nodes.push(node);\n        idleId = requestIdleCallback(function () {\n            var n = context;\n            if (n === undefined) {\n                n = getCommonParent(nodes.filter(function (node) { return node.isConnected; }));\n                if (n.nodeName.toLowerCase() === 'html') {\n                    // if the only common parent is the body, then analyze the whole page\n                    n = document;\n                }\n            }\n            axeCore.run(n, { reporter: 'v2' }, function (error, results) {\n                if (error) {\n                    return reject(error);\n                }\n                results.violations = results.violations.filter(function (result) {\n                    result.nodes = result.nodes.filter(function (node) {\n                        var key = node.target.toString() + result.id;\n                        var retVal = !cache[key];\n                        cache[key] = key;\n                        return retVal;\n                    });\n                    return !!result.nodes.length;\n                });\n                if (results.violations.length) {\n                    console.group('%cNew axe issues', serious);\n                    results.violations.forEach(function (result) {\n                        var fmt;\n                        switch (result.impact) {\n                            case 'critical':\n                                fmt = critical;\n                                break;\n                            case 'serious':\n                                fmt = serious;\n                                break;\n                            case 'moderate':\n                                fmt = moderate;\n                                break;\n                            case 'minor':\n                                fmt = minor;\n                                break;\n                            default:\n                                fmt = minor;\n                                break;\n                        }\n                        console.groupCollapsed('%c%s: %c%s %s', fmt, result.impact, defaultReset, result.help, result.helpUrl);\n                        result.nodes.forEach(function (node) {\n                            failureSummary(node, 'any');\n                            failureSummary(node, 'none');\n                        });\n                        console.groupEnd();\n                    });\n                    console.groupEnd();\n                }\n                resolve();\n            });\n        }, {\n            timeout: timeout\n        });\n    });\n}\n/**\n * Check the node for violations.\n * @param {Component} component\n */\nfunction checkNode(component) {\n    var node;\n    try {\n        node = ReactDOM.findDOMNode(component);\n    }\n    catch (e) {\n        console.group('%caxe error: could not check node', critical);\n        console.group('%cComponent', serious);\n        console.error(component);\n        console.groupEnd();\n        console.group('%cError', serious);\n        console.error(e);\n        console.groupEnd();\n        console.groupEnd();\n    }\n    if (node) {\n        checkAndReport(node, timeout);\n    }\n}\n/**\n * Check the component for violations whenever the DOM updates\n * @param {Component} component\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction componentAfterRender(component) {\n    var debounceCheckNode = debounce(checkNode, timeout, true);\n    after(component, 'componentDidMount', debounceCheckNode);\n    after(component, 'componentDidUpdate', debounceCheckNode);\n}\n/**\n * Add a component to track.\n * @param {Component} component\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction addComponent(component) {\n    var reactInstance = component._reactInternalInstance || {};\n    var reactInstanceDebugID = reactInstance._debugID;\n    var reactFiberInstance = component._reactInternalFiber || {};\n    var reactFiberInstanceDebugID = reactFiberInstance._debugID;\n    if (reactInstanceDebugID && !components[reactInstanceDebugID]) {\n        components[reactInstanceDebugID] = component;\n        componentAfterRender(component);\n    }\n    else if (reactFiberInstanceDebugID &&\n        !components[reactFiberInstanceDebugID]) {\n        components[reactFiberInstanceDebugID] = component;\n        componentAfterRender(component);\n    }\n}\n/**\n * Run axe against all changes made in a React app.\n * @parma {React} _React React instance\n * @param {ReactDOM} _ReactDOM ReactDOM instance\n * @param {Number} _timeout debounce timeout in milliseconds\n * @parma {Spec} conf axe.configure Spec object\n * @param {ElementContext} _context axe ElementContent object\n */\nfunction reactAxe(_React, _ReactDOM, _timeout, conf, _context) {\n    React = _React;\n    ReactDOM = _ReactDOM;\n    timeout = _timeout;\n    context = _context;\n    if (conf) {\n        axeCore.configure(conf);\n    }\n    if (!_createElement) {\n        _createElement = React.createElement;\n        React.createElement = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var reactEl = _createElement.apply(this, args);\n            if (reactEl._owner && reactEl._owner._instance) {\n                addComponent(reactEl._owner._instance);\n            }\n            else if (reactEl._owner && reactEl._owner.stateNode) {\n                addComponent(reactEl._owner.stateNode);\n            }\n            return reactEl;\n        };\n    }\n    return checkAndReport(document.body, timeout);\n}\nmodule.exports = reactAxe;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-axe/dist/index.js\n");

/***/ }),

/***/ "./node_modules/react-axe/node_modules/axe-core/axe.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-axe/node_modules/axe-core/axe.js ***!
  \*************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! axe v3.5.6\n * Copyright (c) 2021 Deque Systems, Inc.\n *\n * Your use of this Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * This entire copyright notice must appear in every copy of this file you\n * distribute or in any file that contains substantial portions of this source\n * code.\n */\n(function axeFunction(window) {\n  var global = window;\n  var document = window.document;\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  var axe = axe || {};\n  axe.version = '3.5.6';\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      'use strict';\n      return axe;\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n  if (( false ? 0 : _typeof(module)) === 'object' && module.exports && typeof axeFunction.toString === 'function') {\n    axe.source = '(' + axeFunction.toString() + ')(typeof window === \"object\" ? window : this);';\n    module.exports = axe;\n  }\n  if (typeof window.getComputedStyle === 'function') {\n    window.axe = axe;\n  }\n  var commons;\n  function SupportError(error) {\n    this.name = 'SupportError';\n    this.cause = error.cause;\n    this.message = '`'.concat(error.cause, '` - feature unsupported in your environment.');\n    if (error.ruleId) {\n      this.ruleId = error.ruleId;\n      this.message += ' Skipping '.concat(this.ruleId, ' rule.');\n    }\n    this.stack = new Error().stack;\n  }\n  SupportError.prototype = Object.create(Error.prototype);\n  SupportError.prototype.constructor = SupportError;\n  (function() {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = undefined;\n            if (!f && c) {\n              return require(i, !0);\n            }\n            if (u) {\n              return u(i, !0);\n            }\n            var a = new Error('Cannot find module \\'' + i + '\\'');\n            throw a.code = 'MODULE_NOT_FOUND', a;\n          }\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function(r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n        return n[i].exports;\n      }\n      for (var u = undefined, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n      return o;\n    }\n    return r;\n  })()({\n    1: [ function(_dereq_, module, exports) {\n      if (!('Promise' in window)) {\n        _dereq_('es6-promise').polyfill();\n      }\n      if (!('Uint32Array' in window)) {\n        _dereq_('core-js/features/typed-array/uint32-array');\n      }\n      if (window.Uint32Array) {\n        if (!('some' in window.Uint32Array.prototype)) {\n          _dereq_('core-js/features/typed-array/some');\n        }\n        if (!('reduce' in window.Uint32Array.prototype)) {\n          _dereq_('core-js/features/typed-array/reduce');\n        }\n      }\n      _dereq_('weakmap-polyfill');\n      axe.imports = {\n        axios: _dereq_('axios'),\n        CssSelectorParser: _dereq_('css-selector-parser').CssSelectorParser,\n        doT: _dereq_('@deque/dot'),\n        emojiRegexText: _dereq_('emoji-regex'),\n        memoize: _dereq_('memoizee')\n      };\n    }, {\n      '@deque/dot': 2,\n      axios: 3,\n      'core-js/features/typed-array/reduce': 31,\n      'core-js/features/typed-array/some': 32,\n      'core-js/features/typed-array/uint32-array': 33,\n      'css-selector-parser': 155,\n      'emoji-regex': 158,\n      'es6-promise': 202,\n      memoizee: 223,\n      'weakmap-polyfill': 245\n    } ],\n    2: [ function(_dereq_, module, exports) {\n      (function(global) {\n        (function() {\n          'use strict';\n          var doT = {\n            name: 'doT',\n            version: '1.1.1',\n            templateSettings: {\n              evaluate: /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n              interpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n              encode: /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n              use: /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n              useParams: /(^|[^\\w$])def(?:\\.|\\[[\\'\\\"])([\\w$\\.]+)(?:[\\'\\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\\"[^\\\"]+\\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n              define: /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n              defineParams: /^\\s*([\\w$]+):([\\s\\S]+)/,\n              conditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n              iterate: /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n              varname: 'it',\n              strip: true,\n              append: true,\n              selfcontained: false,\n              doNotSkipEncoded: false\n            },\n            template: undefined,\n            compile: undefined,\n            log: true\n          };\n          (function() {\n            if (typeof globalThis === 'object') {\n              return;\n            }\n            try {\n              Object.defineProperty(Object.prototype, '__magic__', {\n                get: function() {\n                  return this;\n                },\n                configurable: true\n              });\n              __magic__.globalThis = __magic__;\n              delete Object.prototype.__magic__;\n            } catch (e) {\n              window.globalThis = function() {\n                if (typeof self !== 'undefined') {\n                  return self;\n                }\n                if (typeof window !== 'undefined') {\n                  return window;\n                }\n                if (typeof global !== 'undefined') {\n                  return global;\n                }\n                if (typeof this !== 'undefined') {\n                  return this;\n                }\n                throw new Error('Unable to locate global `this`');\n              }();\n            }\n          })();\n          doT.encodeHTMLSource = function(doNotSkipEncoded) {\n            var encodeHTMLRules = {\n              '&': '&#38;',\n              '<': '&#60;',\n              '>': '&#62;',\n              '\"': '&#34;',\n              '\\'': '&#39;',\n              '/': '&#47;'\n            }, matchHTML = doNotSkipEncoded ? /[&<>\"'\\/]/g : /&(?!#?\\w+;)|<|>|\"|'|\\//g;\n            return function(code) {\n              return code ? code.toString().replace(matchHTML, function(m) {\n                return encodeHTMLRules[m] || m;\n              }) : '';\n            };\n          };\n          if (typeof module !== 'undefined' && module.exports) {\n            module.exports = doT;\n          } else if (true) {\n            !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n              return doT;\n            }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n          } else {}\n          var startend = {\n            append: {\n              start: '\\'+(',\n              end: ')+\\'',\n              startencode: '\\'+encodeHTML('\n            },\n            split: {\n              start: '\\';out+=(',\n              end: ');out+=\\'',\n              startencode: '\\';out+=encodeHTML('\n            }\n          }, skip = /$^/;\n          function resolveDefs(c, block, def) {\n            return (typeof block === 'string' ? block : block.toString()).replace(c.define || skip, function(m, code, assign, value) {\n              if (code.indexOf('def.') === 0) {\n                code = code.substring(4);\n              }\n              if (!(code in def)) {\n                if (assign === ':') {\n                  if (c.defineParams) {\n                    value.replace(c.defineParams, function(m, param, v) {\n                      def[code] = {\n                        arg: param,\n                        text: v\n                      };\n                    });\n                  }\n                  if (!(code in def)) {\n                    def[code] = value;\n                  }\n                } else {\n                  new Function('def', 'def[\\'' + code + '\\']=' + value)(def);\n                }\n              }\n              return '';\n            }).replace(c.use || skip, function(m, code) {\n              if (c.useParams) {\n                code = code.replace(c.useParams, function(m, s, d, param) {\n                  if (def[d] && def[d].arg && param) {\n                    var rw = (d + ':' + param).replace(/'|\\\\/g, '_');\n                    def.__exp = def.__exp || {};\n                    def.__exp[rw] = def[d].text.replace(new RegExp('(^|[^\\\\w$])' + def[d].arg + '([^\\\\w$])', 'g'), '$1' + param + '$2');\n                    return s + 'def.__exp[\\'' + rw + '\\']';\n                  }\n                });\n              }\n              var v = new Function('def', 'return ' + code)(def);\n              return v ? resolveDefs(c, v, def) : v;\n            });\n          }\n          function unescape(code) {\n            return code.replace(/\\\\('|\\\\)/g, '$1').replace(/[\\r\\t\\n]/g, ' ');\n          }\n          doT.template = function(tmpl, c, def) {\n            c = c || doT.templateSettings;\n            var cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv, str = c.use || c.define ? resolveDefs(c, tmpl, def || {}) : tmpl;\n            str = ('var out=\\'' + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g, ' ').replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g, '') : str).replace(/'|\\\\/g, '\\\\$&').replace(c.interpolate || skip, function(m, code) {\n              return cse.start + unescape(code) + cse.end;\n            }).replace(c.encode || skip, function(m, code) {\n              needhtmlencode = true;\n              return cse.startencode + unescape(code) + cse.end;\n            }).replace(c.conditional || skip, function(m, elsecase, code) {\n              return elsecase ? code ? '\\';}else if(' + unescape(code) + '){out+=\\'' : '\\';}else{out+=\\'' : code ? '\\';if(' + unescape(code) + '){out+=\\'' : '\\';}out+=\\'';\n            }).replace(c.iterate || skip, function(m, iterate, vname, iname) {\n              if (!iterate) {\n                return '\\';} } out+=\\'';\n              }\n              sid += 1;\n              indv = iname || 'i' + sid;\n              iterate = unescape(iterate);\n              return '\\';var arr' + sid + '=' + iterate + ';if(arr' + sid + '){var ' + vname + ',' + indv + '=-1,l' + sid + '=arr' + sid + '.length-1;while(' + indv + '<l' + sid + '){' + vname + '=arr' + sid + '[' + indv + '+=1];out+=\\'';\n            }).replace(c.evaluate || skip, function(m, code) {\n              return '\\';' + unescape(code) + 'out+=\\'';\n            }) + '\\';return out;').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r').replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, '');\n            if (needhtmlencode) {\n              if (!c.selfcontained && globalThis && !globalThis._encodeHTML) {\n                globalThis._encodeHTML = doT.encodeHTMLSource(c.doNotSkipEncoded);\n              }\n              str = 'var encodeHTML = typeof _encodeHTML !== \\'undefined\\' ? _encodeHTML : (' + doT.encodeHTMLSource.toString() + '(' + (c.doNotSkipEncoded || '') + '));' + str;\n            }\n            try {\n              return new Function(c.varname, str);\n            } catch (e) {\n              if (typeof console !== 'undefined') {\n                console.log('Could not create a template function: ' + str);\n              }\n              throw e;\n            }\n          };\n          doT.compile = function(tmpl, def) {\n            return doT.template(tmpl, null, def);\n          };\n        })();\n      }).call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\n    }, {} ],\n    3: [ function(_dereq_, module, exports) {\n      module.exports = _dereq_('./lib/axios');\n    }, {\n      './lib/axios': 5\n    } ],\n    4: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      var settle = _dereq_('./../core/settle');\n      var buildURL = _dereq_('./../helpers/buildURL');\n      var buildFullPath = _dereq_('../core/buildFullPath');\n      var parseHeaders = _dereq_('./../helpers/parseHeaders');\n      var isURLSameOrigin = _dereq_('./../helpers/isURLSameOrigin');\n      var createError = _dereq_('../core/createError');\n      module.exports = function xhrAdapter(config) {\n        return new Promise(function dispatchXhrRequest(resolve, reject) {\n          var requestData = config.data;\n          var requestHeaders = config.headers;\n          if (utils.isFormData(requestData)) {\n            delete requestHeaders['Content-Type'];\n          }\n          var request = new XMLHttpRequest();\n          if (config.auth) {\n            var username = config.auth.username || '';\n            var password = config.auth.password || '';\n            requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n          }\n          var fullPath = buildFullPath(config.baseURL, config.url);\n          request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n          request.timeout = config.timeout;\n          request.onreadystatechange = function handleLoad() {\n            if (!request || request.readyState !== 4) {\n              return;\n            }\n            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n              return;\n            }\n            var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n            var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n            var response = {\n              data: responseData,\n              status: request.status,\n              statusText: request.statusText,\n              headers: responseHeaders,\n              config: config,\n              request: request\n            };\n            settle(resolve, reject, response);\n            request = null;\n          };\n          request.onabort = function handleAbort() {\n            if (!request) {\n              return;\n            }\n            reject(createError('Request aborted', config, 'ECONNABORTED', request));\n            request = null;\n          };\n          request.onerror = function handleError() {\n            reject(createError('Network Error', config, null, request));\n            request = null;\n          };\n          request.ontimeout = function handleTimeout() {\n            var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n            if (config.timeoutErrorMessage) {\n              timeoutErrorMessage = config.timeoutErrorMessage;\n            }\n            reject(createError(timeoutErrorMessage, config, 'ECONNABORTED', request));\n            request = null;\n          };\n          if (utils.isStandardBrowserEnv()) {\n            var cookies = _dereq_('./../helpers/cookies');\n            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;\n            if (xsrfValue) {\n              requestHeaders[config.xsrfHeaderName] = xsrfValue;\n            }\n          }\n          if ('setRequestHeader' in request) {\n            utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n              if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n                delete requestHeaders[key];\n              } else {\n                request.setRequestHeader(key, val);\n              }\n            });\n          }\n          if (!utils.isUndefined(config.withCredentials)) {\n            request.withCredentials = !!config.withCredentials;\n          }\n          if (config.responseType) {\n            try {\n              request.responseType = config.responseType;\n            } catch (e) {\n              if (config.responseType !== 'json') {\n                throw e;\n              }\n            }\n          }\n          if (typeof config.onDownloadProgress === 'function') {\n            request.addEventListener('progress', config.onDownloadProgress);\n          }\n          if (typeof config.onUploadProgress === 'function' && request.upload) {\n            request.upload.addEventListener('progress', config.onUploadProgress);\n          }\n          if (config.cancelToken) {\n            config.cancelToken.promise.then(function onCanceled(cancel) {\n              if (!request) {\n                return;\n              }\n              request.abort();\n              reject(cancel);\n              request = null;\n            });\n          }\n          if (requestData === undefined) {\n            requestData = null;\n          }\n          request.send(requestData);\n        });\n      };\n    }, {\n      '../core/buildFullPath': 11,\n      '../core/createError': 12,\n      './../core/settle': 16,\n      './../helpers/buildURL': 20,\n      './../helpers/cookies': 22,\n      './../helpers/isURLSameOrigin': 24,\n      './../helpers/parseHeaders': 26,\n      './../utils': 28\n    } ],\n    5: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./utils');\n      var bind = _dereq_('./helpers/bind');\n      var Axios = _dereq_('./core/Axios');\n      var mergeConfig = _dereq_('./core/mergeConfig');\n      var defaults = _dereq_('./defaults');\n      function createInstance(defaultConfig) {\n        var context = new Axios(defaultConfig);\n        var instance = bind(Axios.prototype.request, context);\n        utils.extend(instance, Axios.prototype, context);\n        utils.extend(instance, context);\n        return instance;\n      }\n      var axios = createInstance(defaults);\n      axios.Axios = Axios;\n      axios.create = function create(instanceConfig) {\n        return createInstance(mergeConfig(axios.defaults, instanceConfig));\n      };\n      axios.Cancel = _dereq_('./cancel/Cancel');\n      axios.CancelToken = _dereq_('./cancel/CancelToken');\n      axios.isCancel = _dereq_('./cancel/isCancel');\n      axios.all = function all(promises) {\n        return Promise.all(promises);\n      };\n      axios.spread = _dereq_('./helpers/spread');\n      module.exports = axios;\n      module.exports.default = axios;\n    }, {\n      './cancel/Cancel': 6,\n      './cancel/CancelToken': 7,\n      './cancel/isCancel': 8,\n      './core/Axios': 9,\n      './core/mergeConfig': 15,\n      './defaults': 18,\n      './helpers/bind': 19,\n      './helpers/spread': 27,\n      './utils': 28\n    } ],\n    6: [ function(_dereq_, module, exports) {\n      'use strict';\n      function Cancel(message) {\n        this.message = message;\n      }\n      Cancel.prototype.toString = function toString() {\n        return 'Cancel' + (this.message ? ': ' + this.message : '');\n      };\n      Cancel.prototype.__CANCEL__ = true;\n      module.exports = Cancel;\n    }, {} ],\n    7: [ function(_dereq_, module, exports) {\n      'use strict';\n      var Cancel = _dereq_('./Cancel');\n      function CancelToken(executor) {\n        if (typeof executor !== 'function') {\n          throw new TypeError('executor must be a function.');\n        }\n        var resolvePromise;\n        this.promise = new Promise(function promiseExecutor(resolve) {\n          resolvePromise = resolve;\n        });\n        var token = this;\n        executor(function cancel(message) {\n          if (token.reason) {\n            return;\n          }\n          token.reason = new Cancel(message);\n          resolvePromise(token.reason);\n        });\n      }\n      CancelToken.prototype.throwIfRequested = function throwIfRequested() {\n        if (this.reason) {\n          throw this.reason;\n        }\n      };\n      CancelToken.source = function source() {\n        var cancel;\n        var token = new CancelToken(function executor(c) {\n          cancel = c;\n        });\n        return {\n          token: token,\n          cancel: cancel\n        };\n      };\n      module.exports = CancelToken;\n    }, {\n      './Cancel': 6\n    } ],\n    8: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function isCancel(value) {\n        return !!(value && value.__CANCEL__);\n      };\n    }, {} ],\n    9: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      var buildURL = _dereq_('../helpers/buildURL');\n      var InterceptorManager = _dereq_('./InterceptorManager');\n      var dispatchRequest = _dereq_('./dispatchRequest');\n      var mergeConfig = _dereq_('./mergeConfig');\n      function Axios(instanceConfig) {\n        this.defaults = instanceConfig;\n        this.interceptors = {\n          request: new InterceptorManager(),\n          response: new InterceptorManager()\n        };\n      }\n      Axios.prototype.request = function request(config) {\n        if (typeof config === 'string') {\n          config = arguments[1] || {};\n          config.url = arguments[0];\n        } else {\n          config = config || {};\n        }\n        config = mergeConfig(this.defaults, config);\n        if (config.method) {\n          config.method = config.method.toLowerCase();\n        } else if (this.defaults.method) {\n          config.method = this.defaults.method.toLowerCase();\n        } else {\n          config.method = 'get';\n        }\n        var chain = [ dispatchRequest, undefined ];\n        var promise = Promise.resolve(config);\n        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n          chain.unshift(interceptor.fulfilled, interceptor.rejected);\n        });\n        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n          chain.push(interceptor.fulfilled, interceptor.rejected);\n        });\n        while (chain.length) {\n          promise = promise.then(chain.shift(), chain.shift());\n        }\n        return promise;\n      };\n      Axios.prototype.getUri = function getUri(config) {\n        config = mergeConfig(this.defaults, config);\n        return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n      };\n      utils.forEach([ 'delete', 'get', 'head', 'options' ], function forEachMethodNoData(method) {\n        Axios.prototype[method] = function(url, config) {\n          return this.request(utils.merge(config || {}, {\n            method: method,\n            url: url\n          }));\n        };\n      });\n      utils.forEach([ 'post', 'put', 'patch' ], function forEachMethodWithData(method) {\n        Axios.prototype[method] = function(url, data, config) {\n          return this.request(utils.merge(config || {}, {\n            method: method,\n            url: url,\n            data: data\n          }));\n        };\n      });\n      module.exports = Axios;\n    }, {\n      '../helpers/buildURL': 20,\n      './../utils': 28,\n      './InterceptorManager': 10,\n      './dispatchRequest': 13,\n      './mergeConfig': 15\n    } ],\n    10: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      function InterceptorManager() {\n        this.handlers = [];\n      }\n      InterceptorManager.prototype.use = function use(fulfilled, rejected) {\n        this.handlers.push({\n          fulfilled: fulfilled,\n          rejected: rejected\n        });\n        return this.handlers.length - 1;\n      };\n      InterceptorManager.prototype.eject = function eject(id) {\n        if (this.handlers[id]) {\n          this.handlers[id] = null;\n        }\n      };\n      InterceptorManager.prototype.forEach = function forEach(fn) {\n        utils.forEach(this.handlers, function forEachHandler(h) {\n          if (h !== null) {\n            fn(h);\n          }\n        });\n      };\n      module.exports = InterceptorManager;\n    }, {\n      './../utils': 28\n    } ],\n    11: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isAbsoluteURL = _dereq_('../helpers/isAbsoluteURL');\n      var combineURLs = _dereq_('../helpers/combineURLs');\n      module.exports = function buildFullPath(baseURL, requestedURL) {\n        if (baseURL && !isAbsoluteURL(requestedURL)) {\n          return combineURLs(baseURL, requestedURL);\n        }\n        return requestedURL;\n      };\n    }, {\n      '../helpers/combineURLs': 21,\n      '../helpers/isAbsoluteURL': 23\n    } ],\n    12: [ function(_dereq_, module, exports) {\n      'use strict';\n      var enhanceError = _dereq_('./enhanceError');\n      module.exports = function createError(message, config, code, request, response) {\n        var error = new Error(message);\n        return enhanceError(error, config, code, request, response);\n      };\n    }, {\n      './enhanceError': 14\n    } ],\n    13: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      var transformData = _dereq_('./transformData');\n      var isCancel = _dereq_('../cancel/isCancel');\n      var defaults = _dereq_('../defaults');\n      function throwIfCancellationRequested(config) {\n        if (config.cancelToken) {\n          config.cancelToken.throwIfRequested();\n        }\n      }\n      module.exports = function dispatchRequest(config) {\n        throwIfCancellationRequested(config);\n        config.headers = config.headers || {};\n        config.data = transformData(config.data, config.headers, config.transformRequest);\n        config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);\n        utils.forEach([ 'delete', 'get', 'head', 'post', 'put', 'patch', 'common' ], function cleanHeaderConfig(method) {\n          delete config.headers[method];\n        });\n        var adapter = config.adapter || defaults.adapter;\n        return adapter(config).then(function onAdapterResolution(response) {\n          throwIfCancellationRequested(config);\n          response.data = transformData(response.data, response.headers, config.transformResponse);\n          return response;\n        }, function onAdapterRejection(reason) {\n          if (!isCancel(reason)) {\n            throwIfCancellationRequested(config);\n            if (reason && reason.response) {\n              reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);\n            }\n          }\n          return Promise.reject(reason);\n        });\n      };\n    }, {\n      '../cancel/isCancel': 8,\n      '../defaults': 18,\n      './../utils': 28,\n      './transformData': 17\n    } ],\n    14: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function enhanceError(error, config, code, request, response) {\n        error.config = config;\n        if (code) {\n          error.code = code;\n        }\n        error.request = request;\n        error.response = response;\n        error.isAxiosError = true;\n        error.toJSON = function() {\n          return {\n            message: this.message,\n            name: this.name,\n            description: this.description,\n            number: this.number,\n            fileName: this.fileName,\n            lineNumber: this.lineNumber,\n            columnNumber: this.columnNumber,\n            stack: this.stack,\n            config: this.config,\n            code: this.code\n          };\n        };\n        return error;\n      };\n    }, {} ],\n    15: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('../utils');\n      module.exports = function mergeConfig(config1, config2) {\n        config2 = config2 || {};\n        var config = {};\n        var valueFromConfig2Keys = [ 'url', 'method', 'params', 'data' ];\n        var mergeDeepPropertiesKeys = [ 'headers', 'auth', 'proxy' ];\n        var defaultToConfig2Keys = [ 'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath' ];\n        utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n          if (typeof config2[prop] !== 'undefined') {\n            config[prop] = config2[prop];\n          }\n        });\n        utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {\n          if (utils.isObject(config2[prop])) {\n            config[prop] = utils.deepMerge(config1[prop], config2[prop]);\n          } else if (typeof config2[prop] !== 'undefined') {\n            config[prop] = config2[prop];\n          } else if (utils.isObject(config1[prop])) {\n            config[prop] = utils.deepMerge(config1[prop]);\n          } else if (typeof config1[prop] !== 'undefined') {\n            config[prop] = config1[prop];\n          }\n        });\n        utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n          if (typeof config2[prop] !== 'undefined') {\n            config[prop] = config2[prop];\n          } else if (typeof config1[prop] !== 'undefined') {\n            config[prop] = config1[prop];\n          }\n        });\n        var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys);\n        var otherKeys = Object.keys(config2).filter(function filterAxiosKeys(key) {\n          return axiosKeys.indexOf(key) === -1;\n        });\n        utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {\n          if (typeof config2[prop] !== 'undefined') {\n            config[prop] = config2[prop];\n          } else if (typeof config1[prop] !== 'undefined') {\n            config[prop] = config1[prop];\n          }\n        });\n        return config;\n      };\n    }, {\n      '../utils': 28\n    } ],\n    16: [ function(_dereq_, module, exports) {\n      'use strict';\n      var createError = _dereq_('./createError');\n      module.exports = function settle(resolve, reject, response) {\n        var validateStatus = response.config.validateStatus;\n        if (!validateStatus || validateStatus(response.status)) {\n          resolve(response);\n        } else {\n          reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));\n        }\n      };\n    }, {\n      './createError': 12\n    } ],\n    17: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      module.exports = function transformData(data, headers, fns) {\n        utils.forEach(fns, function transform(fn) {\n          data = fn(data, headers);\n        });\n        return data;\n      };\n    }, {\n      './../utils': 28\n    } ],\n    18: [ function(_dereq_, module, exports) {\n      (function(process) {\n        'use strict';\n        var utils = _dereq_('./utils');\n        var normalizeHeaderName = _dereq_('./helpers/normalizeHeaderName');\n        var DEFAULT_CONTENT_TYPE = {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n        function setContentTypeIfUnset(headers, value) {\n          if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n            headers['Content-Type'] = value;\n          }\n        }\n        function getDefaultAdapter() {\n          var adapter;\n          if (typeof XMLHttpRequest !== 'undefined') {\n            adapter = _dereq_('./adapters/xhr');\n          } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n            adapter = _dereq_('./adapters/http');\n          }\n          return adapter;\n        }\n        var defaults = {\n          adapter: getDefaultAdapter(),\n          transformRequest: [ function transformRequest(data, headers) {\n            normalizeHeaderName(headers, 'Accept');\n            normalizeHeaderName(headers, 'Content-Type');\n            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n              return data;\n            }\n            if (utils.isArrayBufferView(data)) {\n              return data.buffer;\n            }\n            if (utils.isURLSearchParams(data)) {\n              setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n              return data.toString();\n            }\n            if (utils.isObject(data)) {\n              setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n              return JSON.stringify(data);\n            }\n            return data;\n          } ],\n          transformResponse: [ function transformResponse(data) {\n            if (typeof data === 'string') {\n              try {\n                data = JSON.parse(data);\n              } catch (e) {}\n            }\n            return data;\n          } ],\n          timeout: 0,\n          xsrfCookieName: 'XSRF-TOKEN',\n          xsrfHeaderName: 'X-XSRF-TOKEN',\n          maxContentLength: -1,\n          validateStatus: function validateStatus(status) {\n            return status >= 200 && status < 300;\n          }\n        };\n        defaults.headers = {\n          common: {\n            Accept: 'application/json, text/plain, */*'\n          }\n        };\n        utils.forEach([ 'delete', 'get', 'head' ], function forEachMethodNoData(method) {\n          defaults.headers[method] = {};\n        });\n        utils.forEach([ 'post', 'put', 'patch' ], function forEachMethodWithData(method) {\n          defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n        });\n        module.exports = defaults;\n      }).call(this, _dereq_('_process'));\n    }, {\n      './adapters/http': 4,\n      './adapters/xhr': 4,\n      './helpers/normalizeHeaderName': 25,\n      './utils': 28,\n      _process: 236\n    } ],\n    19: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function bind(fn, thisArg) {\n        return function wrap() {\n          var args = new Array(arguments.length);\n          for (var i = 0; i < args.length; i++) {\n            args[i] = arguments[i];\n          }\n          return fn.apply(thisArg, args);\n        };\n      };\n    }, {} ],\n    20: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      function encode(val) {\n        return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n      }\n      module.exports = function buildURL(url, params, paramsSerializer) {\n        if (!params) {\n          return url;\n        }\n        var serializedParams;\n        if (paramsSerializer) {\n          serializedParams = paramsSerializer(params);\n        } else if (utils.isURLSearchParams(params)) {\n          serializedParams = params.toString();\n        } else {\n          var parts = [];\n          utils.forEach(params, function serialize(val, key) {\n            if (val === null || typeof val === 'undefined') {\n              return;\n            }\n            if (utils.isArray(val)) {\n              key = key + '[]';\n            } else {\n              val = [ val ];\n            }\n            utils.forEach(val, function parseValue(v) {\n              if (utils.isDate(v)) {\n                v = v.toISOString();\n              } else if (utils.isObject(v)) {\n                v = JSON.stringify(v);\n              }\n              parts.push(encode(key) + '=' + encode(v));\n            });\n          });\n          serializedParams = parts.join('&');\n        }\n        if (serializedParams) {\n          var hashmarkIndex = url.indexOf('#');\n          if (hashmarkIndex !== -1) {\n            url = url.slice(0, hashmarkIndex);\n          }\n          url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n        }\n        return url;\n      };\n    }, {\n      './../utils': 28\n    } ],\n    21: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function combineURLs(baseURL, relativeURL) {\n        return relativeURL ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '') : baseURL;\n      };\n    }, {} ],\n    22: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {\n        return {\n          write: function write(name, value, expires, path, domain, secure) {\n            var cookie = [];\n            cookie.push(name + '=' + encodeURIComponent(value));\n            if (utils.isNumber(expires)) {\n              cookie.push('expires=' + new Date(expires).toGMTString());\n            }\n            if (utils.isString(path)) {\n              cookie.push('path=' + path);\n            }\n            if (utils.isString(domain)) {\n              cookie.push('domain=' + domain);\n            }\n            if (secure === true) {\n              cookie.push('secure');\n            }\n            document.cookie = cookie.join('; ');\n          },\n          read: function read(name) {\n            var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n            return match ? decodeURIComponent(match[3]) : null;\n          },\n          remove: function remove(name) {\n            this.write(name, '', Date.now() - 864e5);\n          }\n        };\n      }() : function nonStandardBrowserEnv() {\n        return {\n          write: function write() {},\n          read: function read() {\n            return null;\n          },\n          remove: function remove() {}\n        };\n      }();\n    }, {\n      './../utils': 28\n    } ],\n    23: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function isAbsoluteURL(url) {\n        return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n      };\n    }, {} ],\n    24: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {\n        var msie = /(msie|trident)/i.test(navigator.userAgent);\n        var urlParsingNode = document.createElement('a');\n        var originURL;\n        function resolveURL(url) {\n          var href = url;\n          if (msie) {\n            urlParsingNode.setAttribute('href', href);\n            href = urlParsingNode.href;\n          }\n          urlParsingNode.setAttribute('href', href);\n          return {\n            href: urlParsingNode.href,\n            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n            host: urlParsingNode.host,\n            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n            hostname: urlParsingNode.hostname,\n            port: urlParsingNode.port,\n            pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname\n          };\n        }\n        originURL = resolveURL(window.location.href);\n        return function isURLSameOrigin(requestURL) {\n          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n        };\n      }() : function nonStandardBrowserEnv() {\n        return function isURLSameOrigin() {\n          return true;\n        };\n      }();\n    }, {\n      './../utils': 28\n    } ],\n    25: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('../utils');\n      module.exports = function normalizeHeaderName(headers, normalizedName) {\n        utils.forEach(headers, function processHeader(value, name) {\n          if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n            headers[normalizedName] = value;\n            delete headers[name];\n          }\n        });\n      };\n    }, {\n      '../utils': 28\n    } ],\n    26: [ function(_dereq_, module, exports) {\n      'use strict';\n      var utils = _dereq_('./../utils');\n      var ignoreDuplicateOf = [ 'age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent' ];\n      module.exports = function parseHeaders(headers) {\n        var parsed = {};\n        var key;\n        var val;\n        var i;\n        if (!headers) {\n          return parsed;\n        }\n        utils.forEach(headers.split('\\n'), function parser(line) {\n          i = line.indexOf(':');\n          key = utils.trim(line.substr(0, i)).toLowerCase();\n          val = utils.trim(line.substr(i + 1));\n          if (key) {\n            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n              return;\n            }\n            if (key === 'set-cookie') {\n              parsed[key] = (parsed[key] ? parsed[key] : []).concat([ val ]);\n            } else {\n              parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n            }\n          }\n        });\n        return parsed;\n      };\n    }, {\n      './../utils': 28\n    } ],\n    27: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function spread(callback) {\n        return function wrap(arr) {\n          return callback.apply(null, arr);\n        };\n      };\n    }, {} ],\n    28: [ function(_dereq_, module, exports) {\n      'use strict';\n      var bind = _dereq_('./helpers/bind');\n      var toString = Object.prototype.toString;\n      function isArray(val) {\n        return toString.call(val) === '[object Array]';\n      }\n      function isUndefined(val) {\n        return typeof val === 'undefined';\n      }\n      function isBuffer(val) {\n        return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n      }\n      function isArrayBuffer(val) {\n        return toString.call(val) === '[object ArrayBuffer]';\n      }\n      function isFormData(val) {\n        return typeof FormData !== 'undefined' && val instanceof FormData;\n      }\n      function isArrayBufferView(val) {\n        var result;\n        if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n          result = ArrayBuffer.isView(val);\n        } else {\n          result = val && val.buffer && val.buffer instanceof ArrayBuffer;\n        }\n        return result;\n      }\n      function isString(val) {\n        return typeof val === 'string';\n      }\n      function isNumber(val) {\n        return typeof val === 'number';\n      }\n      function isObject(val) {\n        return val !== null && typeof val === 'object';\n      }\n      function isDate(val) {\n        return toString.call(val) === '[object Date]';\n      }\n      function isFile(val) {\n        return toString.call(val) === '[object File]';\n      }\n      function isBlob(val) {\n        return toString.call(val) === '[object Blob]';\n      }\n      function isFunction(val) {\n        return toString.call(val) === '[object Function]';\n      }\n      function isStream(val) {\n        return isObject(val) && isFunction(val.pipe);\n      }\n      function isURLSearchParams(val) {\n        return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n      }\n      function trim(str) {\n        return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n      }\n      function isStandardBrowserEnv() {\n        if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {\n          return false;\n        }\n        return typeof window !== 'undefined' && typeof document !== 'undefined';\n      }\n      function forEach(obj, fn) {\n        if (obj === null || typeof obj === 'undefined') {\n          return;\n        }\n        if (typeof obj !== 'object') {\n          obj = [ obj ];\n        }\n        if (isArray(obj)) {\n          for (var i = 0, l = obj.length; i < l; i++) {\n            fn.call(null, obj[i], i, obj);\n          }\n        } else {\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              fn.call(null, obj[key], key, obj);\n            }\n          }\n        }\n      }\n      function merge() {\n        var result = {};\n        function assignValue(val, key) {\n          if (typeof result[key] === 'object' && typeof val === 'object') {\n            result[key] = merge(result[key], val);\n          } else {\n            result[key] = val;\n          }\n        }\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          forEach(arguments[i], assignValue);\n        }\n        return result;\n      }\n      function deepMerge() {\n        var result = {};\n        function assignValue(val, key) {\n          if (typeof result[key] === 'object' && typeof val === 'object') {\n            result[key] = deepMerge(result[key], val);\n          } else if (typeof val === 'object') {\n            result[key] = deepMerge({}, val);\n          } else {\n            result[key] = val;\n          }\n        }\n        for (var i = 0, l = arguments.length; i < l; i++) {\n          forEach(arguments[i], assignValue);\n        }\n        return result;\n      }\n      function extend(a, b, thisArg) {\n        forEach(b, function assignValue(val, key) {\n          if (thisArg && typeof val === 'function') {\n            a[key] = bind(val, thisArg);\n          } else {\n            a[key] = val;\n          }\n        });\n        return a;\n      }\n      module.exports = {\n        isArray: isArray,\n        isArrayBuffer: isArrayBuffer,\n        isBuffer: isBuffer,\n        isFormData: isFormData,\n        isArrayBufferView: isArrayBufferView,\n        isString: isString,\n        isNumber: isNumber,\n        isObject: isObject,\n        isUndefined: isUndefined,\n        isDate: isDate,\n        isFile: isFile,\n        isBlob: isBlob,\n        isFunction: isFunction,\n        isStream: isStream,\n        isURLSearchParams: isURLSearchParams,\n        isStandardBrowserEnv: isStandardBrowserEnv,\n        forEach: forEach,\n        merge: merge,\n        deepMerge: deepMerge,\n        extend: extend,\n        trim: trim\n      };\n    }, {\n      './helpers/bind': 19\n    } ],\n    29: [ function(_dereq_, module, exports) {\n      _dereq_('../../modules/es.typed-array.from');\n      _dereq_('../../modules/es.typed-array.of');\n      _dereq_('../../modules/es.typed-array.copy-within');\n      _dereq_('../../modules/es.typed-array.every');\n      _dereq_('../../modules/es.typed-array.fill');\n      _dereq_('../../modules/es.typed-array.filter');\n      _dereq_('../../modules/es.typed-array.find');\n      _dereq_('../../modules/es.typed-array.find-index');\n      _dereq_('../../modules/es.typed-array.for-each');\n      _dereq_('../../modules/es.typed-array.includes');\n      _dereq_('../../modules/es.typed-array.index-of');\n      _dereq_('../../modules/es.typed-array.join');\n      _dereq_('../../modules/es.typed-array.last-index-of');\n      _dereq_('../../modules/es.typed-array.map');\n      _dereq_('../../modules/es.typed-array.reduce');\n      _dereq_('../../modules/es.typed-array.reduce-right');\n      _dereq_('../../modules/es.typed-array.reverse');\n      _dereq_('../../modules/es.typed-array.set');\n      _dereq_('../../modules/es.typed-array.slice');\n      _dereq_('../../modules/es.typed-array.some');\n      _dereq_('../../modules/es.typed-array.sort');\n      _dereq_('../../modules/es.typed-array.subarray');\n      _dereq_('../../modules/es.typed-array.to-locale-string');\n      _dereq_('../../modules/es.typed-array.to-string');\n      _dereq_('../../modules/es.typed-array.iterator');\n      _dereq_('../../modules/es.object.to-string');\n    }, {\n      '../../modules/es.object.to-string': 128,\n      '../../modules/es.typed-array.copy-within': 129,\n      '../../modules/es.typed-array.every': 130,\n      '../../modules/es.typed-array.fill': 131,\n      '../../modules/es.typed-array.filter': 132,\n      '../../modules/es.typed-array.find': 134,\n      '../../modules/es.typed-array.find-index': 133,\n      '../../modules/es.typed-array.for-each': 135,\n      '../../modules/es.typed-array.from': 136,\n      '../../modules/es.typed-array.includes': 137,\n      '../../modules/es.typed-array.index-of': 138,\n      '../../modules/es.typed-array.iterator': 139,\n      '../../modules/es.typed-array.join': 140,\n      '../../modules/es.typed-array.last-index-of': 141,\n      '../../modules/es.typed-array.map': 142,\n      '../../modules/es.typed-array.of': 143,\n      '../../modules/es.typed-array.reduce': 145,\n      '../../modules/es.typed-array.reduce-right': 144,\n      '../../modules/es.typed-array.reverse': 146,\n      '../../modules/es.typed-array.set': 147,\n      '../../modules/es.typed-array.slice': 148,\n      '../../modules/es.typed-array.some': 149,\n      '../../modules/es.typed-array.sort': 150,\n      '../../modules/es.typed-array.subarray': 151,\n      '../../modules/es.typed-array.to-locale-string': 152,\n      '../../modules/es.typed-array.to-string': 153\n    } ],\n    30: [ function(_dereq_, module, exports) {\n      _dereq_('../../modules/es.typed-array.uint32-array');\n      _dereq_('./methods');\n      var global = _dereq_('../../internals/global');\n      module.exports = global.Uint32Array;\n    }, {\n      '../../internals/global': 68,\n      '../../modules/es.typed-array.uint32-array': 154,\n      './methods': 29\n    } ],\n    31: [ function(_dereq_, module, exports) {\n      _dereq_('../../modules/es.typed-array.reduce');\n    }, {\n      '../../modules/es.typed-array.reduce': 145\n    } ],\n    32: [ function(_dereq_, module, exports) {\n      _dereq_('../../modules/es.typed-array.some');\n    }, {\n      '../../modules/es.typed-array.some': 149\n    } ],\n    33: [ function(_dereq_, module, exports) {\n      var parent = _dereq_('../../es/typed-array/uint32-array');\n      module.exports = parent;\n    }, {\n      '../../es/typed-array/uint32-array': 30\n    } ],\n    34: [ function(_dereq_, module, exports) {\n      module.exports = function(it) {\n        if (typeof it != 'function') {\n          throw TypeError(String(it) + ' is not a function');\n        }\n        return it;\n      };\n    }, {} ],\n    35: [ function(_dereq_, module, exports) {\n      var isObject = _dereq_('../internals/is-object');\n      module.exports = function(it) {\n        if (!isObject(it) && it !== null) {\n          throw TypeError('Can\\'t set ' + String(it) + ' as a prototype');\n        }\n        return it;\n      };\n    }, {\n      '../internals/is-object': 81\n    } ],\n    36: [ function(_dereq_, module, exports) {\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var create = _dereq_('../internals/object-create');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      var UNSCOPABLES = wellKnownSymbol('unscopables');\n      var ArrayPrototype = Array.prototype;\n      if (ArrayPrototype[UNSCOPABLES] == undefined) {\n        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n          configurable: true,\n          value: create(null)\n        });\n      }\n      module.exports = function(key) {\n        ArrayPrototype[UNSCOPABLES][key] = true;\n      };\n    }, {\n      '../internals/object-create': 87,\n      '../internals/object-define-property': 89,\n      '../internals/well-known-symbol': 126\n    } ],\n    37: [ function(_dereq_, module, exports) {\n      module.exports = function(it, Constructor, name) {\n        if (!(it instanceof Constructor)) {\n          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');\n        }\n        return it;\n      };\n    }, {} ],\n    38: [ function(_dereq_, module, exports) {\n      var isObject = _dereq_('../internals/is-object');\n      module.exports = function(it) {\n        if (!isObject(it)) {\n          throw TypeError(String(it) + ' is not an object');\n        }\n        return it;\n      };\n    }, {\n      '../internals/is-object': 81\n    } ],\n    39: [ function(_dereq_, module, exports) {\n      module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';\n    }, {} ],\n    40: [ function(_dereq_, module, exports) {\n      'use strict';\n      var NATIVE_ARRAY_BUFFER = _dereq_('../internals/array-buffer-native');\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var global = _dereq_('../internals/global');\n      var isObject = _dereq_('../internals/is-object');\n      var has = _dereq_('../internals/has');\n      var classof = _dereq_('../internals/classof');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var redefine = _dereq_('../internals/redefine');\n      var defineProperty = _dereq_('../internals/object-define-property').f;\n      var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');\n      var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var uid = _dereq_('../internals/uid');\n      var Int8Array = global.Int8Array;\n      var Int8ArrayPrototype = Int8Array && Int8Array.prototype;\n      var Uint8ClampedArray = global.Uint8ClampedArray;\n      var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;\n      var TypedArray = Int8Array && getPrototypeOf(Int8Array);\n      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);\n      var ObjectPrototype = Object.prototype;\n      var isPrototypeOf = ObjectPrototype.isPrototypeOf;\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG');\n      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';\n      var TYPED_ARRAY_TAG_REQIRED = false;\n      var NAME;\n      var TypedArrayConstructorsList = {\n        Int8Array: 1,\n        Uint8Array: 1,\n        Uint8ClampedArray: 1,\n        Int16Array: 2,\n        Uint16Array: 2,\n        Int32Array: 4,\n        Uint32Array: 4,\n        Float32Array: 4,\n        Float64Array: 8\n      };\n      var isView = function isView(it) {\n        var klass = classof(it);\n        return klass === 'DataView' || has(TypedArrayConstructorsList, klass);\n      };\n      var isTypedArray = function(it) {\n        return isObject(it) && has(TypedArrayConstructorsList, classof(it));\n      };\n      var aTypedArray = function(it) {\n        if (isTypedArray(it)) {\n          return it;\n        }\n        throw TypeError('Target is not a typed array');\n      };\n      var aTypedArrayConstructor = function(C) {\n        if (setPrototypeOf) {\n          if (isPrototypeOf.call(TypedArray, C)) {\n            return C;\n          }\n        } else {\n          for (var ARRAY in TypedArrayConstructorsList) {\n            if (has(TypedArrayConstructorsList, NAME)) {\n              var TypedArrayConstructor = global[ARRAY];\n              if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {\n                return C;\n              }\n            }\n          }\n        }\n        throw TypeError('Target is not a typed array constructor');\n      };\n      var exportTypedArrayMethod = function(KEY, property, forced) {\n        if (!DESCRIPTORS) {\n          return;\n        }\n        if (forced) {\n          for (var ARRAY in TypedArrayConstructorsList) {\n            var TypedArrayConstructor = global[ARRAY];\n            if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) {\n              delete TypedArrayConstructor.prototype[KEY];\n            }\n          }\n        }\n        if (!TypedArrayPrototype[KEY] || forced) {\n          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);\n        }\n      };\n      var exportTypedArrayStaticMethod = function(KEY, property, forced) {\n        var ARRAY, TypedArrayConstructor;\n        if (!DESCRIPTORS) {\n          return;\n        }\n        if (setPrototypeOf) {\n          if (forced) {\n            for (ARRAY in TypedArrayConstructorsList) {\n              TypedArrayConstructor = global[ARRAY];\n              if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) {\n                delete TypedArrayConstructor[KEY];\n              }\n            }\n          }\n          if (!TypedArray[KEY] || forced) {\n            try {\n              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8Array[KEY] || property);\n            } catch (error) {}\n          } else {\n            return;\n          }\n        }\n        for (ARRAY in TypedArrayConstructorsList) {\n          TypedArrayConstructor = global[ARRAY];\n          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {\n            redefine(TypedArrayConstructor, KEY, property);\n          }\n        }\n      };\n      for (NAME in TypedArrayConstructorsList) {\n        if (!global[NAME]) {\n          NATIVE_ARRAY_BUFFER_VIEWS = false;\n        }\n      }\n      if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {\n        TypedArray = function TypedArray() {\n          throw TypeError('Incorrect invocation');\n        };\n        if (NATIVE_ARRAY_BUFFER_VIEWS) {\n          for (NAME in TypedArrayConstructorsList) {\n            if (global[NAME]) {\n              setPrototypeOf(global[NAME], TypedArray);\n            }\n          }\n        }\n      }\n      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {\n        TypedArrayPrototype = TypedArray.prototype;\n        if (NATIVE_ARRAY_BUFFER_VIEWS) {\n          for (NAME in TypedArrayConstructorsList) {\n            if (global[NAME]) {\n              setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);\n            }\n          }\n        }\n      }\n      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {\n        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);\n      }\n      if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {\n        TYPED_ARRAY_TAG_REQIRED = true;\n        defineProperty(TypedArrayPrototype, TO_STRING_TAG, {\n          get: function() {\n            return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;\n          }\n        });\n        for (NAME in TypedArrayConstructorsList) {\n          if (global[NAME]) {\n            createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);\n          }\n        }\n      }\n      module.exports = {\n        NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,\n        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,\n        aTypedArray: aTypedArray,\n        aTypedArrayConstructor: aTypedArrayConstructor,\n        exportTypedArrayMethod: exportTypedArrayMethod,\n        exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,\n        isView: isView,\n        isTypedArray: isTypedArray,\n        TypedArray: TypedArray,\n        TypedArrayPrototype: TypedArrayPrototype\n      };\n    }, {\n      '../internals/array-buffer-native': 39,\n      '../internals/classof': 53,\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/descriptors': 60,\n      '../internals/global': 68,\n      '../internals/has': 69,\n      '../internals/is-object': 81,\n      '../internals/object-define-property': 89,\n      '../internals/object-get-prototype-of': 93,\n      '../internals/object-set-prototype-of': 97,\n      '../internals/redefine': 102,\n      '../internals/uid': 124,\n      '../internals/well-known-symbol': 126\n    } ],\n    41: [ function(_dereq_, module, exports) {\n      'use strict';\n      var global = _dereq_('../internals/global');\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var NATIVE_ARRAY_BUFFER = _dereq_('../internals/array-buffer-native');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var redefineAll = _dereq_('../internals/redefine-all');\n      var fails = _dereq_('../internals/fails');\n      var anInstance = _dereq_('../internals/an-instance');\n      var toInteger = _dereq_('../internals/to-integer');\n      var toLength = _dereq_('../internals/to-length');\n      var toIndex = _dereq_('../internals/to-index');\n      var IEEE754 = _dereq_('../internals/ieee754');\n      var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');\n      var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');\n      var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;\n      var defineProperty = _dereq_('../internals/object-define-property').f;\n      var arrayFill = _dereq_('../internals/array-fill');\n      var setToStringTag = _dereq_('../internals/set-to-string-tag');\n      var InternalStateModule = _dereq_('../internals/internal-state');\n      var getInternalState = InternalStateModule.get;\n      var setInternalState = InternalStateModule.set;\n      var ARRAY_BUFFER = 'ArrayBuffer';\n      var DATA_VIEW = 'DataView';\n      var PROTOTYPE = 'prototype';\n      var WRONG_LENGTH = 'Wrong length';\n      var WRONG_INDEX = 'Wrong index';\n      var NativeArrayBuffer = global[ARRAY_BUFFER];\n      var $ArrayBuffer = NativeArrayBuffer;\n      var $DataView = global[DATA_VIEW];\n      var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];\n      var ObjectPrototype = Object.prototype;\n      var RangeError = global.RangeError;\n      var packIEEE754 = IEEE754.pack;\n      var unpackIEEE754 = IEEE754.unpack;\n      var packInt8 = function(number) {\n        return [ number & 255 ];\n      };\n      var packInt16 = function(number) {\n        return [ number & 255, number >> 8 & 255 ];\n      };\n      var packInt32 = function(number) {\n        return [ number & 255, number >> 8 & 255, number >> 16 & 255, number >> 24 & 255 ];\n      };\n      var unpackInt32 = function(buffer) {\n        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];\n      };\n      var packFloat32 = function(number) {\n        return packIEEE754(number, 23, 4);\n      };\n      var packFloat64 = function(number) {\n        return packIEEE754(number, 52, 8);\n      };\n      var addGetter = function(Constructor, key) {\n        defineProperty(Constructor[PROTOTYPE], key, {\n          get: function() {\n            return getInternalState(this)[key];\n          }\n        });\n      };\n      var get = function(view, count, index, isLittleEndian) {\n        var intIndex = toIndex(index);\n        var store = getInternalState(view);\n        if (intIndex + count > store.byteLength) {\n          throw RangeError(WRONG_INDEX);\n        }\n        var bytes = getInternalState(store.buffer).bytes;\n        var start = intIndex + store.byteOffset;\n        var pack = bytes.slice(start, start + count);\n        return isLittleEndian ? pack : pack.reverse();\n      };\n      var set = function(view, count, index, conversion, value, isLittleEndian) {\n        var intIndex = toIndex(index);\n        var store = getInternalState(view);\n        if (intIndex + count > store.byteLength) {\n          throw RangeError(WRONG_INDEX);\n        }\n        var bytes = getInternalState(store.buffer).bytes;\n        var start = intIndex + store.byteOffset;\n        var pack = conversion(+value);\n        for (var i = 0; i < count; i++) {\n          bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];\n        }\n      };\n      if (!NATIVE_ARRAY_BUFFER) {\n        $ArrayBuffer = function ArrayBuffer(length) {\n          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n          var byteLength = toIndex(length);\n          setInternalState(this, {\n            bytes: arrayFill.call(new Array(byteLength), 0),\n            byteLength: byteLength\n          });\n          if (!DESCRIPTORS) {\n            this.byteLength = byteLength;\n          }\n        };\n        $DataView = function DataView(buffer, byteOffset, byteLength) {\n          anInstance(this, $DataView, DATA_VIEW);\n          anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n          var bufferLength = getInternalState(buffer).byteLength;\n          var offset = toInteger(byteOffset);\n          if (offset < 0 || offset > bufferLength) {\n            throw RangeError('Wrong offset');\n          }\n          byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n          if (offset + byteLength > bufferLength) {\n            throw RangeError(WRONG_LENGTH);\n          }\n          setInternalState(this, {\n            buffer: buffer,\n            byteLength: byteLength,\n            byteOffset: offset\n          });\n          if (!DESCRIPTORS) {\n            this.buffer = buffer;\n            this.byteLength = byteLength;\n            this.byteOffset = offset;\n          }\n        };\n        if (DESCRIPTORS) {\n          addGetter($ArrayBuffer, 'byteLength');\n          addGetter($DataView, 'buffer');\n          addGetter($DataView, 'byteLength');\n          addGetter($DataView, 'byteOffset');\n        }\n        redefineAll($DataView[PROTOTYPE], {\n          getInt8: function getInt8(byteOffset) {\n            return get(this, 1, byteOffset)[0] << 24 >> 24;\n          },\n          getUint8: function getUint8(byteOffset) {\n            return get(this, 1, byteOffset)[0];\n          },\n          getInt16: function getInt16(byteOffset) {\n            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n          },\n          getUint16: function getUint16(byteOffset) {\n            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);\n            return bytes[1] << 8 | bytes[0];\n          },\n          getInt32: function getInt32(byteOffset) {\n            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));\n          },\n          getUint32: function getUint32(byteOffset) {\n            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;\n          },\n          getFloat32: function getFloat32(byteOffset) {\n            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);\n          },\n          getFloat64: function getFloat64(byteOffset) {\n            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);\n          },\n          setInt8: function setInt8(byteOffset, value) {\n            set(this, 1, byteOffset, packInt8, value);\n          },\n          setUint8: function setUint8(byteOffset, value) {\n            set(this, 1, byteOffset, packInt8, value);\n          },\n          setInt16: function setInt16(byteOffset, value) {\n            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n          },\n          setUint16: function setUint16(byteOffset, value) {\n            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);\n          },\n          setInt32: function setInt32(byteOffset, value) {\n            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n          },\n          setUint32: function setUint32(byteOffset, value) {\n            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);\n          },\n          setFloat32: function setFloat32(byteOffset, value) {\n            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);\n          },\n          setFloat64: function setFloat64(byteOffset, value) {\n            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);\n          }\n        });\n      } else {\n        if (!fails(function() {\n          NativeArrayBuffer(1);\n        }) || !fails(function() {\n          new NativeArrayBuffer(-1);\n        }) || fails(function() {\n          new NativeArrayBuffer();\n          new NativeArrayBuffer(1.5);\n          new NativeArrayBuffer(NaN);\n          return NativeArrayBuffer.name != ARRAY_BUFFER;\n        })) {\n          $ArrayBuffer = function ArrayBuffer(length) {\n            anInstance(this, $ArrayBuffer);\n            return new NativeArrayBuffer(toIndex(length));\n          };\n          var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];\n          for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j; ) {\n            if (!((key = keys[j++]) in $ArrayBuffer)) {\n              createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);\n            }\n          }\n          ArrayBufferPrototype.constructor = $ArrayBuffer;\n        }\n        if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {\n          setPrototypeOf($DataViewPrototype, ObjectPrototype);\n        }\n        var testView = new $DataView(new $ArrayBuffer(2));\n        var nativeSetInt8 = $DataViewPrototype.setInt8;\n        testView.setInt8(0, 2147483648);\n        testView.setInt8(1, 2147483649);\n        if (testView.getInt8(0) || !testView.getInt8(1)) {\n          redefineAll($DataViewPrototype, {\n            setInt8: function setInt8(byteOffset, value) {\n              nativeSetInt8.call(this, byteOffset, value << 24 >> 24);\n            },\n            setUint8: function setUint8(byteOffset, value) {\n              nativeSetInt8.call(this, byteOffset, value << 24 >> 24);\n            }\n          }, {\n            unsafe: true\n          });\n        }\n      }\n      setToStringTag($ArrayBuffer, ARRAY_BUFFER);\n      setToStringTag($DataView, DATA_VIEW);\n      module.exports = {\n        ArrayBuffer: $ArrayBuffer,\n        DataView: $DataView\n      };\n    }, {\n      '../internals/an-instance': 37,\n      '../internals/array-buffer-native': 39,\n      '../internals/array-fill': 43,\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/descriptors': 60,\n      '../internals/fails': 64,\n      '../internals/global': 68,\n      '../internals/ieee754': 73,\n      '../internals/internal-state': 77,\n      '../internals/object-define-property': 89,\n      '../internals/object-get-own-property-names': 91,\n      '../internals/object-get-prototype-of': 93,\n      '../internals/object-set-prototype-of': 97,\n      '../internals/redefine-all': 101,\n      '../internals/set-to-string-tag': 106,\n      '../internals/to-index': 112,\n      '../internals/to-integer': 114,\n      '../internals/to-length': 115\n    } ],\n    42: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toObject = _dereq_('../internals/to-object');\n      var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');\n      var toLength = _dereq_('../internals/to-length');\n      var min = Math.min;\n      module.exports = [].copyWithin || function copyWithin(target, start) {\n        var O = toObject(this);\n        var len = toLength(O.length);\n        var to = toAbsoluteIndex(target, len);\n        var from = toAbsoluteIndex(start, len);\n        var end = arguments.length > 2 ? arguments[2] : undefined;\n        var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n        var inc = 1;\n        if (from < to && to < from + count) {\n          inc = -1;\n          from += count - 1;\n          to += count - 1;\n        }\n        while (count-- > 0) {\n          if (from in O) {\n            O[to] = O[from];\n          } else {\n            delete O[to];\n          }\n          to += inc;\n          from += inc;\n        }\n        return O;\n      };\n    }, {\n      '../internals/to-absolute-index': 111,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116\n    } ],\n    43: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toObject = _dereq_('../internals/to-object');\n      var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');\n      var toLength = _dereq_('../internals/to-length');\n      module.exports = function fill(value) {\n        var O = toObject(this);\n        var length = toLength(O.length);\n        var argumentsLength = arguments.length;\n        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);\n        var end = argumentsLength > 2 ? arguments[2] : undefined;\n        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n        while (endPos > index) {\n          O[index++] = value;\n        }\n        return O;\n      };\n    }, {\n      '../internals/to-absolute-index': 111,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116\n    } ],\n    44: [ function(_dereq_, module, exports) {\n      var toIndexedObject = _dereq_('../internals/to-indexed-object');\n      var toLength = _dereq_('../internals/to-length');\n      var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');\n      var createMethod = function(IS_INCLUDES) {\n        return function($this, el, fromIndex) {\n          var O = toIndexedObject($this);\n          var length = toLength(O.length);\n          var index = toAbsoluteIndex(fromIndex, length);\n          var value;\n          if (IS_INCLUDES && el != el) {\n            while (length > index) {\n              value = O[index++];\n              if (value != value) {\n                return true;\n              }\n            }\n          } else {\n            for (;length > index; index++) {\n              if ((IS_INCLUDES || index in O) && O[index] === el) {\n                return IS_INCLUDES || index || 0;\n              }\n            }\n          }\n          return !IS_INCLUDES && -1;\n        };\n      };\n      module.exports = {\n        includes: createMethod(true),\n        indexOf: createMethod(false)\n      };\n    }, {\n      '../internals/to-absolute-index': 111,\n      '../internals/to-indexed-object': 113,\n      '../internals/to-length': 115\n    } ],\n    45: [ function(_dereq_, module, exports) {\n      var bind = _dereq_('../internals/function-bind-context');\n      var IndexedObject = _dereq_('../internals/indexed-object');\n      var toObject = _dereq_('../internals/to-object');\n      var toLength = _dereq_('../internals/to-length');\n      var arraySpeciesCreate = _dereq_('../internals/array-species-create');\n      var push = [].push;\n      var createMethod = function(TYPE) {\n        var IS_MAP = TYPE == 1;\n        var IS_FILTER = TYPE == 2;\n        var IS_SOME = TYPE == 3;\n        var IS_EVERY = TYPE == 4;\n        var IS_FIND_INDEX = TYPE == 6;\n        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n        return function($this, callbackfn, that, specificCreate) {\n          var O = toObject($this);\n          var self = IndexedObject(O);\n          var boundFunction = bind(callbackfn, that, 3);\n          var length = toLength(self.length);\n          var index = 0;\n          var create = specificCreate || arraySpeciesCreate;\n          var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n          var value, result;\n          for (;length > index; index++) {\n            if (NO_HOLES || index in self) {\n              value = self[index];\n              result = boundFunction(value, index, O);\n              if (TYPE) {\n                if (IS_MAP) {\n                  target[index] = result;\n                } else if (result) {\n                  switch (TYPE) {\n                   case 3:\n                    return true;\n\n                   case 5:\n                    return value;\n\n                   case 6:\n                    return index;\n\n                   case 2:\n                    push.call(target, value);\n                  }\n                } else if (IS_EVERY) {\n                  return false;\n                }\n              }\n            }\n          }\n          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n        };\n      };\n      module.exports = {\n        forEach: createMethod(0),\n        map: createMethod(1),\n        filter: createMethod(2),\n        some: createMethod(3),\n        every: createMethod(4),\n        find: createMethod(5),\n        findIndex: createMethod(6)\n      };\n    }, {\n      '../internals/array-species-create': 50,\n      '../internals/function-bind-context': 65,\n      '../internals/indexed-object': 74,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116\n    } ],\n    46: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toIndexedObject = _dereq_('../internals/to-indexed-object');\n      var toInteger = _dereq_('../internals/to-integer');\n      var toLength = _dereq_('../internals/to-length');\n      var arrayMethodIsStrict = _dereq_('../internals/array-method-is-strict');\n      var arrayMethodUsesToLength = _dereq_('../internals/array-method-uses-to-length');\n      var min = Math.min;\n      var nativeLastIndexOf = [].lastIndexOf;\n      var NEGATIVE_ZERO = !!nativeLastIndexOf && 1 / [ 1 ].lastIndexOf(1, -0) < 0;\n      var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');\n      var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {\n        ACCESSORS: true,\n        1: 0\n      });\n      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH;\n      module.exports = FORCED ? function lastIndexOf(searchElement) {\n        if (NEGATIVE_ZERO) {\n          return nativeLastIndexOf.apply(this, arguments) || 0;\n        }\n        var O = toIndexedObject(this);\n        var length = toLength(O.length);\n        var index = length - 1;\n        if (arguments.length > 1) {\n          index = min(index, toInteger(arguments[1]));\n        }\n        if (index < 0) {\n          index = length + index;\n        }\n        for (;index >= 0; index--) {\n          if (index in O && O[index] === searchElement) {\n            return index || 0;\n          }\n        }\n        return -1;\n      } : nativeLastIndexOf;\n    }, {\n      '../internals/array-method-is-strict': 47,\n      '../internals/array-method-uses-to-length': 48,\n      '../internals/to-indexed-object': 113,\n      '../internals/to-integer': 114,\n      '../internals/to-length': 115\n    } ],\n    47: [ function(_dereq_, module, exports) {\n      'use strict';\n      var fails = _dereq_('../internals/fails');\n      module.exports = function(METHOD_NAME, argument) {\n        var method = [][METHOD_NAME];\n        return !!method && fails(function() {\n          method.call(null, argument || function() {\n            throw 1;\n          }, 1);\n        });\n      };\n    }, {\n      '../internals/fails': 64\n    } ],\n    48: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var fails = _dereq_('../internals/fails');\n      var has = _dereq_('../internals/has');\n      var defineProperty = Object.defineProperty;\n      var cache = {};\n      var thrower = function(it) {\n        throw it;\n      };\n      module.exports = function(METHOD_NAME, options) {\n        if (has(cache, METHOD_NAME)) {\n          return cache[METHOD_NAME];\n        }\n        if (!options) {\n          options = {};\n        }\n        var method = [][METHOD_NAME];\n        var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;\n        var argument0 = has(options, 0) ? options[0] : thrower;\n        var argument1 = has(options, 1) ? options[1] : undefined;\n        return cache[METHOD_NAME] = !!method && !fails(function() {\n          if (ACCESSORS && !DESCRIPTORS) {\n            return true;\n          }\n          var O = {\n            length: -1\n          };\n          if (ACCESSORS) {\n            defineProperty(O, 1, {\n              enumerable: true,\n              get: thrower\n            });\n          } else {\n            O[1] = 1;\n          }\n          method.call(O, argument0, argument1);\n        });\n      };\n    }, {\n      '../internals/descriptors': 60,\n      '../internals/fails': 64,\n      '../internals/has': 69\n    } ],\n    49: [ function(_dereq_, module, exports) {\n      var aFunction = _dereq_('../internals/a-function');\n      var toObject = _dereq_('../internals/to-object');\n      var IndexedObject = _dereq_('../internals/indexed-object');\n      var toLength = _dereq_('../internals/to-length');\n      var createMethod = function(IS_RIGHT) {\n        return function(that, callbackfn, argumentsLength, memo) {\n          aFunction(callbackfn);\n          var O = toObject(that);\n          var self = IndexedObject(O);\n          var length = toLength(O.length);\n          var index = IS_RIGHT ? length - 1 : 0;\n          var i = IS_RIGHT ? -1 : 1;\n          if (argumentsLength < 2) {\n            while (true) {\n              if (index in self) {\n                memo = self[index];\n                index += i;\n                break;\n              }\n              index += i;\n              if (IS_RIGHT ? index < 0 : length <= index) {\n                throw TypeError('Reduce of empty array with no initial value');\n              }\n            }\n          }\n          for (;IS_RIGHT ? index >= 0 : length > index; index += i) {\n            if (index in self) {\n              memo = callbackfn(memo, self[index], index, O);\n            }\n          }\n          return memo;\n        };\n      };\n      module.exports = {\n        left: createMethod(false),\n        right: createMethod(true)\n      };\n    }, {\n      '../internals/a-function': 34,\n      '../internals/indexed-object': 74,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116\n    } ],\n    50: [ function(_dereq_, module, exports) {\n      var isObject = _dereq_('../internals/is-object');\n      var isArray = _dereq_('../internals/is-array');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var SPECIES = wellKnownSymbol('species');\n      module.exports = function(originalArray, length) {\n        var C;\n        if (isArray(originalArray)) {\n          C = originalArray.constructor;\n          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) {\n            C = undefined;\n          } else if (isObject(C)) {\n            C = C[SPECIES];\n            if (C === null) {\n              C = undefined;\n            }\n          }\n        }\n        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);\n      };\n    }, {\n      '../internals/is-array': 79,\n      '../internals/is-object': 81,\n      '../internals/well-known-symbol': 126\n    } ],\n    51: [ function(_dereq_, module, exports) {\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var ITERATOR = wellKnownSymbol('iterator');\n      var SAFE_CLOSING = false;\n      try {\n        var called = 0;\n        var iteratorWithReturn = {\n          next: function() {\n            return {\n              done: !!called++\n            };\n          },\n          return: function() {\n            SAFE_CLOSING = true;\n          }\n        };\n        iteratorWithReturn[ITERATOR] = function() {\n          return this;\n        };\n        Array.from(iteratorWithReturn, function() {\n          throw 2;\n        });\n      } catch (error) {}\n      module.exports = function(exec, SKIP_CLOSING) {\n        if (!SKIP_CLOSING && !SAFE_CLOSING) {\n          return false;\n        }\n        var ITERATION_SUPPORT = false;\n        try {\n          var object = {};\n          object[ITERATOR] = function() {\n            return {\n              next: function() {\n                return {\n                  done: ITERATION_SUPPORT = true\n                };\n              }\n            };\n          };\n          exec(object);\n        } catch (error) {}\n        return ITERATION_SUPPORT;\n      };\n    }, {\n      '../internals/well-known-symbol': 126\n    } ],\n    52: [ function(_dereq_, module, exports) {\n      var toString = {}.toString;\n      module.exports = function(it) {\n        return toString.call(it).slice(8, -1);\n      };\n    }, {} ],\n    53: [ function(_dereq_, module, exports) {\n      var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');\n      var classofRaw = _dereq_('../internals/classof-raw');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      var CORRECT_ARGUMENTS = classofRaw(function() {\n        return arguments;\n      }()) == 'Arguments';\n      var tryGet = function(it, key) {\n        try {\n          return it[key];\n        } catch (error) {}\n      };\n      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {\n        var O, tag, result;\n        return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;\n      };\n    }, {\n      '../internals/classof-raw': 52,\n      '../internals/to-string-tag-support': 120,\n      '../internals/well-known-symbol': 126\n    } ],\n    54: [ function(_dereq_, module, exports) {\n      var has = _dereq_('../internals/has');\n      var ownKeys = _dereq_('../internals/own-keys');\n      var getOwnPropertyDescriptorModule = _dereq_('../internals/object-get-own-property-descriptor');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      module.exports = function(target, source) {\n        var keys = ownKeys(source);\n        var defineProperty = definePropertyModule.f;\n        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          if (!has(target, key)) {\n            defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n          }\n        }\n      };\n    }, {\n      '../internals/has': 69,\n      '../internals/object-define-property': 89,\n      '../internals/object-get-own-property-descriptor': 90,\n      '../internals/own-keys': 99\n    } ],\n    55: [ function(_dereq_, module, exports) {\n      var fails = _dereq_('../internals/fails');\n      module.exports = !fails(function() {\n        function F() {}\n        F.prototype.constructor = null;\n        return Object.getPrototypeOf(new F()) !== F.prototype;\n      });\n    }, {\n      '../internals/fails': 64\n    } ],\n    56: [ function(_dereq_, module, exports) {\n      'use strict';\n      var IteratorPrototype = _dereq_('../internals/iterators-core').IteratorPrototype;\n      var create = _dereq_('../internals/object-create');\n      var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');\n      var setToStringTag = _dereq_('../internals/set-to-string-tag');\n      var Iterators = _dereq_('../internals/iterators');\n      var returnThis = function() {\n        return this;\n      };\n      module.exports = function(IteratorConstructor, NAME, next) {\n        var TO_STRING_TAG = NAME + ' Iterator';\n        IteratorConstructor.prototype = create(IteratorPrototype, {\n          next: createPropertyDescriptor(1, next)\n        });\n        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n        Iterators[TO_STRING_TAG] = returnThis;\n        return IteratorConstructor;\n      };\n    }, {\n      '../internals/create-property-descriptor': 58,\n      '../internals/iterators': 84,\n      '../internals/iterators-core': 83,\n      '../internals/object-create': 87,\n      '../internals/set-to-string-tag': 106\n    } ],\n    57: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');\n      module.exports = DESCRIPTORS ? function(object, key, value) {\n        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n      } : function(object, key, value) {\n        object[key] = value;\n        return object;\n      };\n    }, {\n      '../internals/create-property-descriptor': 58,\n      '../internals/descriptors': 60,\n      '../internals/object-define-property': 89\n    } ],\n    58: [ function(_dereq_, module, exports) {\n      module.exports = function(bitmap, value) {\n        return {\n          enumerable: !(bitmap & 1),\n          configurable: !(bitmap & 2),\n          writable: !(bitmap & 4),\n          value: value\n        };\n      };\n    }, {} ],\n    59: [ function(_dereq_, module, exports) {\n      'use strict';\n      var $ = _dereq_('../internals/export');\n      var createIteratorConstructor = _dereq_('../internals/create-iterator-constructor');\n      var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');\n      var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');\n      var setToStringTag = _dereq_('../internals/set-to-string-tag');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var redefine = _dereq_('../internals/redefine');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var IS_PURE = _dereq_('../internals/is-pure');\n      var Iterators = _dereq_('../internals/iterators');\n      var IteratorsCore = _dereq_('../internals/iterators-core');\n      var IteratorPrototype = IteratorsCore.IteratorPrototype;\n      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\n      var ITERATOR = wellKnownSymbol('iterator');\n      var KEYS = 'keys';\n      var VALUES = 'values';\n      var ENTRIES = 'entries';\n      var returnThis = function() {\n        return this;\n      };\n      module.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n        createIteratorConstructor(IteratorConstructor, NAME, next);\n        var getIterationMethod = function(KIND) {\n          if (KIND === DEFAULT && defaultIterator) {\n            return defaultIterator;\n          }\n          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) {\n            return IterablePrototype[KIND];\n          }\n          switch (KIND) {\n           case KEYS:\n            return function keys() {\n              return new IteratorConstructor(this, KIND);\n            };\n\n           case VALUES:\n            return function values() {\n              return new IteratorConstructor(this, KIND);\n            };\n\n           case ENTRIES:\n            return function entries() {\n              return new IteratorConstructor(this, KIND);\n            };\n          }\n          return function() {\n            return new IteratorConstructor(this);\n          };\n        };\n        var TO_STRING_TAG = NAME + ' Iterator';\n        var INCORRECT_VALUES_NAME = false;\n        var IterablePrototype = Iterable.prototype;\n        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];\n        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;\n        var CurrentIteratorPrototype, methods, KEY;\n        if (anyNativeIterator) {\n          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n              if (setPrototypeOf) {\n                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n              } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {\n                createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n              }\n            }\n            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n            if (IS_PURE) {\n              Iterators[TO_STRING_TAG] = returnThis;\n            }\n          }\n        }\n        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n          INCORRECT_VALUES_NAME = true;\n          defaultIterator = function values() {\n            return nativeIterator.call(this);\n          };\n        }\n        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n          createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n        }\n        Iterators[NAME] = defaultIterator;\n        if (DEFAULT) {\n          methods = {\n            values: getIterationMethod(VALUES),\n            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n            entries: getIterationMethod(ENTRIES)\n          };\n          if (FORCED) {\n            for (KEY in methods) {\n              if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n                redefine(IterablePrototype, KEY, methods[KEY]);\n              }\n            }\n          } else {\n            $({\n              target: NAME,\n              proto: true,\n              forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME\n            }, methods);\n          }\n        }\n        return methods;\n      };\n    }, {\n      '../internals/create-iterator-constructor': 56,\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/export': 63,\n      '../internals/is-pure': 82,\n      '../internals/iterators': 84,\n      '../internals/iterators-core': 83,\n      '../internals/object-get-prototype-of': 93,\n      '../internals/object-set-prototype-of': 97,\n      '../internals/redefine': 102,\n      '../internals/set-to-string-tag': 106,\n      '../internals/well-known-symbol': 126\n    } ],\n    60: [ function(_dereq_, module, exports) {\n      var fails = _dereq_('../internals/fails');\n      module.exports = !fails(function() {\n        return Object.defineProperty({}, 1, {\n          get: function() {\n            return 7;\n          }\n        })[1] != 7;\n      });\n    }, {\n      '../internals/fails': 64\n    } ],\n    61: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var isObject = _dereq_('../internals/is-object');\n      var document = global.document;\n      var EXISTS = isObject(document) && isObject(document.createElement);\n      module.exports = function(it) {\n        return EXISTS ? document.createElement(it) : {};\n      };\n    }, {\n      '../internals/global': 68,\n      '../internals/is-object': 81\n    } ],\n    62: [ function(_dereq_, module, exports) {\n      module.exports = [ 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf' ];\n    }, {} ],\n    63: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var getOwnPropertyDescriptor = _dereq_('../internals/object-get-own-property-descriptor').f;\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var redefine = _dereq_('../internals/redefine');\n      var setGlobal = _dereq_('../internals/set-global');\n      var copyConstructorProperties = _dereq_('../internals/copy-constructor-properties');\n      var isForced = _dereq_('../internals/is-forced');\n      module.exports = function(options, source) {\n        var TARGET = options.target;\n        var GLOBAL = options.global;\n        var STATIC = options.stat;\n        var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n        if (GLOBAL) {\n          target = global;\n        } else if (STATIC) {\n          target = global[TARGET] || setGlobal(TARGET, {});\n        } else {\n          target = (global[TARGET] || {}).prototype;\n        }\n        if (target) {\n          for (key in source) {\n            sourceProperty = source[key];\n            if (options.noTargetGet) {\n              descriptor = getOwnPropertyDescriptor(target, key);\n              targetProperty = descriptor && descriptor.value;\n            } else {\n              targetProperty = target[key];\n            }\n            FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);\n            if (!FORCED && targetProperty !== undefined) {\n              if (typeof sourceProperty === typeof targetProperty) {\n                continue;\n              }\n              copyConstructorProperties(sourceProperty, targetProperty);\n            }\n            if (options.sham || targetProperty && targetProperty.sham) {\n              createNonEnumerableProperty(sourceProperty, 'sham', true);\n            }\n            redefine(target, key, sourceProperty, options);\n          }\n        }\n      };\n    }, {\n      '../internals/copy-constructor-properties': 54,\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/global': 68,\n      '../internals/is-forced': 80,\n      '../internals/object-get-own-property-descriptor': 90,\n      '../internals/redefine': 102,\n      '../internals/set-global': 104\n    } ],\n    64: [ function(_dereq_, module, exports) {\n      module.exports = function(exec) {\n        try {\n          return !!exec();\n        } catch (error) {\n          return true;\n        }\n      };\n    }, {} ],\n    65: [ function(_dereq_, module, exports) {\n      var aFunction = _dereq_('../internals/a-function');\n      module.exports = function(fn, that, length) {\n        aFunction(fn);\n        if (that === undefined) {\n          return fn;\n        }\n        switch (length) {\n         case 0:\n          return function() {\n            return fn.call(that);\n          };\n\n         case 1:\n          return function(a) {\n            return fn.call(that, a);\n          };\n\n         case 2:\n          return function(a, b) {\n            return fn.call(that, a, b);\n          };\n\n         case 3:\n          return function(a, b, c) {\n            return fn.call(that, a, b, c);\n          };\n        }\n        return function() {\n          return fn.apply(that, arguments);\n        };\n      };\n    }, {\n      '../internals/a-function': 34\n    } ],\n    66: [ function(_dereq_, module, exports) {\n      var path = _dereq_('../internals/path');\n      var global = _dereq_('../internals/global');\n      var aFunction = function(variable) {\n        return typeof variable == 'function' ? variable : undefined;\n      };\n      module.exports = function(namespace, method) {\n        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];\n      };\n    }, {\n      '../internals/global': 68,\n      '../internals/path': 100\n    } ],\n    67: [ function(_dereq_, module, exports) {\n      var classof = _dereq_('../internals/classof');\n      var Iterators = _dereq_('../internals/iterators');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var ITERATOR = wellKnownSymbol('iterator');\n      module.exports = function(it) {\n        if (it != undefined) {\n          return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];\n        }\n      };\n    }, {\n      '../internals/classof': 53,\n      '../internals/iterators': 84,\n      '../internals/well-known-symbol': 126\n    } ],\n    68: [ function(_dereq_, module, exports) {\n      (function(global) {\n        var check = function(it) {\n          return it && it.Math == Math && it;\n        };\n        module.exports = check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || Function('return this')();\n      }).call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\n    }, {} ],\n    69: [ function(_dereq_, module, exports) {\n      var hasOwnProperty = {}.hasOwnProperty;\n      module.exports = function(it, key) {\n        return hasOwnProperty.call(it, key);\n      };\n    }, {} ],\n    70: [ function(_dereq_, module, exports) {\n      module.exports = {};\n    }, {} ],\n    71: [ function(_dereq_, module, exports) {\n      var getBuiltIn = _dereq_('../internals/get-built-in');\n      module.exports = getBuiltIn('document', 'documentElement');\n    }, {\n      '../internals/get-built-in': 66\n    } ],\n    72: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var fails = _dereq_('../internals/fails');\n      var createElement = _dereq_('../internals/document-create-element');\n      module.exports = !DESCRIPTORS && !fails(function() {\n        return Object.defineProperty(createElement('div'), 'a', {\n          get: function() {\n            return 7;\n          }\n        }).a != 7;\n      });\n    }, {\n      '../internals/descriptors': 60,\n      '../internals/document-create-element': 61,\n      '../internals/fails': 64\n    } ],\n    73: [ function(_dereq_, module, exports) {\n      var Infinity = 1 / 0;\n      var abs = Math.abs;\n      var pow = Math.pow;\n      var floor = Math.floor;\n      var log = Math.log;\n      var LN2 = Math.LN2;\n      var pack = function(number, mantissaLength, bytes) {\n        var buffer = new Array(bytes);\n        var exponentLength = bytes * 8 - mantissaLength - 1;\n        var eMax = (1 << exponentLength) - 1;\n        var eBias = eMax >> 1;\n        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;\n        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;\n        var index = 0;\n        var exponent, mantissa, c;\n        number = abs(number);\n        if (number != number || number === Infinity) {\n          mantissa = number != number ? 1 : 0;\n          exponent = eMax;\n        } else {\n          exponent = floor(log(number) / LN2);\n          if (number * (c = pow(2, -exponent)) < 1) {\n            exponent--;\n            c *= 2;\n          }\n          if (exponent + eBias >= 1) {\n            number += rt / c;\n          } else {\n            number += rt * pow(2, 1 - eBias);\n          }\n          if (number * c >= 2) {\n            exponent++;\n            c /= 2;\n          }\n          if (exponent + eBias >= eMax) {\n            mantissa = 0;\n            exponent = eMax;\n          } else if (exponent + eBias >= 1) {\n            mantissa = (number * c - 1) * pow(2, mantissaLength);\n            exponent = exponent + eBias;\n          } else {\n            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);\n            exponent = 0;\n          }\n        }\n        for (;mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8) {}\n        exponent = exponent << mantissaLength | mantissa;\n        exponentLength += mantissaLength;\n        for (;exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8) {}\n        buffer[--index] |= sign * 128;\n        return buffer;\n      };\n      var unpack = function(buffer, mantissaLength) {\n        var bytes = buffer.length;\n        var exponentLength = bytes * 8 - mantissaLength - 1;\n        var eMax = (1 << exponentLength) - 1;\n        var eBias = eMax >> 1;\n        var nBits = exponentLength - 7;\n        var index = bytes - 1;\n        var sign = buffer[index--];\n        var exponent = sign & 127;\n        var mantissa;\n        sign >>= 7;\n        for (;nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8) {}\n        mantissa = exponent & (1 << -nBits) - 1;\n        exponent >>= -nBits;\n        nBits += mantissaLength;\n        for (;nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8) {}\n        if (exponent === 0) {\n          exponent = 1 - eBias;\n        } else if (exponent === eMax) {\n          return mantissa ? NaN : sign ? -Infinity : Infinity;\n        } else {\n          mantissa = mantissa + pow(2, mantissaLength);\n          exponent = exponent - eBias;\n        }\n        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);\n      };\n      module.exports = {\n        pack: pack,\n        unpack: unpack\n      };\n    }, {} ],\n    74: [ function(_dereq_, module, exports) {\n      var fails = _dereq_('../internals/fails');\n      var classof = _dereq_('../internals/classof-raw');\n      var split = ''.split;\n      module.exports = fails(function() {\n        return !Object('z').propertyIsEnumerable(0);\n      }) ? function(it) {\n        return classof(it) == 'String' ? split.call(it, '') : Object(it);\n      } : Object;\n    }, {\n      '../internals/classof-raw': 52,\n      '../internals/fails': 64\n    } ],\n    75: [ function(_dereq_, module, exports) {\n      var isObject = _dereq_('../internals/is-object');\n      var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');\n      module.exports = function($this, dummy, Wrapper) {\n        var NewTarget, NewTargetPrototype;\n        if (setPrototypeOf && typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) {\n          setPrototypeOf($this, NewTargetPrototype);\n        }\n        return $this;\n      };\n    }, {\n      '../internals/is-object': 81,\n      '../internals/object-set-prototype-of': 97\n    } ],\n    76: [ function(_dereq_, module, exports) {\n      var store = _dereq_('../internals/shared-store');\n      var functionToString = Function.toString;\n      if (typeof store.inspectSource != 'function') {\n        store.inspectSource = function(it) {\n          return functionToString.call(it);\n        };\n      }\n      module.exports = store.inspectSource;\n    }, {\n      '../internals/shared-store': 108\n    } ],\n    77: [ function(_dereq_, module, exports) {\n      var NATIVE_WEAK_MAP = _dereq_('../internals/native-weak-map');\n      var global = _dereq_('../internals/global');\n      var isObject = _dereq_('../internals/is-object');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var objectHas = _dereq_('../internals/has');\n      var sharedKey = _dereq_('../internals/shared-key');\n      var hiddenKeys = _dereq_('../internals/hidden-keys');\n      var WeakMap = global.WeakMap;\n      var set, get, has;\n      var enforce = function(it) {\n        return has(it) ? get(it) : set(it, {});\n      };\n      var getterFor = function(TYPE) {\n        return function(it) {\n          var state;\n          if (!isObject(it) || (state = get(it)).type !== TYPE) {\n            throw TypeError('Incompatible receiver, ' + TYPE + ' required');\n          }\n          return state;\n        };\n      };\n      if (NATIVE_WEAK_MAP) {\n        var store = new WeakMap();\n        var wmget = store.get;\n        var wmhas = store.has;\n        var wmset = store.set;\n        set = function(it, metadata) {\n          wmset.call(store, it, metadata);\n          return metadata;\n        };\n        get = function(it) {\n          return wmget.call(store, it) || {};\n        };\n        has = function(it) {\n          return wmhas.call(store, it);\n        };\n      } else {\n        var STATE = sharedKey('state');\n        hiddenKeys[STATE] = true;\n        set = function(it, metadata) {\n          createNonEnumerableProperty(it, STATE, metadata);\n          return metadata;\n        };\n        get = function(it) {\n          return objectHas(it, STATE) ? it[STATE] : {};\n        };\n        has = function(it) {\n          return objectHas(it, STATE);\n        };\n      }\n      module.exports = {\n        set: set,\n        get: get,\n        has: has,\n        enforce: enforce,\n        getterFor: getterFor\n      };\n    }, {\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/global': 68,\n      '../internals/has': 69,\n      '../internals/hidden-keys': 70,\n      '../internals/is-object': 81,\n      '../internals/native-weak-map': 86,\n      '../internals/shared-key': 107\n    } ],\n    78: [ function(_dereq_, module, exports) {\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var Iterators = _dereq_('../internals/iterators');\n      var ITERATOR = wellKnownSymbol('iterator');\n      var ArrayPrototype = Array.prototype;\n      module.exports = function(it) {\n        return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);\n      };\n    }, {\n      '../internals/iterators': 84,\n      '../internals/well-known-symbol': 126\n    } ],\n    79: [ function(_dereq_, module, exports) {\n      var classof = _dereq_('../internals/classof-raw');\n      module.exports = Array.isArray || function isArray(arg) {\n        return classof(arg) == 'Array';\n      };\n    }, {\n      '../internals/classof-raw': 52\n    } ],\n    80: [ function(_dereq_, module, exports) {\n      var fails = _dereq_('../internals/fails');\n      var replacement = /#|\\.prototype\\./;\n      var isForced = function(feature, detection) {\n        var value = data[normalize(feature)];\n        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;\n      };\n      var normalize = isForced.normalize = function(string) {\n        return String(string).replace(replacement, '.').toLowerCase();\n      };\n      var data = isForced.data = {};\n      var NATIVE = isForced.NATIVE = 'N';\n      var POLYFILL = isForced.POLYFILL = 'P';\n      module.exports = isForced;\n    }, {\n      '../internals/fails': 64\n    } ],\n    81: [ function(_dereq_, module, exports) {\n      module.exports = function(it) {\n        return typeof it === 'object' ? it !== null : typeof it === 'function';\n      };\n    }, {} ],\n    82: [ function(_dereq_, module, exports) {\n      module.exports = false;\n    }, {} ],\n    83: [ function(_dereq_, module, exports) {\n      'use strict';\n      var getPrototypeOf = _dereq_('../internals/object-get-prototype-of');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var has = _dereq_('../internals/has');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var IS_PURE = _dereq_('../internals/is-pure');\n      var ITERATOR = wellKnownSymbol('iterator');\n      var BUGGY_SAFARI_ITERATORS = false;\n      var returnThis = function() {\n        return this;\n      };\n      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n      if ([].keys) {\n        arrayIterator = [].keys();\n        if (!('next' in arrayIterator)) {\n          BUGGY_SAFARI_ITERATORS = true;\n        } else {\n          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) {\n            IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n          }\n        }\n      }\n      if (IteratorPrototype == undefined) {\n        IteratorPrototype = {};\n      }\n      if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {\n        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n      }\n      module.exports = {\n        IteratorPrototype: IteratorPrototype,\n        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n      };\n    }, {\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/has': 69,\n      '../internals/is-pure': 82,\n      '../internals/object-get-prototype-of': 93,\n      '../internals/well-known-symbol': 126\n    } ],\n    84: [ function(_dereq_, module, exports) {\n      arguments[4][70][0].apply(exports, arguments);\n    }, {\n      dup: 70\n    } ],\n    85: [ function(_dereq_, module, exports) {\n      var fails = _dereq_('../internals/fails');\n      module.exports = !!Object.getOwnPropertySymbols && !fails(function() {\n        return !String(Symbol());\n      });\n    }, {\n      '../internals/fails': 64\n    } ],\n    86: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var inspectSource = _dereq_('../internals/inspect-source');\n      var WeakMap = global.WeakMap;\n      module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));\n    }, {\n      '../internals/global': 68,\n      '../internals/inspect-source': 76\n    } ],\n    87: [ function(_dereq_, module, exports) {\n      var anObject = _dereq_('../internals/an-object');\n      var defineProperties = _dereq_('../internals/object-define-properties');\n      var enumBugKeys = _dereq_('../internals/enum-bug-keys');\n      var hiddenKeys = _dereq_('../internals/hidden-keys');\n      var html = _dereq_('../internals/html');\n      var documentCreateElement = _dereq_('../internals/document-create-element');\n      var sharedKey = _dereq_('../internals/shared-key');\n      var GT = '>';\n      var LT = '<';\n      var PROTOTYPE = 'prototype';\n      var SCRIPT = 'script';\n      var IE_PROTO = sharedKey('IE_PROTO');\n      var EmptyConstructor = function() {};\n      var scriptTag = function(content) {\n        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n      };\n      var NullProtoObjectViaActiveX = function(activeXDocument) {\n        activeXDocument.write(scriptTag(''));\n        activeXDocument.close();\n        var temp = activeXDocument.parentWindow.Object;\n        activeXDocument = null;\n        return temp;\n      };\n      var NullProtoObjectViaIFrame = function() {\n        var iframe = documentCreateElement('iframe');\n        var JS = 'java' + SCRIPT + ':';\n        var iframeDocument;\n        iframe.style.display = 'none';\n        html.appendChild(iframe);\n        iframe.src = String(JS);\n        iframeDocument = iframe.contentWindow.document;\n        iframeDocument.open();\n        iframeDocument.write(scriptTag('document.F=Object'));\n        iframeDocument.close();\n        return iframeDocument.F;\n      };\n      var activeXDocument;\n      var NullProtoObject = function() {\n        try {\n          activeXDocument = document.domain && new ActiveXObject('htmlfile');\n        } catch (error) {}\n        NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();\n        var length = enumBugKeys.length;\n        while (length--) {\n          delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n        }\n        return NullProtoObject();\n      };\n      hiddenKeys[IE_PROTO] = true;\n      module.exports = Object.create || function create(O, Properties) {\n        var result;\n        if (O !== null) {\n          EmptyConstructor[PROTOTYPE] = anObject(O);\n          result = new EmptyConstructor();\n          EmptyConstructor[PROTOTYPE] = null;\n          result[IE_PROTO] = O;\n        } else {\n          result = NullProtoObject();\n        }\n        return Properties === undefined ? result : defineProperties(result, Properties);\n      };\n    }, {\n      '../internals/an-object': 38,\n      '../internals/document-create-element': 61,\n      '../internals/enum-bug-keys': 62,\n      '../internals/hidden-keys': 70,\n      '../internals/html': 71,\n      '../internals/object-define-properties': 88,\n      '../internals/shared-key': 107\n    } ],\n    88: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      var anObject = _dereq_('../internals/an-object');\n      var objectKeys = _dereq_('../internals/object-keys');\n      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n        anObject(O);\n        var keys = objectKeys(Properties);\n        var length = keys.length;\n        var index = 0;\n        var key;\n        while (length > index) {\n          definePropertyModule.f(O, key = keys[index++], Properties[key]);\n        }\n        return O;\n      };\n    }, {\n      '../internals/an-object': 38,\n      '../internals/descriptors': 60,\n      '../internals/object-define-property': 89,\n      '../internals/object-keys': 95\n    } ],\n    89: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var IE8_DOM_DEFINE = _dereq_('../internals/ie8-dom-define');\n      var anObject = _dereq_('../internals/an-object');\n      var toPrimitive = _dereq_('../internals/to-primitive');\n      var nativeDefineProperty = Object.defineProperty;\n      exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {\n        anObject(O);\n        P = toPrimitive(P, true);\n        anObject(Attributes);\n        if (IE8_DOM_DEFINE) {\n          try {\n            return nativeDefineProperty(O, P, Attributes);\n          } catch (error) {}\n        }\n        if ('get' in Attributes || 'set' in Attributes) {\n          throw TypeError('Accessors not supported');\n        }\n        if ('value' in Attributes) {\n          O[P] = Attributes.value;\n        }\n        return O;\n      };\n    }, {\n      '../internals/an-object': 38,\n      '../internals/descriptors': 60,\n      '../internals/ie8-dom-define': 72,\n      '../internals/to-primitive': 119\n    } ],\n    90: [ function(_dereq_, module, exports) {\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var propertyIsEnumerableModule = _dereq_('../internals/object-property-is-enumerable');\n      var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');\n      var toIndexedObject = _dereq_('../internals/to-indexed-object');\n      var toPrimitive = _dereq_('../internals/to-primitive');\n      var has = _dereq_('../internals/has');\n      var IE8_DOM_DEFINE = _dereq_('../internals/ie8-dom-define');\n      var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n        O = toIndexedObject(O);\n        P = toPrimitive(P, true);\n        if (IE8_DOM_DEFINE) {\n          try {\n            return nativeGetOwnPropertyDescriptor(O, P);\n          } catch (error) {}\n        }\n        if (has(O, P)) {\n          return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n        }\n      };\n    }, {\n      '../internals/create-property-descriptor': 58,\n      '../internals/descriptors': 60,\n      '../internals/has': 69,\n      '../internals/ie8-dom-define': 72,\n      '../internals/object-property-is-enumerable': 96,\n      '../internals/to-indexed-object': 113,\n      '../internals/to-primitive': 119\n    } ],\n    91: [ function(_dereq_, module, exports) {\n      var internalObjectKeys = _dereq_('../internals/object-keys-internal');\n      var enumBugKeys = _dereq_('../internals/enum-bug-keys');\n      var hiddenKeys = enumBugKeys.concat('length', 'prototype');\n      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n        return internalObjectKeys(O, hiddenKeys);\n      };\n    }, {\n      '../internals/enum-bug-keys': 62,\n      '../internals/object-keys-internal': 94\n    } ],\n    92: [ function(_dereq_, module, exports) {\n      exports.f = Object.getOwnPropertySymbols;\n    }, {} ],\n    93: [ function(_dereq_, module, exports) {\n      var has = _dereq_('../internals/has');\n      var toObject = _dereq_('../internals/to-object');\n      var sharedKey = _dereq_('../internals/shared-key');\n      var CORRECT_PROTOTYPE_GETTER = _dereq_('../internals/correct-prototype-getter');\n      var IE_PROTO = sharedKey('IE_PROTO');\n      var ObjectPrototype = Object.prototype;\n      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {\n        O = toObject(O);\n        if (has(O, IE_PROTO)) {\n          return O[IE_PROTO];\n        }\n        if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n          return O.constructor.prototype;\n        }\n        return O instanceof Object ? ObjectPrototype : null;\n      };\n    }, {\n      '../internals/correct-prototype-getter': 55,\n      '../internals/has': 69,\n      '../internals/shared-key': 107,\n      '../internals/to-object': 116\n    } ],\n    94: [ function(_dereq_, module, exports) {\n      var has = _dereq_('../internals/has');\n      var toIndexedObject = _dereq_('../internals/to-indexed-object');\n      var indexOf = _dereq_('../internals/array-includes').indexOf;\n      var hiddenKeys = _dereq_('../internals/hidden-keys');\n      module.exports = function(object, names) {\n        var O = toIndexedObject(object);\n        var i = 0;\n        var result = [];\n        var key;\n        for (key in O) {\n          !has(hiddenKeys, key) && has(O, key) && result.push(key);\n        }\n        while (names.length > i) {\n          if (has(O, key = names[i++])) {\n            ~indexOf(result, key) || result.push(key);\n          }\n        }\n        return result;\n      };\n    }, {\n      '../internals/array-includes': 44,\n      '../internals/has': 69,\n      '../internals/hidden-keys': 70,\n      '../internals/to-indexed-object': 113\n    } ],\n    95: [ function(_dereq_, module, exports) {\n      var internalObjectKeys = _dereq_('../internals/object-keys-internal');\n      var enumBugKeys = _dereq_('../internals/enum-bug-keys');\n      module.exports = Object.keys || function keys(O) {\n        return internalObjectKeys(O, enumBugKeys);\n      };\n    }, {\n      '../internals/enum-bug-keys': 62,\n      '../internals/object-keys-internal': 94\n    } ],\n    96: [ function(_dereq_, module, exports) {\n      'use strict';\n      var nativePropertyIsEnumerable = {}.propertyIsEnumerable;\n      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n      var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({\n        1: 2\n      }, 1);\n      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n        var descriptor = getOwnPropertyDescriptor(this, V);\n        return !!descriptor && descriptor.enumerable;\n      } : nativePropertyIsEnumerable;\n    }, {} ],\n    97: [ function(_dereq_, module, exports) {\n      var anObject = _dereq_('../internals/an-object');\n      var aPossiblePrototype = _dereq_('../internals/a-possible-prototype');\n      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function() {\n        var CORRECT_SETTER = false;\n        var test = {};\n        var setter;\n        try {\n          setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;\n          setter.call(test, []);\n          CORRECT_SETTER = test instanceof Array;\n        } catch (error) {}\n        return function setPrototypeOf(O, proto) {\n          anObject(O);\n          aPossiblePrototype(proto);\n          if (CORRECT_SETTER) {\n            setter.call(O, proto);\n          } else {\n            O.__proto__ = proto;\n          }\n          return O;\n        };\n      }() : undefined);\n    }, {\n      '../internals/a-possible-prototype': 35,\n      '../internals/an-object': 38\n    } ],\n    98: [ function(_dereq_, module, exports) {\n      'use strict';\n      var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');\n      var classof = _dereq_('../internals/classof');\n      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {\n        return '[object ' + classof(this) + ']';\n      };\n    }, {\n      '../internals/classof': 53,\n      '../internals/to-string-tag-support': 120\n    } ],\n    99: [ function(_dereq_, module, exports) {\n      var getBuiltIn = _dereq_('../internals/get-built-in');\n      var getOwnPropertyNamesModule = _dereq_('../internals/object-get-own-property-names');\n      var getOwnPropertySymbolsModule = _dereq_('../internals/object-get-own-property-symbols');\n      var anObject = _dereq_('../internals/an-object');\n      module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {\n        var keys = getOwnPropertyNamesModule.f(anObject(it));\n        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n      };\n    }, {\n      '../internals/an-object': 38,\n      '../internals/get-built-in': 66,\n      '../internals/object-get-own-property-names': 91,\n      '../internals/object-get-own-property-symbols': 92\n    } ],\n    100: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      module.exports = global;\n    }, {\n      '../internals/global': 68\n    } ],\n    101: [ function(_dereq_, module, exports) {\n      var redefine = _dereq_('../internals/redefine');\n      module.exports = function(target, src, options) {\n        for (var key in src) {\n          redefine(target, key, src[key], options);\n        }\n        return target;\n      };\n    }, {\n      '../internals/redefine': 102\n    } ],\n    102: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var has = _dereq_('../internals/has');\n      var setGlobal = _dereq_('../internals/set-global');\n      var inspectSource = _dereq_('../internals/inspect-source');\n      var InternalStateModule = _dereq_('../internals/internal-state');\n      var getInternalState = InternalStateModule.get;\n      var enforceInternalState = InternalStateModule.enforce;\n      var TEMPLATE = String(String).split('String');\n      (module.exports = function(O, key, value, options) {\n        var unsafe = options ? !!options.unsafe : false;\n        var simple = options ? !!options.enumerable : false;\n        var noTargetGet = options ? !!options.noTargetGet : false;\n        if (typeof value == 'function') {\n          if (typeof key == 'string' && !has(value, 'name')) {\n            createNonEnumerableProperty(value, 'name', key);\n          }\n          enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');\n        }\n        if (O === global) {\n          if (simple) {\n            O[key] = value;\n          } else {\n            setGlobal(key, value);\n          }\n          return;\n        } else if (!unsafe) {\n          delete O[key];\n        } else if (!noTargetGet && O[key]) {\n          simple = true;\n        }\n        if (simple) {\n          O[key] = value;\n        } else {\n          createNonEnumerableProperty(O, key, value);\n        }\n      })(Function.prototype, 'toString', function toString() {\n        return typeof this == 'function' && getInternalState(this).source || inspectSource(this);\n      });\n    }, {\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/global': 68,\n      '../internals/has': 69,\n      '../internals/inspect-source': 76,\n      '../internals/internal-state': 77,\n      '../internals/set-global': 104\n    } ],\n    103: [ function(_dereq_, module, exports) {\n      module.exports = function(it) {\n        if (it == undefined) {\n          throw TypeError('Can\\'t call method on ' + it);\n        }\n        return it;\n      };\n    }, {} ],\n    104: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      module.exports = function(key, value) {\n        try {\n          createNonEnumerableProperty(global, key, value);\n        } catch (error) {\n          global[key] = value;\n        }\n        return value;\n      };\n    }, {\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/global': 68\n    } ],\n    105: [ function(_dereq_, module, exports) {\n      'use strict';\n      var getBuiltIn = _dereq_('../internals/get-built-in');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var SPECIES = wellKnownSymbol('species');\n      module.exports = function(CONSTRUCTOR_NAME) {\n        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);\n        var defineProperty = definePropertyModule.f;\n        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {\n          defineProperty(Constructor, SPECIES, {\n            configurable: true,\n            get: function() {\n              return this;\n            }\n          });\n        }\n      };\n    }, {\n      '../internals/descriptors': 60,\n      '../internals/get-built-in': 66,\n      '../internals/object-define-property': 89,\n      '../internals/well-known-symbol': 126\n    } ],\n    106: [ function(_dereq_, module, exports) {\n      var defineProperty = _dereq_('../internals/object-define-property').f;\n      var has = _dereq_('../internals/has');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      module.exports = function(it, TAG, STATIC) {\n        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n          defineProperty(it, TO_STRING_TAG, {\n            configurable: true,\n            value: TAG\n          });\n        }\n      };\n    }, {\n      '../internals/has': 69,\n      '../internals/object-define-property': 89,\n      '../internals/well-known-symbol': 126\n    } ],\n    107: [ function(_dereq_, module, exports) {\n      var shared = _dereq_('../internals/shared');\n      var uid = _dereq_('../internals/uid');\n      var keys = shared('keys');\n      module.exports = function(key) {\n        return keys[key] || (keys[key] = uid(key));\n      };\n    }, {\n      '../internals/shared': 109,\n      '../internals/uid': 124\n    } ],\n    108: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var setGlobal = _dereq_('../internals/set-global');\n      var SHARED = '__core-js_shared__';\n      var store = global[SHARED] || setGlobal(SHARED, {});\n      module.exports = store;\n    }, {\n      '../internals/global': 68,\n      '../internals/set-global': 104\n    } ],\n    109: [ function(_dereq_, module, exports) {\n      var IS_PURE = _dereq_('../internals/is-pure');\n      var store = _dereq_('../internals/shared-store');\n      (module.exports = function(key, value) {\n        return store[key] || (store[key] = value !== undefined ? value : {});\n      })('versions', []).push({\n        version: '3.6.4',\n        mode: IS_PURE ? 'pure' : 'global',\n        copyright: '\\xa9 2020 Denis Pushkarev (zloirock.ru)'\n      });\n    }, {\n      '../internals/is-pure': 82,\n      '../internals/shared-store': 108\n    } ],\n    110: [ function(_dereq_, module, exports) {\n      var anObject = _dereq_('../internals/an-object');\n      var aFunction = _dereq_('../internals/a-function');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var SPECIES = wellKnownSymbol('species');\n      module.exports = function(O, defaultConstructor) {\n        var C = anObject(O).constructor;\n        var S;\n        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);\n      };\n    }, {\n      '../internals/a-function': 34,\n      '../internals/an-object': 38,\n      '../internals/well-known-symbol': 126\n    } ],\n    111: [ function(_dereq_, module, exports) {\n      var toInteger = _dereq_('../internals/to-integer');\n      var max = Math.max;\n      var min = Math.min;\n      module.exports = function(index, length) {\n        var integer = toInteger(index);\n        return integer < 0 ? max(integer + length, 0) : min(integer, length);\n      };\n    }, {\n      '../internals/to-integer': 114\n    } ],\n    112: [ function(_dereq_, module, exports) {\n      var toInteger = _dereq_('../internals/to-integer');\n      var toLength = _dereq_('../internals/to-length');\n      module.exports = function(it) {\n        if (it === undefined) {\n          return 0;\n        }\n        var number = toInteger(it);\n        var length = toLength(number);\n        if (number !== length) {\n          throw RangeError('Wrong length or index');\n        }\n        return length;\n      };\n    }, {\n      '../internals/to-integer': 114,\n      '../internals/to-length': 115\n    } ],\n    113: [ function(_dereq_, module, exports) {\n      var IndexedObject = _dereq_('../internals/indexed-object');\n      var requireObjectCoercible = _dereq_('../internals/require-object-coercible');\n      module.exports = function(it) {\n        return IndexedObject(requireObjectCoercible(it));\n      };\n    }, {\n      '../internals/indexed-object': 74,\n      '../internals/require-object-coercible': 103\n    } ],\n    114: [ function(_dereq_, module, exports) {\n      var ceil = Math.ceil;\n      var floor = Math.floor;\n      module.exports = function(argument) {\n        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n      };\n    }, {} ],\n    115: [ function(_dereq_, module, exports) {\n      var toInteger = _dereq_('../internals/to-integer');\n      var min = Math.min;\n      module.exports = function(argument) {\n        return argument > 0 ? min(toInteger(argument), 9007199254740991) : 0;\n      };\n    }, {\n      '../internals/to-integer': 114\n    } ],\n    116: [ function(_dereq_, module, exports) {\n      var requireObjectCoercible = _dereq_('../internals/require-object-coercible');\n      module.exports = function(argument) {\n        return Object(requireObjectCoercible(argument));\n      };\n    }, {\n      '../internals/require-object-coercible': 103\n    } ],\n    117: [ function(_dereq_, module, exports) {\n      var toPositiveInteger = _dereq_('../internals/to-positive-integer');\n      module.exports = function(it, BYTES) {\n        var offset = toPositiveInteger(it);\n        if (offset % BYTES) {\n          throw RangeError('Wrong offset');\n        }\n        return offset;\n      };\n    }, {\n      '../internals/to-positive-integer': 118\n    } ],\n    118: [ function(_dereq_, module, exports) {\n      var toInteger = _dereq_('../internals/to-integer');\n      module.exports = function(it) {\n        var result = toInteger(it);\n        if (result < 0) {\n          throw RangeError('The argument can\\'t be less than 0');\n        }\n        return result;\n      };\n    }, {\n      '../internals/to-integer': 114\n    } ],\n    119: [ function(_dereq_, module, exports) {\n      var isObject = _dereq_('../internals/is-object');\n      module.exports = function(input, PREFERRED_STRING) {\n        if (!isObject(input)) {\n          return input;\n        }\n        var fn, val;\n        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) {\n          return val;\n        }\n        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) {\n          return val;\n        }\n        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) {\n          return val;\n        }\n        throw TypeError('Can\\'t convert object to primitive value');\n      };\n    }, {\n      '../internals/is-object': 81\n    } ],\n    120: [ function(_dereq_, module, exports) {\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var TO_STRING_TAG = wellKnownSymbol('toStringTag');\n      var test = {};\n      test[TO_STRING_TAG] = 'z';\n      module.exports = String(test) === '[object z]';\n    }, {\n      '../internals/well-known-symbol': 126\n    } ],\n    121: [ function(_dereq_, module, exports) {\n      'use strict';\n      var $ = _dereq_('../internals/export');\n      var global = _dereq_('../internals/global');\n      var DESCRIPTORS = _dereq_('../internals/descriptors');\n      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = _dereq_('../internals/typed-array-constructors-require-wrappers');\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var ArrayBufferModule = _dereq_('../internals/array-buffer');\n      var anInstance = _dereq_('../internals/an-instance');\n      var createPropertyDescriptor = _dereq_('../internals/create-property-descriptor');\n      var createNonEnumerableProperty = _dereq_('../internals/create-non-enumerable-property');\n      var toLength = _dereq_('../internals/to-length');\n      var toIndex = _dereq_('../internals/to-index');\n      var toOffset = _dereq_('../internals/to-offset');\n      var toPrimitive = _dereq_('../internals/to-primitive');\n      var has = _dereq_('../internals/has');\n      var classof = _dereq_('../internals/classof');\n      var isObject = _dereq_('../internals/is-object');\n      var create = _dereq_('../internals/object-create');\n      var setPrototypeOf = _dereq_('../internals/object-set-prototype-of');\n      var getOwnPropertyNames = _dereq_('../internals/object-get-own-property-names').f;\n      var typedArrayFrom = _dereq_('../internals/typed-array-from');\n      var forEach = _dereq_('../internals/array-iteration').forEach;\n      var setSpecies = _dereq_('../internals/set-species');\n      var definePropertyModule = _dereq_('../internals/object-define-property');\n      var getOwnPropertyDescriptorModule = _dereq_('../internals/object-get-own-property-descriptor');\n      var InternalStateModule = _dereq_('../internals/internal-state');\n      var inheritIfRequired = _dereq_('../internals/inherit-if-required');\n      var getInternalState = InternalStateModule.get;\n      var setInternalState = InternalStateModule.set;\n      var nativeDefineProperty = definePropertyModule.f;\n      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n      var round = Math.round;\n      var RangeError = global.RangeError;\n      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;\n      var DataView = ArrayBufferModule.DataView;\n      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;\n      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;\n      var TypedArray = ArrayBufferViewCore.TypedArray;\n      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;\n      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n      var isTypedArray = ArrayBufferViewCore.isTypedArray;\n      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n      var WRONG_LENGTH = 'Wrong length';\n      var fromList = function(C, list) {\n        var index = 0;\n        var length = list.length;\n        var result = new (aTypedArrayConstructor(C))(length);\n        while (length > index) {\n          result[index] = list[index++];\n        }\n        return result;\n      };\n      var addGetter = function(it, key) {\n        nativeDefineProperty(it, key, {\n          get: function() {\n            return getInternalState(this)[key];\n          }\n        });\n      };\n      var isArrayBuffer = function(it) {\n        var klass;\n        return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';\n      };\n      var isTypedArrayIndex = function(target, key) {\n        return isTypedArray(target) && typeof key != 'symbol' && key in target && String(+key) == String(key);\n      };\n      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {\n        return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);\n      };\n      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {\n        if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {\n          target[key] = descriptor.value;\n          return target;\n        }\n        return nativeDefineProperty(target, key, descriptor);\n      };\n      if (DESCRIPTORS) {\n        if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;\n          definePropertyModule.f = wrappedDefineProperty;\n          addGetter(TypedArrayPrototype, 'buffer');\n          addGetter(TypedArrayPrototype, 'byteOffset');\n          addGetter(TypedArrayPrototype, 'byteLength');\n          addGetter(TypedArrayPrototype, 'length');\n        }\n        $({\n          target: 'Object',\n          stat: true,\n          forced: !NATIVE_ARRAY_BUFFER_VIEWS\n        }, {\n          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,\n          defineProperty: wrappedDefineProperty\n        });\n        module.exports = function(TYPE, wrapper, CLAMPED) {\n          var BYTES = TYPE.match(/\\d+$/)[0] / 8;\n          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';\n          var GETTER = 'get' + TYPE;\n          var SETTER = 'set' + TYPE;\n          var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];\n          var TypedArrayConstructor = NativeTypedArrayConstructor;\n          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;\n          var exported = {};\n          var getter = function(that, index) {\n            var data = getInternalState(that);\n            return data.view[GETTER](index * BYTES + data.byteOffset, true);\n          };\n          var setter = function(that, index, value) {\n            var data = getInternalState(that);\n            if (CLAMPED) {\n              value = (value = round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;\n            }\n            data.view[SETTER](index * BYTES + data.byteOffset, value, true);\n          };\n          var addElement = function(that, index) {\n            nativeDefineProperty(that, index, {\n              get: function() {\n                return getter(this, index);\n              },\n              set: function(value) {\n                return setter(this, index, value);\n              },\n              enumerable: true\n            });\n          };\n          if (!NATIVE_ARRAY_BUFFER_VIEWS) {\n            TypedArrayConstructor = wrapper(function(that, data, offset, $length) {\n              anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);\n              var index = 0;\n              var byteOffset = 0;\n              var buffer, byteLength, length;\n              if (!isObject(data)) {\n                length = toIndex(data);\n                byteLength = length * BYTES;\n                buffer = new ArrayBuffer(byteLength);\n              } else if (isArrayBuffer(data)) {\n                buffer = data;\n                byteOffset = toOffset(offset, BYTES);\n                var $len = data.byteLength;\n                if ($length === undefined) {\n                  if ($len % BYTES) {\n                    throw RangeError(WRONG_LENGTH);\n                  }\n                  byteLength = $len - byteOffset;\n                  if (byteLength < 0) {\n                    throw RangeError(WRONG_LENGTH);\n                  }\n                } else {\n                  byteLength = toLength($length) * BYTES;\n                  if (byteLength + byteOffset > $len) {\n                    throw RangeError(WRONG_LENGTH);\n                  }\n                }\n                length = byteLength / BYTES;\n              } else if (isTypedArray(data)) {\n                return fromList(TypedArrayConstructor, data);\n              } else {\n                return typedArrayFrom.call(TypedArrayConstructor, data);\n              }\n              setInternalState(that, {\n                buffer: buffer,\n                byteOffset: byteOffset,\n                byteLength: byteLength,\n                length: length,\n                view: new DataView(buffer)\n              });\n              while (index < length) {\n                addElement(that, index++);\n              }\n            });\n            if (setPrototypeOf) {\n              setPrototypeOf(TypedArrayConstructor, TypedArray);\n            }\n            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);\n          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {\n            TypedArrayConstructor = wrapper(function(dummy, data, typedArrayOffset, $length) {\n              anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);\n              return inheritIfRequired(function() {\n                if (!isObject(data)) {\n                  return new NativeTypedArrayConstructor(toIndex(data));\n                }\n                if (isArrayBuffer(data)) {\n                  return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);\n                }\n                if (isTypedArray(data)) {\n                  return fromList(TypedArrayConstructor, data);\n                }\n                return typedArrayFrom.call(TypedArrayConstructor, data);\n              }(), dummy, TypedArrayConstructor);\n            });\n            if (setPrototypeOf) {\n              setPrototypeOf(TypedArrayConstructor, TypedArray);\n            }\n            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function(key) {\n              if (!(key in TypedArrayConstructor)) {\n                createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);\n              }\n            });\n            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;\n          }\n          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {\n            createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);\n          }\n          if (TYPED_ARRAY_TAG) {\n            createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);\n          }\n          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;\n          $({\n            global: true,\n            forced: TypedArrayConstructor != NativeTypedArrayConstructor,\n            sham: !NATIVE_ARRAY_BUFFER_VIEWS\n          }, exported);\n          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {\n            createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);\n          }\n          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {\n            createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);\n          }\n          setSpecies(CONSTRUCTOR_NAME);\n        };\n      } else {\n        module.exports = function() {};\n      }\n    }, {\n      '../internals/an-instance': 37,\n      '../internals/array-buffer': 41,\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45,\n      '../internals/classof': 53,\n      '../internals/create-non-enumerable-property': 57,\n      '../internals/create-property-descriptor': 58,\n      '../internals/descriptors': 60,\n      '../internals/export': 63,\n      '../internals/global': 68,\n      '../internals/has': 69,\n      '../internals/inherit-if-required': 75,\n      '../internals/internal-state': 77,\n      '../internals/is-object': 81,\n      '../internals/object-create': 87,\n      '../internals/object-define-property': 89,\n      '../internals/object-get-own-property-descriptor': 90,\n      '../internals/object-get-own-property-names': 91,\n      '../internals/object-set-prototype-of': 97,\n      '../internals/set-species': 105,\n      '../internals/to-index': 112,\n      '../internals/to-length': 115,\n      '../internals/to-offset': 117,\n      '../internals/to-primitive': 119,\n      '../internals/typed-array-constructors-require-wrappers': 122,\n      '../internals/typed-array-from': 123\n    } ],\n    122: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var fails = _dereq_('../internals/fails');\n      var checkCorrectnessOfIteration = _dereq_('../internals/check-correctness-of-iteration');\n      var NATIVE_ARRAY_BUFFER_VIEWS = _dereq_('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;\n      var ArrayBuffer = global.ArrayBuffer;\n      var Int8Array = global.Int8Array;\n      module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function() {\n        Int8Array(1);\n      }) || !fails(function() {\n        new Int8Array(-1);\n      }) || !checkCorrectnessOfIteration(function(iterable) {\n        new Int8Array();\n        new Int8Array(null);\n        new Int8Array(1.5);\n        new Int8Array(iterable);\n      }, true) || fails(function() {\n        return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/check-correctness-of-iteration': 51,\n      '../internals/fails': 64,\n      '../internals/global': 68\n    } ],\n    123: [ function(_dereq_, module, exports) {\n      var toObject = _dereq_('../internals/to-object');\n      var toLength = _dereq_('../internals/to-length');\n      var getIteratorMethod = _dereq_('../internals/get-iterator-method');\n      var isArrayIteratorMethod = _dereq_('../internals/is-array-iterator-method');\n      var bind = _dereq_('../internals/function-bind-context');\n      var aTypedArrayConstructor = _dereq_('../internals/array-buffer-view-core').aTypedArrayConstructor;\n      module.exports = function from(source) {\n        var O = toObject(source);\n        var argumentsLength = arguments.length;\n        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n        var mapping = mapfn !== undefined;\n        var iteratorMethod = getIteratorMethod(O);\n        var i, length, result, step, iterator, next;\n        if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {\n          iterator = iteratorMethod.call(O);\n          next = iterator.next;\n          O = [];\n          while (!(step = next.call(iterator)).done) {\n            O.push(step.value);\n          }\n        }\n        if (mapping && argumentsLength > 2) {\n          mapfn = bind(mapfn, arguments[2], 2);\n        }\n        length = toLength(O.length);\n        result = new (aTypedArrayConstructor(this))(length);\n        for (i = 0; length > i; i++) {\n          result[i] = mapping ? mapfn(O[i], i) : O[i];\n        }\n        return result;\n      };\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/function-bind-context': 65,\n      '../internals/get-iterator-method': 67,\n      '../internals/is-array-iterator-method': 78,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116\n    } ],\n    124: [ function(_dereq_, module, exports) {\n      var id = 0;\n      var postfix = Math.random();\n      module.exports = function(key) {\n        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);\n      };\n    }, {} ],\n    125: [ function(_dereq_, module, exports) {\n      var NATIVE_SYMBOL = _dereq_('../internals/native-symbol');\n      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';\n    }, {\n      '../internals/native-symbol': 85\n    } ],\n    126: [ function(_dereq_, module, exports) {\n      var global = _dereq_('../internals/global');\n      var shared = _dereq_('../internals/shared');\n      var has = _dereq_('../internals/has');\n      var uid = _dereq_('../internals/uid');\n      var NATIVE_SYMBOL = _dereq_('../internals/native-symbol');\n      var USE_SYMBOL_AS_UID = _dereq_('../internals/use-symbol-as-uid');\n      var WellKnownSymbolsStore = shared('wks');\n      var Symbol = global.Symbol;\n      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;\n      module.exports = function(name) {\n        if (!has(WellKnownSymbolsStore, name)) {\n          if (NATIVE_SYMBOL && has(Symbol, name)) {\n            WellKnownSymbolsStore[name] = Symbol[name];\n          } else {\n            WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);\n          }\n        }\n        return WellKnownSymbolsStore[name];\n      };\n    }, {\n      '../internals/global': 68,\n      '../internals/has': 69,\n      '../internals/native-symbol': 85,\n      '../internals/shared': 109,\n      '../internals/uid': 124,\n      '../internals/use-symbol-as-uid': 125\n    } ],\n    127: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toIndexedObject = _dereq_('../internals/to-indexed-object');\n      var addToUnscopables = _dereq_('../internals/add-to-unscopables');\n      var Iterators = _dereq_('../internals/iterators');\n      var InternalStateModule = _dereq_('../internals/internal-state');\n      var defineIterator = _dereq_('../internals/define-iterator');\n      var ARRAY_ITERATOR = 'Array Iterator';\n      var setInternalState = InternalStateModule.set;\n      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n      module.exports = defineIterator(Array, 'Array', function(iterated, kind) {\n        setInternalState(this, {\n          type: ARRAY_ITERATOR,\n          target: toIndexedObject(iterated),\n          index: 0,\n          kind: kind\n        });\n      }, function() {\n        var state = getInternalState(this);\n        var target = state.target;\n        var kind = state.kind;\n        var index = state.index++;\n        if (!target || index >= target.length) {\n          state.target = undefined;\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n        if (kind == 'keys') {\n          return {\n            value: index,\n            done: false\n          };\n        }\n        if (kind == 'values') {\n          return {\n            value: target[index],\n            done: false\n          };\n        }\n        return {\n          value: [ index, target[index] ],\n          done: false\n        };\n      }, 'values');\n      Iterators.Arguments = Iterators.Array;\n      addToUnscopables('keys');\n      addToUnscopables('values');\n      addToUnscopables('entries');\n    }, {\n      '../internals/add-to-unscopables': 36,\n      '../internals/define-iterator': 59,\n      '../internals/internal-state': 77,\n      '../internals/iterators': 84,\n      '../internals/to-indexed-object': 113\n    } ],\n    128: [ function(_dereq_, module, exports) {\n      var TO_STRING_TAG_SUPPORT = _dereq_('../internals/to-string-tag-support');\n      var redefine = _dereq_('../internals/redefine');\n      var toString = _dereq_('../internals/object-to-string');\n      if (!TO_STRING_TAG_SUPPORT) {\n        redefine(Object.prototype, 'toString', toString, {\n          unsafe: true\n        });\n      }\n    }, {\n      '../internals/object-to-string': 98,\n      '../internals/redefine': 102,\n      '../internals/to-string-tag-support': 120\n    } ],\n    129: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $copyWithin = _dereq_('../internals/array-copy-within');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('copyWithin', function copyWithin(target, start) {\n        return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-copy-within': 42\n    } ],\n    130: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $every = _dereq_('../internals/array-iteration').every;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('every', function every(callbackfn) {\n        return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45\n    } ],\n    131: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $fill = _dereq_('../internals/array-fill');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('fill', function fill(value) {\n        return $fill.apply(aTypedArray(this), arguments);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-fill': 43\n    } ],\n    132: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $filter = _dereq_('../internals/array-iteration').filter;\n      var speciesConstructor = _dereq_('../internals/species-constructor');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('filter', function filter(callbackfn) {\n        var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n        var C = speciesConstructor(this, this.constructor);\n        var index = 0;\n        var length = list.length;\n        var result = new (aTypedArrayConstructor(C))(length);\n        while (length > index) {\n          result[index] = list[index++];\n        }\n        return result;\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45,\n      '../internals/species-constructor': 110\n    } ],\n    133: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $findIndex = _dereq_('../internals/array-iteration').findIndex;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('findIndex', function findIndex(predicate) {\n        return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45\n    } ],\n    134: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $find = _dereq_('../internals/array-iteration').find;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('find', function find(predicate) {\n        return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45\n    } ],\n    135: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $forEach = _dereq_('../internals/array-iteration').forEach;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('forEach', function forEach(callbackfn) {\n        $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45\n    } ],\n    136: [ function(_dereq_, module, exports) {\n      'use strict';\n      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = _dereq_('../internals/typed-array-constructors-require-wrappers');\n      var exportTypedArrayStaticMethod = _dereq_('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;\n      var typedArrayFrom = _dereq_('../internals/typed-array-from');\n      exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/typed-array-constructors-require-wrappers': 122,\n      '../internals/typed-array-from': 123\n    } ],\n    137: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $includes = _dereq_('../internals/array-includes').includes;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('includes', function includes(searchElement) {\n        return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-includes': 44\n    } ],\n    138: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $indexOf = _dereq_('../internals/array-includes').indexOf;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('indexOf', function indexOf(searchElement) {\n        return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-includes': 44\n    } ],\n    139: [ function(_dereq_, module, exports) {\n      'use strict';\n      var global = _dereq_('../internals/global');\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var ArrayIterators = _dereq_('../modules/es.array.iterator');\n      var wellKnownSymbol = _dereq_('../internals/well-known-symbol');\n      var ITERATOR = wellKnownSymbol('iterator');\n      var Uint8Array = global.Uint8Array;\n      var arrayValues = ArrayIterators.values;\n      var arrayKeys = ArrayIterators.keys;\n      var arrayEntries = ArrayIterators.entries;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];\n      var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);\n      var typedArrayValues = function values() {\n        return arrayValues.call(aTypedArray(this));\n      };\n      exportTypedArrayMethod('entries', function entries() {\n        return arrayEntries.call(aTypedArray(this));\n      });\n      exportTypedArrayMethod('keys', function keys() {\n        return arrayKeys.call(aTypedArray(this));\n      });\n      exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME);\n      exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/global': 68,\n      '../internals/well-known-symbol': 126,\n      '../modules/es.array.iterator': 127\n    } ],\n    140: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var $join = [].join;\n      exportTypedArrayMethod('join', function join(separator) {\n        return $join.apply(aTypedArray(this), arguments);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40\n    } ],\n    141: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $lastIndexOf = _dereq_('../internals/array-last-index-of');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement) {\n        return $lastIndexOf.apply(aTypedArray(this), arguments);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-last-index-of': 46\n    } ],\n    142: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $map = _dereq_('../internals/array-iteration').map;\n      var speciesConstructor = _dereq_('../internals/species-constructor');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('map', function map(mapfn) {\n        return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function(O, length) {\n          return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);\n        });\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45,\n      '../internals/species-constructor': 110\n    } ],\n    143: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = _dereq_('../internals/typed-array-constructors-require-wrappers');\n      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n      var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod;\n      exportTypedArrayStaticMethod('of', function of() {\n        var index = 0;\n        var length = arguments.length;\n        var result = new (aTypedArrayConstructor(this))(length);\n        while (length > index) {\n          result[index] = arguments[index++];\n        }\n        return result;\n      }, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/typed-array-constructors-require-wrappers': 122\n    } ],\n    144: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $reduceRight = _dereq_('../internals/array-reduce').right;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn) {\n        return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-reduce': 49\n    } ],\n    145: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $reduce = _dereq_('../internals/array-reduce').left;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('reduce', function reduce(callbackfn) {\n        return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-reduce': 49\n    } ],\n    146: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var floor = Math.floor;\n      exportTypedArrayMethod('reverse', function reverse() {\n        var that = this;\n        var length = aTypedArray(that).length;\n        var middle = floor(length / 2);\n        var index = 0;\n        var value;\n        while (index < middle) {\n          value = that[index];\n          that[index++] = that[--length];\n          that[length] = value;\n        }\n        return that;\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40\n    } ],\n    147: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var toLength = _dereq_('../internals/to-length');\n      var toOffset = _dereq_('../internals/to-offset');\n      var toObject = _dereq_('../internals/to-object');\n      var fails = _dereq_('../internals/fails');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var FORCED = fails(function() {\n        new Int8Array(1).set({});\n      });\n      exportTypedArrayMethod('set', function set(arrayLike) {\n        aTypedArray(this);\n        var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);\n        var length = this.length;\n        var src = toObject(arrayLike);\n        var len = toLength(src.length);\n        var index = 0;\n        if (len + offset > length) {\n          throw RangeError('Wrong length');\n        }\n        while (index < len) {\n          this[offset + index] = src[index++];\n        }\n      }, FORCED);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/fails': 64,\n      '../internals/to-length': 115,\n      '../internals/to-object': 116,\n      '../internals/to-offset': 117\n    } ],\n    148: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var speciesConstructor = _dereq_('../internals/species-constructor');\n      var fails = _dereq_('../internals/fails');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var $slice = [].slice;\n      var FORCED = fails(function() {\n        new Int8Array(1).slice();\n      });\n      exportTypedArrayMethod('slice', function slice(start, end) {\n        var list = $slice.call(aTypedArray(this), start, end);\n        var C = speciesConstructor(this, this.constructor);\n        var index = 0;\n        var length = list.length;\n        var result = new (aTypedArrayConstructor(C))(length);\n        while (length > index) {\n          result[index] = list[index++];\n        }\n        return result;\n      }, FORCED);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/fails': 64,\n      '../internals/species-constructor': 110\n    } ],\n    149: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var $some = _dereq_('../internals/array-iteration').some;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('some', function some(callbackfn) {\n        return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/array-iteration': 45\n    } ],\n    150: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var $sort = [].sort;\n      exportTypedArrayMethod('sort', function sort(comparefn) {\n        return $sort.call(aTypedArray(this), comparefn);\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40\n    } ],\n    151: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var toLength = _dereq_('../internals/to-length');\n      var toAbsoluteIndex = _dereq_('../internals/to-absolute-index');\n      var speciesConstructor = _dereq_('../internals/species-constructor');\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      exportTypedArrayMethod('subarray', function subarray(begin, end) {\n        var O = aTypedArray(this);\n        var length = O.length;\n        var beginIndex = toAbsoluteIndex(begin, length);\n        return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));\n      });\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/species-constructor': 110,\n      '../internals/to-absolute-index': 111,\n      '../internals/to-length': 115\n    } ],\n    152: [ function(_dereq_, module, exports) {\n      'use strict';\n      var global = _dereq_('../internals/global');\n      var ArrayBufferViewCore = _dereq_('../internals/array-buffer-view-core');\n      var fails = _dereq_('../internals/fails');\n      var Int8Array = global.Int8Array;\n      var aTypedArray = ArrayBufferViewCore.aTypedArray;\n      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\n      var $toLocaleString = [].toLocaleString;\n      var $slice = [].slice;\n      var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function() {\n        $toLocaleString.call(new Int8Array(1));\n      });\n      var FORCED = fails(function() {\n        return [ 1, 2 ].toLocaleString() != new Int8Array([ 1, 2 ]).toLocaleString();\n      }) || !fails(function() {\n        Int8Array.prototype.toLocaleString.call([ 1, 2 ]);\n      });\n      exportTypedArrayMethod('toLocaleString', function toLocaleString() {\n        return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);\n      }, FORCED);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/fails': 64,\n      '../internals/global': 68\n    } ],\n    153: [ function(_dereq_, module, exports) {\n      'use strict';\n      var exportTypedArrayMethod = _dereq_('../internals/array-buffer-view-core').exportTypedArrayMethod;\n      var fails = _dereq_('../internals/fails');\n      var global = _dereq_('../internals/global');\n      var Uint8Array = global.Uint8Array;\n      var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};\n      var arrayToString = [].toString;\n      var arrayJoin = [].join;\n      if (fails(function() {\n        arrayToString.call({});\n      })) {\n        arrayToString = function toString() {\n          return arrayJoin.call(this);\n        };\n      }\n      var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString;\n      exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);\n    }, {\n      '../internals/array-buffer-view-core': 40,\n      '../internals/fails': 64,\n      '../internals/global': 68\n    } ],\n    154: [ function(_dereq_, module, exports) {\n      var createTypedArrayConstructor = _dereq_('../internals/typed-array-constructor');\n      createTypedArrayConstructor('Uint32', function(init) {\n        return function Uint32Array(data, byteOffset, length) {\n          return init(this, data, byteOffset, length);\n        };\n      });\n    }, {\n      '../internals/typed-array-constructor': 121\n    } ],\n    155: [ function(_dereq_, module, exports) {\n      module.exports = {\n        CssSelectorParser: _dereq_('./lib/css-selector-parser.js').CssSelectorParser\n      };\n    }, {\n      './lib/css-selector-parser.js': 156\n    } ],\n    156: [ function(_dereq_, module, exports) {\n      function CssSelectorParser() {\n        this.pseudos = {};\n        this.attrEqualityMods = {};\n        this.ruleNestingOperators = {};\n        this.substitutesEnabled = false;\n      }\n      CssSelectorParser.prototype.registerSelectorPseudos = function(name) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          name = arguments[j];\n          this.pseudos[name] = 'selector';\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.unregisterSelectorPseudos = function(name) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          name = arguments[j];\n          delete this.pseudos[name];\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.registerNumericPseudos = function(name) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          name = arguments[j];\n          this.pseudos[name] = 'numeric';\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.unregisterNumericPseudos = function(name) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          name = arguments[j];\n          delete this.pseudos[name];\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.registerNestingOperators = function(operator) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          operator = arguments[j];\n          this.ruleNestingOperators[operator] = true;\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.unregisterNestingOperators = function(operator) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          operator = arguments[j];\n          delete this.ruleNestingOperators[operator];\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.registerAttrEqualityMods = function(mod) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          mod = arguments[j];\n          this.attrEqualityMods[mod] = true;\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.unregisterAttrEqualityMods = function(mod) {\n        for (var j = 0, len = arguments.length; j < len; j++) {\n          mod = arguments[j];\n          delete this.attrEqualityMods[mod];\n        }\n        return this;\n      };\n      CssSelectorParser.prototype.enableSubstitutes = function() {\n        this.substitutesEnabled = true;\n        return this;\n      };\n      CssSelectorParser.prototype.disableSubstitutes = function() {\n        this.substitutesEnabled = false;\n        return this;\n      };\n      function isIdentStart(c) {\n        return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c === '-' || c === '_';\n      }\n      function isIdent(c) {\n        return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c === '-' || c === '_';\n      }\n      function isHex(c) {\n        return c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F' || c >= '0' && c <= '9';\n      }\n      function isDecimal(c) {\n        return c >= '0' && c <= '9';\n      }\n      function isAttrMatchOperator(chr) {\n        return chr === '=' || chr === '^' || chr === '$' || chr === '*' || chr === '~';\n      }\n      var identSpecialChars = {\n        '!': true,\n        '\"': true,\n        '#': true,\n        $: true,\n        '%': true,\n        '&': true,\n        '\\'': true,\n        '(': true,\n        ')': true,\n        '*': true,\n        '+': true,\n        ',': true,\n        '.': true,\n        '/': true,\n        ';': true,\n        '<': true,\n        '=': true,\n        '>': true,\n        '?': true,\n        '@': true,\n        '[': true,\n        '\\\\': true,\n        ']': true,\n        '^': true,\n        '`': true,\n        '{': true,\n        '|': true,\n        '}': true,\n        '~': true\n      };\n      var strReplacementsRev = {\n        '\\n': '\\\\n',\n        '\\r': '\\\\r',\n        '\\t': '\\\\t',\n        '\\f': '\\\\f',\n        '\\v': '\\\\v'\n      };\n      var singleQuoteEscapeChars = {\n        n: '\\n',\n        r: '\\r',\n        t: '\\t',\n        f: '\\f',\n        '\\\\': '\\\\',\n        '\\'': '\\''\n      };\n      var doubleQuotesEscapeChars = {\n        n: '\\n',\n        r: '\\r',\n        t: '\\t',\n        f: '\\f',\n        '\\\\': '\\\\',\n        '\"': '\"'\n      };\n      function ParseContext(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {\n        var chr, getIdent, getStr, l, skipWhitespace;\n        l = str.length;\n        chr = null;\n        getStr = function(quote, escapeTable) {\n          var esc, hex, result;\n          result = '';\n          pos++;\n          chr = str.charAt(pos);\n          while (pos < l) {\n            if (chr === quote) {\n              pos++;\n              return result;\n            } else if (chr === '\\\\') {\n              pos++;\n              chr = str.charAt(pos);\n              if (chr === quote) {\n                result += quote;\n              } else if (esc = escapeTable[chr]) {\n                result += esc;\n              } else if (isHex(chr)) {\n                hex = chr;\n                pos++;\n                chr = str.charAt(pos);\n                while (isHex(chr)) {\n                  hex += chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (chr === ' ') {\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                result += String.fromCharCode(parseInt(hex, 16));\n                continue;\n              } else {\n                result += chr;\n              }\n            } else {\n              result += chr;\n            }\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        };\n        getIdent = function() {\n          var result = '';\n          chr = str.charAt(pos);\n          while (pos < l) {\n            if (isIdent(chr)) {\n              result += chr;\n            } else if (chr === '\\\\') {\n              pos++;\n              if (pos >= l) {\n                throw Error('Expected symbol but end of file reached.');\n              }\n              chr = str.charAt(pos);\n              if (identSpecialChars[chr]) {\n                result += chr;\n              } else if (isHex(chr)) {\n                var hex = chr;\n                pos++;\n                chr = str.charAt(pos);\n                while (isHex(chr)) {\n                  hex += chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (chr === ' ') {\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                result += String.fromCharCode(parseInt(hex, 16));\n                continue;\n              } else {\n                result += chr;\n              }\n            } else {\n              return result;\n            }\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        };\n        skipWhitespace = function() {\n          chr = str.charAt(pos);\n          var result = false;\n          while (chr === ' ' || chr === '\\t' || chr === '\\n' || chr === '\\r' || chr === '\\f') {\n            result = true;\n            pos++;\n            chr = str.charAt(pos);\n          }\n          return result;\n        };\n        this.parse = function() {\n          var res = this.parseSelector();\n          if (pos < l) {\n            throw Error('Rule expected but \"' + str.charAt(pos) + '\" found.');\n          }\n          return res;\n        };\n        this.parseSelector = function() {\n          var res;\n          var selector = res = this.parseSingleSelector();\n          chr = str.charAt(pos);\n          while (chr === ',') {\n            pos++;\n            skipWhitespace();\n            if (res.type !== 'selectors') {\n              res = {\n                type: 'selectors',\n                selectors: [ selector ]\n              };\n            }\n            selector = this.parseSingleSelector();\n            if (!selector) {\n              throw Error('Rule expected after \",\".');\n            }\n            res.selectors.push(selector);\n          }\n          return res;\n        };\n        this.parseSingleSelector = function() {\n          skipWhitespace();\n          var selector = {\n            type: 'ruleSet'\n          };\n          var rule = this.parseRule();\n          if (!rule) {\n            return null;\n          }\n          var currentRule = selector;\n          while (rule) {\n            rule.type = 'rule';\n            currentRule.rule = rule;\n            currentRule = rule;\n            skipWhitespace();\n            chr = str.charAt(pos);\n            if (pos >= l || chr === ',' || chr === ')') {\n              break;\n            }\n            if (ruleNestingOperators[chr]) {\n              var op = chr;\n              pos++;\n              skipWhitespace();\n              rule = this.parseRule();\n              if (!rule) {\n                throw Error('Rule expected after \"' + op + '\".');\n              }\n              rule.nestingOperator = op;\n            } else {\n              rule = this.parseRule();\n              if (rule) {\n                rule.nestingOperator = null;\n              }\n            }\n          }\n          return selector;\n        };\n        this.parseRule = function() {\n          var rule = null;\n          while (pos < l) {\n            chr = str.charAt(pos);\n            if (chr === '*') {\n              pos++;\n              (rule = rule || {}).tagName = '*';\n            } else if (isIdentStart(chr) || chr === '\\\\') {\n              (rule = rule || {}).tagName = getIdent();\n            } else if (chr === '.') {\n              pos++;\n              rule = rule || {};\n              (rule.classNames = rule.classNames || []).push(getIdent());\n            } else if (chr === '#') {\n              pos++;\n              (rule = rule || {}).id = getIdent();\n            } else if (chr === '[') {\n              pos++;\n              skipWhitespace();\n              var attr = {\n                name: getIdent()\n              };\n              skipWhitespace();\n              if (chr === ']') {\n                pos++;\n              } else {\n                var operator = '';\n                if (attrEqualityMods[chr]) {\n                  operator = chr;\n                  pos++;\n                  chr = str.charAt(pos);\n                }\n                if (pos >= l) {\n                  throw Error('Expected \"=\" but end of file reached.');\n                }\n                if (chr !== '=') {\n                  throw Error('Expected \"=\" but \"' + chr + '\" found.');\n                }\n                attr.operator = operator + '=';\n                pos++;\n                skipWhitespace();\n                var attrValue = '';\n                attr.valueType = 'string';\n                if (chr === '\"') {\n                  attrValue = getStr('\"', doubleQuotesEscapeChars);\n                } else if (chr === '\\'') {\n                  attrValue = getStr('\\'', singleQuoteEscapeChars);\n                } else if (substitutesEnabled && chr === '$') {\n                  pos++;\n                  attrValue = getIdent();\n                  attr.valueType = 'substitute';\n                } else {\n                  while (pos < l) {\n                    if (chr === ']') {\n                      break;\n                    }\n                    attrValue += chr;\n                    pos++;\n                    chr = str.charAt(pos);\n                  }\n                  attrValue = attrValue.trim();\n                }\n                skipWhitespace();\n                if (pos >= l) {\n                  throw Error('Expected \"]\" but end of file reached.');\n                }\n                if (chr !== ']') {\n                  throw Error('Expected \"]\" but \"' + chr + '\" found.');\n                }\n                pos++;\n                attr.value = attrValue;\n              }\n              rule = rule || {};\n              (rule.attrs = rule.attrs || []).push(attr);\n            } else if (chr === ':') {\n              pos++;\n              var pseudoName = getIdent();\n              var pseudo = {\n                name: pseudoName\n              };\n              if (chr === '(') {\n                pos++;\n                var value = '';\n                skipWhitespace();\n                if (pseudos[pseudoName] === 'selector') {\n                  pseudo.valueType = 'selector';\n                  value = this.parseSelector();\n                } else {\n                  pseudo.valueType = pseudos[pseudoName] || 'string';\n                  if (chr === '\"') {\n                    value = getStr('\"', doubleQuotesEscapeChars);\n                  } else if (chr === '\\'') {\n                    value = getStr('\\'', singleQuoteEscapeChars);\n                  } else if (substitutesEnabled && chr === '$') {\n                    pos++;\n                    value = getIdent();\n                    pseudo.valueType = 'substitute';\n                  } else {\n                    while (pos < l) {\n                      if (chr === ')') {\n                        break;\n                      }\n                      value += chr;\n                      pos++;\n                      chr = str.charAt(pos);\n                    }\n                    value = value.trim();\n                  }\n                  skipWhitespace();\n                }\n                if (pos >= l) {\n                  throw Error('Expected \")\" but end of file reached.');\n                }\n                if (chr !== ')') {\n                  throw Error('Expected \")\" but \"' + chr + '\" found.');\n                }\n                pos++;\n                pseudo.value = value;\n              }\n              rule = rule || {};\n              (rule.pseudos = rule.pseudos || []).push(pseudo);\n            } else {\n              break;\n            }\n          }\n          return rule;\n        };\n        return this;\n      }\n      CssSelectorParser.prototype.parse = function(str) {\n        var context = new ParseContext(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);\n        return context.parse();\n      };\n      CssSelectorParser.prototype.escapeIdentifier = function(s) {\n        var result = '';\n        var i = 0;\n        var len = s.length;\n        while (i < len) {\n          var chr = s.charAt(i);\n          if (identSpecialChars[chr]) {\n            result += '\\\\' + chr;\n          } else {\n            if (!(chr === '_' || chr === '-' || chr >= 'A' && chr <= 'Z' || chr >= 'a' && chr <= 'z' || i !== 0 && chr >= '0' && chr <= '9')) {\n              var charCode = chr.charCodeAt(0);\n              if ((charCode & 63488) === 55296) {\n                var extraCharCode = s.charCodeAt(i++);\n                if ((charCode & 64512) !== 55296 || (extraCharCode & 64512) !== 56320) {\n                  throw Error('UCS-2(decode): illegal sequence');\n                }\n                charCode = ((charCode & 1023) << 10) + (extraCharCode & 1023) + 65536;\n              }\n              result += '\\\\' + charCode.toString(16) + ' ';\n            } else {\n              result += chr;\n            }\n          }\n          i++;\n        }\n        return result;\n      };\n      CssSelectorParser.prototype.escapeStr = function(s) {\n        var result = '';\n        var i = 0;\n        var len = s.length;\n        var chr, replacement;\n        while (i < len) {\n          chr = s.charAt(i);\n          if (chr === '\"') {\n            chr = '\\\\\"';\n          } else if (chr === '\\\\') {\n            chr = '\\\\\\\\';\n          } else if (replacement = strReplacementsRev[chr]) {\n            chr = replacement;\n          }\n          result += chr;\n          i++;\n        }\n        return '\"' + result + '\"';\n      };\n      CssSelectorParser.prototype.render = function(path) {\n        return this._renderEntity(path).trim();\n      };\n      CssSelectorParser.prototype._renderEntity = function(entity) {\n        var currentEntity, parts, res;\n        res = '';\n        switch (entity.type) {\n         case 'ruleSet':\n          currentEntity = entity.rule;\n          parts = [];\n          while (currentEntity) {\n            if (currentEntity.nestingOperator) {\n              parts.push(currentEntity.nestingOperator);\n            }\n            parts.push(this._renderEntity(currentEntity));\n            currentEntity = currentEntity.rule;\n          }\n          res = parts.join(' ');\n          break;\n\n         case 'selectors':\n          res = entity.selectors.map(this._renderEntity, this).join(', ');\n          break;\n\n         case 'rule':\n          if (entity.tagName) {\n            if (entity.tagName === '*') {\n              res = '*';\n            } else {\n              res = this.escapeIdentifier(entity.tagName);\n            }\n          }\n          if (entity.id) {\n            res += '#' + this.escapeIdentifier(entity.id);\n          }\n          if (entity.classNames) {\n            res += entity.classNames.map(function(cn) {\n              return '.' + this.escapeIdentifier(cn);\n            }, this).join('');\n          }\n          if (entity.attrs) {\n            res += entity.attrs.map(function(attr) {\n              if (attr.operator) {\n                if (attr.valueType === 'substitute') {\n                  return '[' + this.escapeIdentifier(attr.name) + attr.operator + '$' + attr.value + ']';\n                } else {\n                  return '[' + this.escapeIdentifier(attr.name) + attr.operator + this.escapeStr(attr.value) + ']';\n                }\n              } else {\n                return '[' + this.escapeIdentifier(attr.name) + ']';\n              }\n            }, this).join('');\n          }\n          if (entity.pseudos) {\n            res += entity.pseudos.map(function(pseudo) {\n              if (pseudo.valueType) {\n                if (pseudo.valueType === 'selector') {\n                  return ':' + this.escapeIdentifier(pseudo.name) + '(' + this._renderEntity(pseudo.value) + ')';\n                } else if (pseudo.valueType === 'substitute') {\n                  return ':' + this.escapeIdentifier(pseudo.name) + '($' + pseudo.value + ')';\n                } else if (pseudo.valueType === 'numeric') {\n                  return ':' + this.escapeIdentifier(pseudo.name) + '(' + pseudo.value + ')';\n                } else {\n                  return ':' + this.escapeIdentifier(pseudo.name) + '(' + this.escapeIdentifier(pseudo.value) + ')';\n                }\n              } else {\n                return ':' + this.escapeIdentifier(pseudo.name);\n              }\n            }, this).join('');\n          }\n          break;\n\n         default:\n          throw Error('Unknown entity type: \"' + entity.type(+'\".'));\n        }\n        return res;\n      };\n      exports.CssSelectorParser = CssSelectorParser;\n    }, {} ],\n    157: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('type/value/is'), isPlainFunction = _dereq_('type/plain-function/is'), assign = _dereq_('es5-ext/object/assign'), normalizeOpts = _dereq_('es5-ext/object/normalize-options'), contains = _dereq_('es5-ext/string/#/contains');\n      var d = module.exports = function(dscr, value) {\n        var c, e, w, options, desc;\n        if (arguments.length < 2 || typeof dscr !== 'string') {\n          options = value;\n          value = dscr;\n          dscr = null;\n        } else {\n          options = arguments[2];\n        }\n        if (isValue(dscr)) {\n          c = contains.call(dscr, 'c');\n          e = contains.call(dscr, 'e');\n          w = contains.call(dscr, 'w');\n        } else {\n          c = w = true;\n          e = false;\n        }\n        desc = {\n          value: value,\n          configurable: c,\n          enumerable: e,\n          writable: w\n        };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n      d.gs = function(dscr, get, set) {\n        var c, e, options, desc;\n        if (typeof dscr !== 'string') {\n          options = set;\n          set = get;\n          get = dscr;\n          dscr = null;\n        } else {\n          options = arguments[3];\n        }\n        if (!isValue(get)) {\n          get = undefined;\n        } else if (!isPlainFunction(get)) {\n          options = get;\n          get = set = undefined;\n        } else if (!isValue(set)) {\n          set = undefined;\n        } else if (!isPlainFunction(set)) {\n          options = set;\n          set = undefined;\n        }\n        if (isValue(dscr)) {\n          c = contains.call(dscr, 'c');\n          e = contains.call(dscr, 'e');\n        } else {\n          c = true;\n          e = false;\n        }\n        desc = {\n          get: get,\n          set: set,\n          configurable: c,\n          enumerable: e\n        };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n    }, {\n      'es5-ext/object/assign': 178,\n      'es5-ext/object/normalize-options': 190,\n      'es5-ext/string/#/contains': 197,\n      'type/plain-function/is': 242,\n      'type/value/is': 244\n    } ],\n    158: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        return /\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C\\uDFFB|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFE])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D[\\uDC68\\uDC69])\\u200D(?:\\uD83D[\\uDC66\\uDC67])|[\\u2695\\u2696\\u2708]\\uFE0F|\\uD83D[\\uDC66\\uDC67]|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|(?:\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708])\\uFE0F|\\uD83C\\uDFFB\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFB\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)\\uD83C\\uDFFB|\\uD83E\\uDDD1(?:\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1)|(?:\\uD83E\\uDDD1\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFF\\u200D\\uD83E\\uDD1D\\u200D(?:\\uD83D[\\uDC68\\uDC69]))(?:\\uD83C[\\uDFFB-\\uDFFE])|(?:\\uD83E\\uDDD1\\uD83C\\uDFFC\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB\\uDFFC])|\\uD83D\\uDC69(?:\\uD83C\\uDFFE\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFC\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFB\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFC-\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFD\\u200D(?:\\uD83E\\uDD1D\\u200D\\uD83D\\uDC68(?:\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C\\uDFFF\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]))|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67]))|(?:\\uD83E\\uDDD1\\uD83C\\uDFFD\\u200D\\uD83E\\uDD1D\\u200D\\uD83E\\uDDD1|\\uD83D\\uDC69\\uD83C\\uDFFE\\u200D\\uD83E\\uDD1D\\u200D\\uD83D\\uDC69)(?:\\uD83C[\\uDFFB-\\uDFFD])|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC69\\u200D(?:\\uD83D[\\uDC66\\uDC67])|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C\\uDFFF\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFE\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFC\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFB\\u200D[\\u2695\\u2696\\u2708]|\\uD83C\\uDFFD\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708])|(?:(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)\\uFE0F|\\uD83D\\uDC6F|\\uD83E[\\uDD3C\\uDDDE\\uDDDF])\\u200D[\\u2640\\u2642]|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]|\\u200D[\\u2640\\u2642])|\\uD83C\\uDFF4\\u200D\\u2620)\\uFE0F|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|\\uD83D\\uDC15\\u200D\\uD83E\\uDDBA|\\uD83D\\uDC69\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D\\uD83D\\uDC67|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDF6\\uD83C\\uDDE6|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83E\\uDDD1(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDB5\\uDDB6\\uDDBB\\uDDD2-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDED5\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])\\uFE0F|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDC8F\\uDC91\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD0F\\uDD18-\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3C-\\uDD3E\\uDDB5\\uDDB6\\uDDB8\\uDDB9\\uDDBB\\uDDCD-\\uDDCF\\uDDD1-\\uDDDD])/g;\n      };\n    }, {} ],\n    159: [ function(_dereq_, module, exports) {\n      'use strict';\n      var numberIsNaN = _dereq_('../../number/is-nan'), toPosInt = _dereq_('../../number/to-pos-integer'), value = _dereq_('../../object/valid-value'), indexOf = Array.prototype.indexOf, objHasOwnProperty = Object.prototype.hasOwnProperty, abs = Math.abs, floor = Math.floor;\n      module.exports = function(searchElement) {\n        var i, length, fromIndex, val;\n        if (!numberIsNaN(searchElement)) {\n          return indexOf.apply(this, arguments);\n        }\n        length = toPosInt(value(this).length);\n        fromIndex = arguments[1];\n        if (isNaN(fromIndex)) {\n          fromIndex = 0;\n        } else if (fromIndex >= 0) {\n          fromIndex = floor(fromIndex);\n        } else {\n          fromIndex = toPosInt(this.length) - floor(abs(fromIndex));\n        }\n        for (i = fromIndex; i < length; ++i) {\n          if (objHasOwnProperty.call(this, i)) {\n            val = this[i];\n            if (numberIsNaN(val)) {\n              return i;\n            }\n          }\n        }\n        return -1;\n      };\n    }, {\n      '../../number/is-nan': 172,\n      '../../number/to-pos-integer': 176,\n      '../../object/valid-value': 193\n    } ],\n    160: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? Array.from : _dereq_('./shim');\n    }, {\n      './is-implemented': 161,\n      './shim': 162\n    } ],\n    161: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        var from = Array.from, arr, result;\n        if (typeof from !== 'function') {\n          return false;\n        }\n        arr = [ 'raz', 'dwa' ];\n        result = from(arr);\n        return Boolean(result && result !== arr && result[1] === 'dwa');\n      };\n    }, {} ],\n    162: [ function(_dereq_, module, exports) {\n      'use strict';\n      var iteratorSymbol = _dereq_('es6-symbol').iterator, isArguments = _dereq_('../../function/is-arguments'), isFunction = _dereq_('../../function/is-function'), toPosInt = _dereq_('../../number/to-pos-integer'), callable = _dereq_('../../object/valid-callable'), validValue = _dereq_('../../object/valid-value'), isValue = _dereq_('../../object/is-value'), isString = _dereq_('../../string/is-string'), isArray = Array.isArray, call = Function.prototype.call, desc = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: null\n      }, defineProperty = Object.defineProperty;\n      module.exports = function(arrayLike) {\n        var mapFn = arguments[1], thisArg = arguments[2], Context, i, j, arr, length, code, iterator, result, getIterator, value;\n        arrayLike = Object(validValue(arrayLike));\n        if (isValue(mapFn)) {\n          callable(mapFn);\n        }\n        if (!this || this === Array || !isFunction(this)) {\n          if (!mapFn) {\n            if (isArguments(arrayLike)) {\n              length = arrayLike.length;\n              if (length !== 1) {\n                return Array.apply(null, arrayLike);\n              }\n              arr = new Array(1);\n              arr[0] = arrayLike[0];\n              return arr;\n            }\n            if (isArray(arrayLike)) {\n              arr = new Array(length = arrayLike.length);\n              for (i = 0; i < length; ++i) {\n                arr[i] = arrayLike[i];\n              }\n              return arr;\n            }\n          }\n          arr = [];\n        } else {\n          Context = this;\n        }\n        if (!isArray(arrayLike)) {\n          if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {\n            iterator = callable(getIterator).call(arrayLike);\n            if (Context) {\n              arr = new Context();\n            }\n            result = iterator.next();\n            i = 0;\n            while (!result.done) {\n              value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;\n              if (Context) {\n                desc.value = value;\n                defineProperty(arr, i, desc);\n              } else {\n                arr[i] = value;\n              }\n              result = iterator.next();\n              ++i;\n            }\n            length = i;\n          } else if (isString(arrayLike)) {\n            length = arrayLike.length;\n            if (Context) {\n              arr = new Context();\n            }\n            for (i = 0, j = 0; i < length; ++i) {\n              value = arrayLike[i];\n              if (i + 1 < length) {\n                code = value.charCodeAt(0);\n                if (code >= 55296 && code <= 56319) {\n                  value += arrayLike[++i];\n                }\n              }\n              value = mapFn ? call.call(mapFn, thisArg, value, j) : value;\n              if (Context) {\n                desc.value = value;\n                defineProperty(arr, j, desc);\n              } else {\n                arr[j] = value;\n              }\n              ++j;\n            }\n            length = j;\n          }\n        }\n        if (length === undefined) {\n          length = toPosInt(arrayLike.length);\n          if (Context) {\n            arr = new Context(length);\n          }\n          for (i = 0; i < length; ++i) {\n            value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];\n            if (Context) {\n              desc.value = value;\n              defineProperty(arr, i, desc);\n            } else {\n              arr[i] = value;\n            }\n          }\n        }\n        if (Context) {\n          desc.value = null;\n          arr.length = length;\n        }\n        return arr;\n      };\n    }, {\n      '../../function/is-arguments': 166,\n      '../../function/is-function': 167,\n      '../../number/to-pos-integer': 176,\n      '../../object/is-value': 184,\n      '../../object/valid-callable': 192,\n      '../../object/valid-value': 193,\n      '../../string/is-string': 200,\n      'es6-symbol': 203\n    } ],\n    163: [ function(_dereq_, module, exports) {\n      'use strict';\n      var from = _dereq_('./from'), isArray = Array.isArray;\n      module.exports = function(arrayLike) {\n        return isArray(arrayLike) ? arrayLike : from(arrayLike);\n      };\n    }, {\n      './from': 160\n    } ],\n    164: [ function(_dereq_, module, exports) {\n      'use strict';\n      var assign = _dereq_('../object/assign'), isObject = _dereq_('../object/is-object'), isValue = _dereq_('../object/is-value'), captureStackTrace = Error.captureStackTrace;\n      module.exports = function(message) {\n        var err = new Error(message), code = arguments[1], ext = arguments[2];\n        if (!isValue(ext)) {\n          if (isObject(code)) {\n            ext = code;\n            code = null;\n          }\n        }\n        if (isValue(ext)) {\n          assign(err, ext);\n        }\n        if (isValue(code)) {\n          err.code = code;\n        }\n        if (captureStackTrace) {\n          captureStackTrace(err, module.exports);\n        }\n        return err;\n      };\n    }, {\n      '../object/assign': 178,\n      '../object/is-object': 183,\n      '../object/is-value': 184\n    } ],\n    165: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toPosInt = _dereq_('../number/to-pos-integer');\n      var test = function(arg1, arg2) {\n        return arg2;\n      };\n      var desc, defineProperty, generate, mixin;\n      try {\n        Object.defineProperty(test, 'length', {\n          configurable: true,\n          writable: false,\n          enumerable: false,\n          value: 1\n        });\n      } catch (ignore) {}\n      if (test.length === 1) {\n        desc = {\n          configurable: true,\n          writable: false,\n          enumerable: false\n        };\n        defineProperty = Object.defineProperty;\n        module.exports = function(fn, length) {\n          length = toPosInt(length);\n          if (fn.length === length) {\n            return fn;\n          }\n          desc.value = length;\n          return defineProperty(fn, 'length', desc);\n        };\n      } else {\n        mixin = _dereq_('../object/mixin');\n        generate = function() {\n          var cache = [];\n          return function(length) {\n            var args, i = 0;\n            if (cache[length]) {\n              return cache[length];\n            }\n            args = [];\n            while (length--) {\n              args.push('a' + (++i).toString(36));\n            }\n            return new Function('fn', 'return function (' + args.join(', ') + ') { return fn.apply(this, arguments); };');\n          };\n        }();\n        module.exports = function(src, length) {\n          var target;\n          length = toPosInt(length);\n          if (src.length === length) {\n            return src;\n          }\n          target = generate(length)(src);\n          try {\n            mixin(target, src);\n          } catch (ignore) {}\n          return target;\n        };\n      }\n    }, {\n      '../number/to-pos-integer': 176,\n      '../object/mixin': 189\n    } ],\n    166: [ function(_dereq_, module, exports) {\n      'use strict';\n      var objToString = Object.prototype.toString, id = objToString.call(function() {\n        return arguments;\n      }());\n      module.exports = function(value) {\n        return objToString.call(value) === id;\n      };\n    }, {} ],\n    167: [ function(_dereq_, module, exports) {\n      'use strict';\n      var objToString = Object.prototype.toString, isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);\n      module.exports = function(value) {\n        return typeof value === 'function' && isFunctionStringTag(objToString.call(value));\n      };\n    }, {} ],\n    168: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {};\n    }, {} ],\n    169: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? Math.sign : _dereq_('./shim');\n    }, {\n      './is-implemented': 170,\n      './shim': 171\n    } ],\n    170: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        var sign = Math.sign;\n        if (typeof sign !== 'function') {\n          return false;\n        }\n        return sign(10) === 1 && sign(-20) === -1;\n      };\n    }, {} ],\n    171: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(value) {\n        value = Number(value);\n        if (isNaN(value) || value === 0) {\n          return value;\n        }\n        return value > 0 ? 1 : -1;\n      };\n    }, {} ],\n    172: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? Number.isNaN : _dereq_('./shim');\n    }, {\n      './is-implemented': 173,\n      './shim': 174\n    } ],\n    173: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        var numberIsNaN = Number.isNaN;\n        if (typeof numberIsNaN !== 'function') {\n          return false;\n        }\n        return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);\n      };\n    }, {} ],\n    174: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(value) {\n        return value !== value;\n      };\n    }, {} ],\n    175: [ function(_dereq_, module, exports) {\n      'use strict';\n      var sign = _dereq_('../math/sign'), abs = Math.abs, floor = Math.floor;\n      module.exports = function(value) {\n        if (isNaN(value)) {\n          return 0;\n        }\n        value = Number(value);\n        if (value === 0 || !isFinite(value)) {\n          return value;\n        }\n        return sign(value) * floor(abs(value));\n      };\n    }, {\n      '../math/sign': 169\n    } ],\n    176: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toInteger = _dereq_('./to-integer'), max = Math.max;\n      module.exports = function(value) {\n        return max(0, toInteger(value));\n      };\n    }, {\n      './to-integer': 175\n    } ],\n    177: [ function(_dereq_, module, exports) {\n      'use strict';\n      var callable = _dereq_('./valid-callable'), value = _dereq_('./valid-value'), bind = Function.prototype.bind, call = Function.prototype.call, keys = Object.keys, objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n      module.exports = function(method, defVal) {\n        return function(obj, cb) {\n          var list, thisArg = arguments[2], compareFn = arguments[3];\n          obj = Object(value(obj));\n          callable(cb);\n          list = keys(obj);\n          if (compareFn) {\n            list.sort(typeof compareFn === 'function' ? bind.call(compareFn, obj) : undefined);\n          }\n          if (typeof method !== 'function') {\n            method = list[method];\n          }\n          return call.call(method, list, function(key, index) {\n            if (!objPropertyIsEnumerable.call(obj, key)) {\n              return defVal;\n            }\n            return call.call(cb, thisArg, obj[key], key, obj, index);\n          });\n        };\n      };\n    }, {\n      './valid-callable': 192,\n      './valid-value': 193\n    } ],\n    178: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? Object.assign : _dereq_('./shim');\n    }, {\n      './is-implemented': 179,\n      './shim': 180\n    } ],\n    179: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        var assign = Object.assign, obj;\n        if (typeof assign !== 'function') {\n          return false;\n        }\n        obj = {\n          foo: 'raz'\n        };\n        assign(obj, {\n          bar: 'dwa'\n        }, {\n          trzy: 'trzy'\n        });\n        return obj.foo + obj.bar + obj.trzy === 'razdwatrzy';\n      };\n    }, {} ],\n    180: [ function(_dereq_, module, exports) {\n      'use strict';\n      var keys = _dereq_('../keys'), value = _dereq_('../valid-value'), max = Math.max;\n      module.exports = function(dest, src) {\n        var error, i, length = max(arguments.length, 2), assign;\n        dest = Object(value(dest));\n        assign = function(key) {\n          try {\n            dest[key] = src[key];\n          } catch (e) {\n            if (!error) {\n              error = e;\n            }\n          }\n        };\n        for (i = 1; i < length; ++i) {\n          src = arguments[i];\n          keys(src).forEach(assign);\n        }\n        if (error !== undefined) {\n          throw error;\n        }\n        return dest;\n      };\n    }, {\n      '../keys': 185,\n      '../valid-value': 193\n    } ],\n    181: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./_iterate')('forEach');\n    }, {\n      './_iterate': 177\n    } ],\n    182: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(obj) {\n        return typeof obj === 'function';\n      };\n    }, {} ],\n    183: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('./is-value');\n      var map = {\n        function: true,\n        object: true\n      };\n      module.exports = function(value) {\n        return isValue(value) && map[typeof value] || false;\n      };\n    }, {\n      './is-value': 184\n    } ],\n    184: [ function(_dereq_, module, exports) {\n      'use strict';\n      var _undefined = _dereq_('../function/noop')();\n      module.exports = function(val) {\n        return val !== _undefined && val !== null;\n      };\n    }, {\n      '../function/noop': 168\n    } ],\n    185: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? Object.keys : _dereq_('./shim');\n    }, {\n      './is-implemented': 186,\n      './shim': 187\n    } ],\n    186: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        try {\n          Object.keys('primitive');\n          return true;\n        } catch (e) {\n          return false;\n        }\n      };\n    }, {} ],\n    187: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('../is-value');\n      var keys = Object.keys;\n      module.exports = function(object) {\n        return keys(isValue(object) ? Object(object) : object);\n      };\n    }, {\n      '../is-value': 184\n    } ],\n    188: [ function(_dereq_, module, exports) {\n      'use strict';\n      var callable = _dereq_('./valid-callable'), forEach = _dereq_('./for-each'), call = Function.prototype.call;\n      module.exports = function(obj, cb) {\n        var result = {}, thisArg = arguments[2];\n        callable(cb);\n        forEach(obj, function(value, key, targetObj, index) {\n          result[key] = call.call(cb, thisArg, value, key, targetObj, index);\n        });\n        return result;\n      };\n    }, {\n      './for-each': 181,\n      './valid-callable': 192\n    } ],\n    189: [ function(_dereq_, module, exports) {\n      'use strict';\n      var value = _dereq_('./valid-value'), defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      module.exports = function(target, source) {\n        var error, sourceObject = Object(value(source));\n        target = Object(value(target));\n        getOwnPropertyNames(sourceObject).forEach(function(name) {\n          try {\n            defineProperty(target, name, getOwnPropertyDescriptor(source, name));\n          } catch (e) {\n            error = e;\n          }\n        });\n        if (typeof getOwnPropertySymbols === 'function') {\n          getOwnPropertySymbols(sourceObject).forEach(function(symbol) {\n            try {\n              defineProperty(target, symbol, getOwnPropertyDescriptor(source, symbol));\n            } catch (e) {\n              error = e;\n            }\n          });\n        }\n        if (error !== undefined) {\n          throw error;\n        }\n        return target;\n      };\n    }, {\n      './valid-value': 193\n    } ],\n    190: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('./is-value');\n      var forEach = Array.prototype.forEach, create = Object.create;\n      var process = function(src, obj) {\n        var key;\n        for (key in src) {\n          obj[key] = src[key];\n        }\n      };\n      module.exports = function(opts1) {\n        var result = create(null);\n        forEach.call(arguments, function(options) {\n          if (!isValue(options)) {\n            return;\n          }\n          process(Object(options), result);\n        });\n        return result;\n      };\n    }, {\n      './is-value': 184\n    } ],\n    191: [ function(_dereq_, module, exports) {\n      'use strict';\n      var forEach = Array.prototype.forEach, create = Object.create;\n      module.exports = function(arg) {\n        var set = create(null);\n        forEach.call(arguments, function(name) {\n          set[name] = true;\n        });\n        return set;\n      };\n    }, {} ],\n    192: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(fn) {\n        if (typeof fn !== 'function') {\n          throw new TypeError(fn + ' is not a function');\n        }\n        return fn;\n      };\n    }, {} ],\n    193: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('./is-value');\n      module.exports = function(value) {\n        if (!isValue(value)) {\n          throw new TypeError('Cannot use null or undefined');\n        }\n        return value;\n      };\n    }, {\n      './is-value': 184\n    } ],\n    194: [ function(_dereq_, module, exports) {\n      'use strict';\n      var ensureValue = _dereq_('./valid-value'), stringifiable = _dereq_('./validate-stringifiable');\n      module.exports = function(value) {\n        return stringifiable(ensureValue(value));\n      };\n    }, {\n      './valid-value': 193,\n      './validate-stringifiable': 195\n    } ],\n    195: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isCallable = _dereq_('./is-callable');\n      module.exports = function(stringifiable) {\n        try {\n          if (stringifiable && isCallable(stringifiable.toString)) {\n            return stringifiable.toString();\n          }\n          return String(stringifiable);\n        } catch (e) {\n          throw new TypeError('Passed argument cannot be stringifed');\n        }\n      };\n    }, {\n      './is-callable': 182\n    } ],\n    196: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isCallable = _dereq_('./object/is-callable');\n      module.exports = function(value) {\n        try {\n          if (value && isCallable(value.toString)) {\n            return value.toString();\n          }\n          return String(value);\n        } catch (e) {\n          return '<Non-coercible to string value>';\n        }\n      };\n    }, {\n      './object/is-callable': 182\n    } ],\n    197: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? String.prototype.contains : _dereq_('./shim');\n    }, {\n      './is-implemented': 198,\n      './shim': 199\n    } ],\n    198: [ function(_dereq_, module, exports) {\n      'use strict';\n      var str = 'razdwatrzy';\n      module.exports = function() {\n        if (typeof str.contains !== 'function') {\n          return false;\n        }\n        return str.contains('dwa') === true && str.contains('foo') === false;\n      };\n    }, {} ],\n    199: [ function(_dereq_, module, exports) {\n      'use strict';\n      var indexOf = String.prototype.indexOf;\n      module.exports = function(searchString) {\n        return indexOf.call(this, searchString, arguments[1]) > -1;\n      };\n    }, {} ],\n    200: [ function(_dereq_, module, exports) {\n      'use strict';\n      var objToString = Object.prototype.toString, id = objToString.call('');\n      module.exports = function(value) {\n        return typeof value === 'string' || value && typeof value === 'object' && (value instanceof String || objToString.call(value) === id) || false;\n      };\n    }, {} ],\n    201: [ function(_dereq_, module, exports) {\n      'use strict';\n      var safeToString = _dereq_('./safe-to-string');\n      var reNewLine = /[\\n\\r\\u2028\\u2029]/g;\n      module.exports = function(value) {\n        var string = safeToString(value);\n        if (string.length > 100) {\n          string = string.slice(0, 99) + '\\u2026';\n        }\n        string = string.replace(reNewLine, function(char) {\n          return JSON.stringify(char).slice(1, -1);\n        });\n        return string;\n      };\n    }, {\n      './safe-to-string': 196\n    } ],\n    202: [ function(_dereq_, module, exports) {\n      (function(process, global) {\n        (function(global, factory) {\n          typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n        })(this, function() {\n          'use strict';\n          function objectOrFunction(x) {\n            var type = typeof x;\n            return x !== null && (type === 'object' || type === 'function');\n          }\n          function isFunction(x) {\n            return typeof x === 'function';\n          }\n          var _isArray = void 0;\n          if (Array.isArray) {\n            _isArray = Array.isArray;\n          } else {\n            _isArray = function(x) {\n              return Object.prototype.toString.call(x) === '[object Array]';\n            };\n          }\n          var isArray = _isArray;\n          var len = 0;\n          var vertxNext = void 0;\n          var customSchedulerFn = void 0;\n          var asap = function asap(callback, arg) {\n            queue[len] = callback;\n            queue[len + 1] = arg;\n            len += 2;\n            if (len === 2) {\n              if (customSchedulerFn) {\n                customSchedulerFn(flush);\n              } else {\n                scheduleFlush();\n              }\n            }\n          };\n          function setScheduler(scheduleFn) {\n            customSchedulerFn = scheduleFn;\n          }\n          function setAsap(asapFn) {\n            asap = asapFn;\n          }\n          var browserWindow = typeof window !== 'undefined' ? window : undefined;\n          var browserGlobal = browserWindow || {};\n          var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n          var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n          var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n          function useNextTick() {\n            return function() {\n              return process.nextTick(flush);\n            };\n          }\n          function useVertxTimer() {\n            if (typeof vertxNext !== 'undefined') {\n              return function() {\n                vertxNext(flush);\n              };\n            }\n            return useSetTimeout();\n          }\n          function useMutationObserver() {\n            var iterations = 0;\n            var observer = new BrowserMutationObserver(flush);\n            var node = document.createTextNode('');\n            observer.observe(node, {\n              characterData: true\n            });\n            return function() {\n              node.data = iterations = ++iterations % 2;\n            };\n          }\n          function useMessageChannel() {\n            var channel = new MessageChannel();\n            channel.port1.onmessage = flush;\n            return function() {\n              return channel.port2.postMessage(0);\n            };\n          }\n          function useSetTimeout() {\n            var globalSetTimeout = setTimeout;\n            return function() {\n              return globalSetTimeout(flush, 1);\n            };\n          }\n          var queue = new Array(1e3);\n          function flush() {\n            for (var i = 0; i < len; i += 2) {\n              var callback = queue[i];\n              var arg = queue[i + 1];\n              callback(arg);\n              queue[i] = undefined;\n              queue[i + 1] = undefined;\n            }\n            len = 0;\n          }\n          function attemptVertx() {\n            try {\n              var vertx = Function('return this')().require('vertx');\n              vertxNext = vertx.runOnLoop || vertx.runOnContext;\n              return useVertxTimer();\n            } catch (e) {\n              return useSetTimeout();\n            }\n          }\n          var scheduleFlush = void 0;\n          if (isNode) {\n            scheduleFlush = useNextTick();\n          } else if (BrowserMutationObserver) {\n            scheduleFlush = useMutationObserver();\n          } else if (isWorker) {\n            scheduleFlush = useMessageChannel();\n          } else if (browserWindow === undefined && typeof _dereq_ === 'function') {\n            scheduleFlush = attemptVertx();\n          } else {\n            scheduleFlush = useSetTimeout();\n          }\n          function then(onFulfillment, onRejection) {\n            var parent = this;\n            var child = new this.constructor(noop);\n            if (child[PROMISE_ID] === undefined) {\n              makePromise(child);\n            }\n            var _state = parent._state;\n            if (_state) {\n              var callback = arguments[_state - 1];\n              asap(function() {\n                return invokeCallback(_state, child, callback, parent._result);\n              });\n            } else {\n              subscribe(parent, child, onFulfillment, onRejection);\n            }\n            return child;\n          }\n          function resolve$1(object) {\n            var Constructor = this;\n            if (object && typeof object === 'object' && object.constructor === Constructor) {\n              return object;\n            }\n            var promise = new Constructor(noop);\n            resolve(promise, object);\n            return promise;\n          }\n          var PROMISE_ID = Math.random().toString(36).substring(2);\n          function noop() {}\n          var PENDING = void 0;\n          var FULFILLED = 1;\n          var REJECTED = 2;\n          function selfFulfillment() {\n            return new TypeError('You cannot resolve a promise with itself');\n          }\n          function cannotReturnOwn() {\n            return new TypeError('A promises callback cannot return that same promise.');\n          }\n          function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n            try {\n              then$$1.call(value, fulfillmentHandler, rejectionHandler);\n            } catch (e) {\n              return e;\n            }\n          }\n          function handleForeignThenable(promise, thenable, then$$1) {\n            asap(function(promise) {\n              var sealed = false;\n              var error = tryThen(then$$1, thenable, function(value) {\n                if (sealed) {\n                  return;\n                }\n                sealed = true;\n                if (thenable !== value) {\n                  resolve(promise, value);\n                } else {\n                  fulfill(promise, value);\n                }\n              }, function(reason) {\n                if (sealed) {\n                  return;\n                }\n                sealed = true;\n                reject(promise, reason);\n              }, 'Settle: ' + (promise._label || ' unknown promise'));\n              if (!sealed && error) {\n                sealed = true;\n                reject(promise, error);\n              }\n            }, promise);\n          }\n          function handleOwnThenable(promise, thenable) {\n            if (thenable._state === FULFILLED) {\n              fulfill(promise, thenable._result);\n            } else if (thenable._state === REJECTED) {\n              reject(promise, thenable._result);\n            } else {\n              subscribe(thenable, undefined, function(value) {\n                return resolve(promise, value);\n              }, function(reason) {\n                return reject(promise, reason);\n              });\n            }\n          }\n          function handleMaybeThenable(promise, maybeThenable, then$$1) {\n            if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n              handleOwnThenable(promise, maybeThenable);\n            } else {\n              if (then$$1 === undefined) {\n                fulfill(promise, maybeThenable);\n              } else if (isFunction(then$$1)) {\n                handleForeignThenable(promise, maybeThenable, then$$1);\n              } else {\n                fulfill(promise, maybeThenable);\n              }\n            }\n          }\n          function resolve(promise, value) {\n            if (promise === value) {\n              reject(promise, selfFulfillment());\n            } else if (objectOrFunction(value)) {\n              var then$$1 = void 0;\n              try {\n                then$$1 = value.then;\n              } catch (error) {\n                reject(promise, error);\n                return;\n              }\n              handleMaybeThenable(promise, value, then$$1);\n            } else {\n              fulfill(promise, value);\n            }\n          }\n          function publishRejection(promise) {\n            if (promise._onerror) {\n              promise._onerror(promise._result);\n            }\n            publish(promise);\n          }\n          function fulfill(promise, value) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n            promise._result = value;\n            promise._state = FULFILLED;\n            if (promise._subscribers.length !== 0) {\n              asap(publish, promise);\n            }\n          }\n          function reject(promise, reason) {\n            if (promise._state !== PENDING) {\n              return;\n            }\n            promise._state = REJECTED;\n            promise._result = reason;\n            asap(publishRejection, promise);\n          }\n          function subscribe(parent, child, onFulfillment, onRejection) {\n            var _subscribers = parent._subscribers;\n            var length = _subscribers.length;\n            parent._onerror = null;\n            _subscribers[length] = child;\n            _subscribers[length + FULFILLED] = onFulfillment;\n            _subscribers[length + REJECTED] = onRejection;\n            if (length === 0 && parent._state) {\n              asap(publish, parent);\n            }\n          }\n          function publish(promise) {\n            var subscribers = promise._subscribers;\n            var settled = promise._state;\n            if (subscribers.length === 0) {\n              return;\n            }\n            var child = void 0, callback = void 0, detail = promise._result;\n            for (var i = 0; i < subscribers.length; i += 3) {\n              child = subscribers[i];\n              callback = subscribers[i + settled];\n              if (child) {\n                invokeCallback(settled, child, callback, detail);\n              } else {\n                callback(detail);\n              }\n            }\n            promise._subscribers.length = 0;\n          }\n          function invokeCallback(settled, promise, callback, detail) {\n            var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;\n            if (hasCallback) {\n              try {\n                value = callback(detail);\n              } catch (e) {\n                succeeded = false;\n                error = e;\n              }\n              if (promise === value) {\n                reject(promise, cannotReturnOwn());\n                return;\n              }\n            } else {\n              value = detail;\n            }\n            if (promise._state !== PENDING) {} else if (hasCallback && succeeded) {\n              resolve(promise, value);\n            } else if (succeeded === false) {\n              reject(promise, error);\n            } else if (settled === FULFILLED) {\n              fulfill(promise, value);\n            } else if (settled === REJECTED) {\n              reject(promise, value);\n            }\n          }\n          function initializePromise(promise, resolver) {\n            try {\n              resolver(function resolvePromise(value) {\n                resolve(promise, value);\n              }, function rejectPromise(reason) {\n                reject(promise, reason);\n              });\n            } catch (e) {\n              reject(promise, e);\n            }\n          }\n          var id = 0;\n          function nextId() {\n            return id++;\n          }\n          function makePromise(promise) {\n            promise[PROMISE_ID] = id++;\n            promise._state = undefined;\n            promise._result = undefined;\n            promise._subscribers = [];\n          }\n          function validationError() {\n            return new Error('Array Methods must be provided an Array');\n          }\n          var Enumerator = function() {\n            function Enumerator(Constructor, input) {\n              this._instanceConstructor = Constructor;\n              this.promise = new Constructor(noop);\n              if (!this.promise[PROMISE_ID]) {\n                makePromise(this.promise);\n              }\n              if (isArray(input)) {\n                this.length = input.length;\n                this._remaining = input.length;\n                this._result = new Array(this.length);\n                if (this.length === 0) {\n                  fulfill(this.promise, this._result);\n                } else {\n                  this.length = this.length || 0;\n                  this._enumerate(input);\n                  if (this._remaining === 0) {\n                    fulfill(this.promise, this._result);\n                  }\n                }\n              } else {\n                reject(this.promise, validationError());\n              }\n            }\n            Enumerator.prototype._enumerate = function _enumerate(input) {\n              for (var i = 0; this._state === PENDING && i < input.length; i++) {\n                this._eachEntry(input[i], i);\n              }\n            };\n            Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n              var c = this._instanceConstructor;\n              var resolve$$1 = c.resolve;\n              if (resolve$$1 === resolve$1) {\n                var _then = void 0;\n                var error = void 0;\n                var didError = false;\n                try {\n                  _then = entry.then;\n                } catch (e) {\n                  didError = true;\n                  error = e;\n                }\n                if (_then === then && entry._state !== PENDING) {\n                  this._settledAt(entry._state, i, entry._result);\n                } else if (typeof _then !== 'function') {\n                  this._remaining--;\n                  this._result[i] = entry;\n                } else if (c === Promise$1) {\n                  var promise = new c(noop);\n                  if (didError) {\n                    reject(promise, error);\n                  } else {\n                    handleMaybeThenable(promise, entry, _then);\n                  }\n                  this._willSettleAt(promise, i);\n                } else {\n                  this._willSettleAt(new c(function(resolve$$1) {\n                    return resolve$$1(entry);\n                  }), i);\n                }\n              } else {\n                this._willSettleAt(resolve$$1(entry), i);\n              }\n            };\n            Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n              var promise = this.promise;\n              if (promise._state === PENDING) {\n                this._remaining--;\n                if (state === REJECTED) {\n                  reject(promise, value);\n                } else {\n                  this._result[i] = value;\n                }\n              }\n              if (this._remaining === 0) {\n                fulfill(promise, this._result);\n              }\n            };\n            Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n              var enumerator = this;\n              subscribe(promise, undefined, function(value) {\n                return enumerator._settledAt(FULFILLED, i, value);\n              }, function(reason) {\n                return enumerator._settledAt(REJECTED, i, reason);\n              });\n            };\n            return Enumerator;\n          }();\n          function all(entries) {\n            return new Enumerator(this, entries).promise;\n          }\n          function race(entries) {\n            var Constructor = this;\n            if (!isArray(entries)) {\n              return new Constructor(function(_, reject) {\n                return reject(new TypeError('You must pass an array to race.'));\n              });\n            } else {\n              return new Constructor(function(resolve, reject) {\n                var length = entries.length;\n                for (var i = 0; i < length; i++) {\n                  Constructor.resolve(entries[i]).then(resolve, reject);\n                }\n              });\n            }\n          }\n          function reject$1(reason) {\n            var Constructor = this;\n            var promise = new Constructor(noop);\n            reject(promise, reason);\n            return promise;\n          }\n          function needsResolver() {\n            throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n          }\n          function needsNew() {\n            throw new TypeError('Failed to construct \\'Promise\\': Please use the \\'new\\' operator, this object constructor cannot be called as a function.');\n          }\n          var Promise$1 = function() {\n            function Promise(resolver) {\n              this[PROMISE_ID] = nextId();\n              this._result = this._state = undefined;\n              this._subscribers = [];\n              if (noop !== resolver) {\n                typeof resolver !== 'function' && needsResolver();\n                this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n              }\n            }\n            Promise.prototype.catch = function _catch(onRejection) {\n              return this.then(null, onRejection);\n            };\n            Promise.prototype.finally = function _finally(callback) {\n              var promise = this;\n              var constructor = promise.constructor;\n              if (isFunction(callback)) {\n                return promise.then(function(value) {\n                  return constructor.resolve(callback()).then(function() {\n                    return value;\n                  });\n                }, function(reason) {\n                  return constructor.resolve(callback()).then(function() {\n                    throw reason;\n                  });\n                });\n              }\n              return promise.then(callback, callback);\n            };\n            return Promise;\n          }();\n          Promise$1.prototype.then = then;\n          Promise$1.all = all;\n          Promise$1.race = race;\n          Promise$1.resolve = resolve$1;\n          Promise$1.reject = reject$1;\n          Promise$1._setScheduler = setScheduler;\n          Promise$1._setAsap = setAsap;\n          Promise$1._asap = asap;\n          function polyfill() {\n            var local = void 0;\n            if (typeof global !== 'undefined') {\n              local = global;\n            } else if (typeof self !== 'undefined') {\n              local = self;\n            } else {\n              try {\n                local = Function('return this')();\n              } catch (e) {\n                throw new Error('polyfill failed because global object is unavailable in this environment');\n              }\n            }\n            var P = local.Promise;\n            if (P) {\n              var promiseToString = null;\n              try {\n                promiseToString = Object.prototype.toString.call(P.resolve());\n              } catch (e) {}\n              if (promiseToString === '[object Promise]' && !P.cast) {\n                return;\n              }\n            }\n            local.Promise = Promise$1;\n          }\n          Promise$1.polyfill = polyfill;\n          Promise$1.Promise = Promise$1;\n          return Promise$1;\n        });\n      }).call(this, _dereq_('_process'), typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\n    }, {\n      _process: 236\n    } ],\n    203: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? _dereq_('ext/global-this').Symbol : _dereq_('./polyfill');\n    }, {\n      './is-implemented': 204,\n      './polyfill': 209,\n      'ext/global-this': 213\n    } ],\n    204: [ function(_dereq_, module, exports) {\n      'use strict';\n      var global = _dereq_('ext/global-this'), validTypes = {\n        object: true,\n        symbol: true\n      };\n      module.exports = function() {\n        var Symbol = global.Symbol;\n        var symbol;\n        if (typeof Symbol !== 'function') {\n          return false;\n        }\n        symbol = Symbol('test symbol');\n        try {\n          String(symbol);\n        } catch (e) {\n          return false;\n        }\n        if (!validTypes[typeof Symbol.iterator]) {\n          return false;\n        }\n        if (!validTypes[typeof Symbol.toPrimitive]) {\n          return false;\n        }\n        if (!validTypes[typeof Symbol.toStringTag]) {\n          return false;\n        }\n        return true;\n      };\n    }, {\n      'ext/global-this': 213\n    } ],\n    205: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(value) {\n        if (!value) {\n          return false;\n        }\n        if (typeof value === 'symbol') {\n          return true;\n        }\n        if (!value.constructor) {\n          return false;\n        }\n        if (value.constructor.name !== 'Symbol') {\n          return false;\n        }\n        return value[value.constructor.toStringTag] === 'Symbol';\n      };\n    }, {} ],\n    206: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d');\n      var create = Object.create, defineProperty = Object.defineProperty, objPrototype = Object.prototype;\n      var created = create(null);\n      module.exports = function(desc) {\n        var postfix = 0, name, ie11BugWorkaround;\n        while (created[desc + (postfix || '')]) {\n          ++postfix;\n        }\n        desc += postfix || '';\n        created[desc] = true;\n        name = '@@' + desc;\n        defineProperty(objPrototype, name, d.gs(null, function(value) {\n          if (ie11BugWorkaround) {\n            return;\n          }\n          ie11BugWorkaround = true;\n          defineProperty(this, name, d(value));\n          ie11BugWorkaround = false;\n        }));\n        return name;\n      };\n    }, {\n      d: 157\n    } ],\n    207: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d'), NativeSymbol = _dereq_('ext/global-this').Symbol;\n      module.exports = function(SymbolPolyfill) {\n        return Object.defineProperties(SymbolPolyfill, {\n          hasInstance: d('', NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill('hasInstance')),\n          isConcatSpreadable: d('', NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill('isConcatSpreadable')),\n          iterator: d('', NativeSymbol && NativeSymbol.iterator || SymbolPolyfill('iterator')),\n          match: d('', NativeSymbol && NativeSymbol.match || SymbolPolyfill('match')),\n          replace: d('', NativeSymbol && NativeSymbol.replace || SymbolPolyfill('replace')),\n          search: d('', NativeSymbol && NativeSymbol.search || SymbolPolyfill('search')),\n          species: d('', NativeSymbol && NativeSymbol.species || SymbolPolyfill('species')),\n          split: d('', NativeSymbol && NativeSymbol.split || SymbolPolyfill('split')),\n          toPrimitive: d('', NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill('toPrimitive')),\n          toStringTag: d('', NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill('toStringTag')),\n          unscopables: d('', NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill('unscopables'))\n        });\n      };\n    }, {\n      d: 157,\n      'ext/global-this': 213\n    } ],\n    208: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d'), validateSymbol = _dereq_('../../../validate-symbol');\n      var registry = Object.create(null);\n      module.exports = function(SymbolPolyfill) {\n        return Object.defineProperties(SymbolPolyfill, {\n          for: d(function(key) {\n            if (registry[key]) {\n              return registry[key];\n            }\n            return registry[key] = SymbolPolyfill(String(key));\n          }),\n          keyFor: d(function(symbol) {\n            var key;\n            validateSymbol(symbol);\n            for (key in registry) {\n              if (registry[key] === symbol) {\n                return key;\n              }\n            }\n            return undefined;\n          })\n        });\n      };\n    }, {\n      '../../../validate-symbol': 210,\n      d: 157\n    } ],\n    209: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d'), validateSymbol = _dereq_('./validate-symbol'), NativeSymbol = _dereq_('ext/global-this').Symbol, generateName = _dereq_('./lib/private/generate-name'), setupStandardSymbols = _dereq_('./lib/private/setup/standard-symbols'), setupSymbolRegistry = _dereq_('./lib/private/setup/symbol-registry');\n      var create = Object.create, defineProperties = Object.defineProperties, defineProperty = Object.defineProperty;\n      var SymbolPolyfill, HiddenSymbol, isNativeSafe;\n      if (typeof NativeSymbol === 'function') {\n        try {\n          String(NativeSymbol());\n          isNativeSafe = true;\n        } catch (ignore) {}\n      } else {\n        NativeSymbol = null;\n      }\n      HiddenSymbol = function Symbol(description) {\n        if (this instanceof HiddenSymbol) {\n          throw new TypeError('Symbol is not a constructor');\n        }\n        return SymbolPolyfill(description);\n      };\n      module.exports = SymbolPolyfill = function Symbol(description) {\n        var symbol;\n        if (this instanceof Symbol) {\n          throw new TypeError('Symbol is not a constructor');\n        }\n        if (isNativeSafe) {\n          return NativeSymbol(description);\n        }\n        symbol = create(HiddenSymbol.prototype);\n        description = description === undefined ? '' : String(description);\n        return defineProperties(symbol, {\n          __description__: d('', description),\n          __name__: d('', generateName(description))\n        });\n      };\n      setupStandardSymbols(SymbolPolyfill);\n      setupSymbolRegistry(SymbolPolyfill);\n      defineProperties(HiddenSymbol.prototype, {\n        constructor: d(SymbolPolyfill),\n        toString: d('', function() {\n          return this.__name__;\n        })\n      });\n      defineProperties(SymbolPolyfill.prototype, {\n        toString: d(function() {\n          return 'Symbol (' + validateSymbol(this).__description__ + ')';\n        }),\n        valueOf: d(function() {\n          return validateSymbol(this);\n        })\n      });\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function() {\n        var symbol = validateSymbol(this);\n        if (typeof symbol === 'symbol') {\n          return symbol;\n        }\n        return symbol.toString();\n      }));\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));\n    }, {\n      './lib/private/generate-name': 206,\n      './lib/private/setup/standard-symbols': 207,\n      './lib/private/setup/symbol-registry': 208,\n      './validate-symbol': 210,\n      d: 157,\n      'ext/global-this': 213\n    } ],\n    210: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isSymbol = _dereq_('./is-symbol');\n      module.exports = function(value) {\n        if (!isSymbol(value)) {\n          throw new TypeError(value + ' is not a symbol');\n        }\n        return value;\n      };\n    }, {\n      './is-symbol': 205\n    } ],\n    211: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d'), callable = _dereq_('es5-ext/object/valid-callable'), apply = Function.prototype.apply, call = Function.prototype.call, create = Object.create, defineProperty = Object.defineProperty, defineProperties = Object.defineProperties, hasOwnProperty = Object.prototype.hasOwnProperty, descriptor = {\n        configurable: true,\n        enumerable: false,\n        writable: true\n      }, on, once, off, emit, methods, descriptors, base;\n      on = function(type, listener) {\n        var data;\n        callable(listener);\n        if (!hasOwnProperty.call(this, '__ee__')) {\n          data = descriptor.value = create(null);\n          defineProperty(this, '__ee__', descriptor);\n          descriptor.value = null;\n        } else {\n          data = this.__ee__;\n        }\n        if (!data[type]) {\n          data[type] = listener;\n        } else if (typeof data[type] === 'object') {\n          data[type].push(listener);\n        } else {\n          data[type] = [ data[type], listener ];\n        }\n        return this;\n      };\n      once = function(type, listener) {\n        var once, self;\n        callable(listener);\n        self = this;\n        on.call(this, type, once = function() {\n          off.call(self, type, once);\n          apply.call(listener, this, arguments);\n        });\n        once.__eeOnceListener__ = listener;\n        return this;\n      };\n      off = function(type, listener) {\n        var data, listeners, candidate, i;\n        callable(listener);\n        if (!hasOwnProperty.call(this, '__ee__')) {\n          return this;\n        }\n        data = this.__ee__;\n        if (!data[type]) {\n          return this;\n        }\n        listeners = data[type];\n        if (typeof listeners === 'object') {\n          for (i = 0; candidate = listeners[i]; ++i) {\n            if (candidate === listener || candidate.__eeOnceListener__ === listener) {\n              if (listeners.length === 2) {\n                data[type] = listeners[i ? 0 : 1];\n              } else {\n                listeners.splice(i, 1);\n              }\n            }\n          }\n        } else {\n          if (listeners === listener || listeners.__eeOnceListener__ === listener) {\n            delete data[type];\n          }\n        }\n        return this;\n      };\n      emit = function(type) {\n        var i, l, listener, listeners, args;\n        if (!hasOwnProperty.call(this, '__ee__')) {\n          return;\n        }\n        listeners = this.__ee__[type];\n        if (!listeners) {\n          return;\n        }\n        if (typeof listeners === 'object') {\n          l = arguments.length;\n          args = new Array(l - 1);\n          for (i = 1; i < l; ++i) {\n            args[i - 1] = arguments[i];\n          }\n          listeners = listeners.slice();\n          for (i = 0; listener = listeners[i]; ++i) {\n            apply.call(listener, this, args);\n          }\n        } else {\n          switch (arguments.length) {\n           case 1:\n            call.call(listeners, this);\n            break;\n\n           case 2:\n            call.call(listeners, this, arguments[1]);\n            break;\n\n           case 3:\n            call.call(listeners, this, arguments[1], arguments[2]);\n            break;\n\n           default:\n            l = arguments.length;\n            args = new Array(l - 1);\n            for (i = 1; i < l; ++i) {\n              args[i - 1] = arguments[i];\n            }\n            apply.call(listeners, this, args);\n          }\n        }\n      };\n      methods = {\n        on: on,\n        once: once,\n        off: off,\n        emit: emit\n      };\n      descriptors = {\n        on: d(on),\n        once: d(once),\n        off: d(off),\n        emit: d(emit)\n      };\n      base = defineProperties({}, descriptors);\n      module.exports = exports = function(o) {\n        return o == null ? create(base) : defineProperties(Object(o), descriptors);\n      };\n      exports.methods = methods;\n    }, {\n      d: 157,\n      'es5-ext/object/valid-callable': 192\n    } ],\n    212: [ function(_dereq_, module, exports) {\n      var naiveFallback = function() {\n        if (typeof self === 'object' && self) {\n          return self;\n        }\n        if (typeof window === 'object' && window) {\n          return window;\n        }\n        throw new Error('Unable to resolve global `this`');\n      };\n      module.exports = function() {\n        if (this) {\n          return this;\n        }\n        try {\n          Object.defineProperty(Object.prototype, '__global__', {\n            get: function() {\n              return this;\n            },\n            configurable: true\n          });\n        } catch (error) {\n          return naiveFallback();\n        }\n        try {\n          if (!__global__) {\n            return naiveFallback();\n          }\n          return __global__;\n        } finally {\n          delete Object.prototype.__global__;\n        }\n      }();\n    }, {} ],\n    213: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = _dereq_('./is-implemented')() ? globalThis : _dereq_('./implementation');\n    }, {\n      './implementation': 212,\n      './is-implemented': 214\n    } ],\n    214: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function() {\n        if (typeof globalThis !== 'object') {\n          return false;\n        }\n        if (!globalThis) {\n          return false;\n        }\n        return globalThis.Array === Array;\n      };\n    }, {} ],\n    215: [ function(_dereq_, module, exports) {\n      module.exports = isPromise;\n      function isPromise(obj) {\n        return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n      }\n    }, {} ],\n    216: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toPosInt = _dereq_('es5-ext/number/to-pos-integer'), create = Object.create, hasOwnProperty = Object.prototype.hasOwnProperty;\n      module.exports = function(limit) {\n        var size = 0, base = 1, queue = create(null), map = create(null), index = 0, del;\n        limit = toPosInt(limit);\n        return {\n          hit: function(id) {\n            var oldIndex = map[id], nuIndex = ++index;\n            queue[nuIndex] = id;\n            map[id] = nuIndex;\n            if (!oldIndex) {\n              ++size;\n              if (size <= limit) {\n                return;\n              }\n              id = queue[base];\n              del(id);\n              return id;\n            }\n            delete queue[oldIndex];\n            if (base !== oldIndex) {\n              return;\n            }\n            while (!hasOwnProperty.call(queue, ++base)) {\n              continue;\n            }\n          },\n          delete: del = function(id) {\n            var oldIndex = map[id];\n            if (!oldIndex) {\n              return;\n            }\n            delete queue[oldIndex];\n            delete map[id];\n            --size;\n            if (base !== oldIndex) {\n              return;\n            }\n            if (!size) {\n              index = 0;\n              base = 1;\n              return;\n            }\n            while (!hasOwnProperty.call(queue, ++base)) {\n              continue;\n            }\n          },\n          clear: function() {\n            size = 0;\n            base = 1;\n            queue = create(null);\n            map = create(null);\n            index = 0;\n          }\n        };\n      };\n    }, {\n      'es5-ext/number/to-pos-integer': 176\n    } ],\n    217: [ function(_dereq_, module, exports) {\n      'use strict';\n      var aFrom = _dereq_('es5-ext/array/from'), objectMap = _dereq_('es5-ext/object/map'), mixin = _dereq_('es5-ext/object/mixin'), defineLength = _dereq_('es5-ext/function/_define-length'), nextTick = _dereq_('next-tick');\n      var slice = Array.prototype.slice, apply = Function.prototype.apply, create = Object.create;\n      _dereq_('../lib/registered-extensions').async = function(tbi, conf) {\n        var waiting = create(null), cache = create(null), base = conf.memoized, original = conf.original, currentCallback, currentContext, currentArgs;\n        conf.memoized = defineLength(function(arg) {\n          var args = arguments, last = args[args.length - 1];\n          if (typeof last === 'function') {\n            currentCallback = last;\n            args = slice.call(args, 0, -1);\n          }\n          return base.apply(currentContext = this, currentArgs = args);\n        }, base);\n        try {\n          mixin(conf.memoized, base);\n        } catch (ignore) {}\n        conf.on('get', function(id) {\n          var cb, context, args;\n          if (!currentCallback) {\n            return;\n          }\n          if (waiting[id]) {\n            if (typeof waiting[id] === 'function') {\n              waiting[id] = [ waiting[id], currentCallback ];\n            } else {\n              waiting[id].push(currentCallback);\n            }\n            currentCallback = null;\n            return;\n          }\n          cb = currentCallback;\n          context = currentContext;\n          args = currentArgs;\n          currentCallback = currentContext = currentArgs = null;\n          nextTick(function() {\n            var data;\n            if (hasOwnProperty.call(cache, id)) {\n              data = cache[id];\n              conf.emit('getasync', id, args, context);\n              apply.call(cb, data.context, data.args);\n            } else {\n              currentCallback = cb;\n              currentContext = context;\n              currentArgs = args;\n              base.apply(context, args);\n            }\n          });\n        });\n        conf.original = function() {\n          var args, cb, origCb, result;\n          if (!currentCallback) {\n            return apply.call(original, this, arguments);\n          }\n          args = aFrom(arguments);\n          cb = function self(err) {\n            var cb, args, id = self.id;\n            if (id == null) {\n              nextTick(apply.bind(self, this, arguments));\n              return undefined;\n            }\n            delete self.id;\n            cb = waiting[id];\n            delete waiting[id];\n            if (!cb) {\n              return undefined;\n            }\n            args = aFrom(arguments);\n            if (conf.has(id)) {\n              if (err) {\n                conf.delete(id);\n              } else {\n                cache[id] = {\n                  context: this,\n                  args: args\n                };\n                conf.emit('setasync', id, typeof cb === 'function' ? 1 : cb.length);\n              }\n            }\n            if (typeof cb === 'function') {\n              result = apply.call(cb, this, args);\n            } else {\n              cb.forEach(function(cb) {\n                result = apply.call(cb, this, args);\n              }, this);\n            }\n            return result;\n          };\n          origCb = currentCallback;\n          currentCallback = currentContext = currentArgs = null;\n          args.push(cb);\n          result = apply.call(original, this, args);\n          cb.cb = origCb;\n          currentCallback = cb;\n          return result;\n        };\n        conf.on('set', function(id) {\n          if (!currentCallback) {\n            conf.delete(id);\n            return;\n          }\n          if (waiting[id]) {\n            if (typeof waiting[id] === 'function') {\n              waiting[id] = [ waiting[id], currentCallback.cb ];\n            } else {\n              waiting[id].push(currentCallback.cb);\n            }\n          } else {\n            waiting[id] = currentCallback.cb;\n          }\n          delete currentCallback.cb;\n          currentCallback.id = id;\n          currentCallback = null;\n        });\n        conf.on('delete', function(id) {\n          var result;\n          if (hasOwnProperty.call(waiting, id)) {\n            return;\n          }\n          if (!cache[id]) {\n            return;\n          }\n          result = cache[id];\n          delete cache[id];\n          conf.emit('deleteasync', id, slice.call(result.args, 1));\n        });\n        conf.on('clear', function() {\n          var oldCache = cache;\n          cache = create(null);\n          conf.emit('clearasync', objectMap(oldCache, function(data) {\n            return slice.call(data.args, 1);\n          }));\n        });\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      'es5-ext/array/from': 160,\n      'es5-ext/function/_define-length': 165,\n      'es5-ext/object/map': 188,\n      'es5-ext/object/mixin': 189,\n      'next-tick': 235\n    } ],\n    218: [ function(_dereq_, module, exports) {\n      'use strict';\n      var callable = _dereq_('es5-ext/object/valid-callable'), forEach = _dereq_('es5-ext/object/for-each'), extensions = _dereq_('../lib/registered-extensions'), apply = Function.prototype.apply;\n      extensions.dispose = function(dispose, conf, options) {\n        var del;\n        callable(dispose);\n        if (options.async && extensions.async || options.promise && extensions.promise) {\n          conf.on('deleteasync', del = function(id, resultArray) {\n            apply.call(dispose, null, resultArray);\n          });\n          conf.on('clearasync', function(cache) {\n            forEach(cache, function(result, id) {\n              del(id, result);\n            });\n          });\n          return;\n        }\n        conf.on('delete', del = function(id, result) {\n          dispose(result);\n        });\n        conf.on('clear', function(cache) {\n          forEach(cache, function(result, id) {\n            del(id, result);\n          });\n        });\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      'es5-ext/object/for-each': 181,\n      'es5-ext/object/valid-callable': 192\n    } ],\n    219: [ function(_dereq_, module, exports) {\n      'use strict';\n      var aFrom = _dereq_('es5-ext/array/from'), forEach = _dereq_('es5-ext/object/for-each'), nextTick = _dereq_('next-tick'), isPromise = _dereq_('is-promise'), timeout = _dereq_('timers-ext/valid-timeout'), extensions = _dereq_('../lib/registered-extensions');\n      var noop = Function.prototype, max = Math.max, min = Math.min, create = Object.create;\n      extensions.maxAge = function(maxAge, conf, options) {\n        var timeouts, postfix, preFetchAge, preFetchTimeouts;\n        maxAge = timeout(maxAge);\n        if (!maxAge) {\n          return;\n        }\n        timeouts = create(null);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, function(id) {\n          timeouts[id] = setTimeout(function() {\n            conf.delete(id);\n          }, maxAge);\n          if (typeof timeouts[id].unref === 'function') {\n            timeouts[id].unref();\n          }\n          if (!preFetchTimeouts) {\n            return;\n          }\n          if (preFetchTimeouts[id]) {\n            if (preFetchTimeouts[id] !== 'nextTick') {\n              clearTimeout(preFetchTimeouts[id]);\n            }\n          }\n          preFetchTimeouts[id] = setTimeout(function() {\n            delete preFetchTimeouts[id];\n          }, preFetchAge);\n          if (typeof preFetchTimeouts[id].unref === 'function') {\n            preFetchTimeouts[id].unref();\n          }\n        });\n        conf.on('delete' + postfix, function(id) {\n          clearTimeout(timeouts[id]);\n          delete timeouts[id];\n          if (!preFetchTimeouts) {\n            return;\n          }\n          if (preFetchTimeouts[id] !== 'nextTick') {\n            clearTimeout(preFetchTimeouts[id]);\n          }\n          delete preFetchTimeouts[id];\n        });\n        if (options.preFetch) {\n          if (options.preFetch === true || isNaN(options.preFetch)) {\n            preFetchAge = .333;\n          } else {\n            preFetchAge = max(min(Number(options.preFetch), 1), 0);\n          }\n          if (preFetchAge) {\n            preFetchTimeouts = {};\n            preFetchAge = (1 - preFetchAge) * maxAge;\n            conf.on('get' + postfix, function(id, args, context) {\n              if (!preFetchTimeouts[id]) {\n                preFetchTimeouts[id] = 'nextTick';\n                nextTick(function() {\n                  var result;\n                  if (preFetchTimeouts[id] !== 'nextTick') {\n                    return;\n                  }\n                  delete preFetchTimeouts[id];\n                  conf.delete(id);\n                  if (options.async) {\n                    args = aFrom(args);\n                    args.push(noop);\n                  }\n                  result = conf.memoized.apply(context, args);\n                  if (options.promise) {\n                    if (isPromise(result)) {\n                      if (typeof result.done === 'function') {\n                        result.done(noop, noop);\n                      } else {\n                        result.then(noop, noop);\n                      }\n                    }\n                  }\n                });\n              }\n            });\n          }\n        }\n        conf.on('clear' + postfix, function() {\n          forEach(timeouts, function(id) {\n            clearTimeout(id);\n          });\n          timeouts = {};\n          if (preFetchTimeouts) {\n            forEach(preFetchTimeouts, function(id) {\n              if (id !== 'nextTick') {\n                clearTimeout(id);\n              }\n            });\n            preFetchTimeouts = {};\n          }\n        });\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      'es5-ext/array/from': 160,\n      'es5-ext/object/for-each': 181,\n      'is-promise': 215,\n      'next-tick': 235,\n      'timers-ext/valid-timeout': 239\n    } ],\n    220: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toPosInteger = _dereq_('es5-ext/number/to-pos-integer'), lruQueue = _dereq_('lru-queue'), extensions = _dereq_('../lib/registered-extensions');\n      extensions.max = function(max, conf, options) {\n        var postfix, queue, hit;\n        max = toPosInteger(max);\n        if (!max) {\n          return;\n        }\n        queue = lruQueue(max);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, hit = function(id) {\n          id = queue.hit(id);\n          if (id === undefined) {\n            return;\n          }\n          conf.delete(id);\n        });\n        conf.on('get' + postfix, hit);\n        conf.on('delete' + postfix, queue.delete);\n        conf.on('clear' + postfix, queue.clear);\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      'es5-ext/number/to-pos-integer': 176,\n      'lru-queue': 216\n    } ],\n    221: [ function(_dereq_, module, exports) {\n      'use strict';\n      var objectMap = _dereq_('es5-ext/object/map'), primitiveSet = _dereq_('es5-ext/object/primitive-set'), ensureString = _dereq_('es5-ext/object/validate-stringifiable-value'), toShortString = _dereq_('es5-ext/to-short-string-representation'), isPromise = _dereq_('is-promise'), nextTick = _dereq_('next-tick');\n      var create = Object.create, supportedModes = primitiveSet('then', 'then:finally', 'done', 'done:finally');\n      _dereq_('../lib/registered-extensions').promise = function(mode, conf) {\n        var waiting = create(null), cache = create(null), promises = create(null);\n        if (mode === true) {\n          mode = null;\n        } else {\n          mode = ensureString(mode);\n          if (!supportedModes[mode]) {\n            throw new TypeError('\\'' + toShortString(mode) + '\\' is not valid promise mode');\n          }\n        }\n        conf.on('set', function(id, ignore, promise) {\n          var isFailed = false;\n          if (!isPromise(promise)) {\n            cache[id] = promise;\n            conf.emit('setasync', id, 1);\n            return;\n          }\n          waiting[id] = 1;\n          promises[id] = promise;\n          var onSuccess = function(result) {\n            var count = waiting[id];\n            if (isFailed) {\n              throw new Error('Memoizee error: Detected unordered then|done & finally resolution, which ' + 'in turn makes proper detection of success/failure impossible (when in ' + '\\'done:finally\\' mode)\\n' + 'Consider to rely on \\'then\\' or \\'done\\' mode instead.');\n            }\n            if (!count) {\n              return;\n            }\n            delete waiting[id];\n            cache[id] = result;\n            conf.emit('setasync', id, count);\n          };\n          var onFailure = function() {\n            isFailed = true;\n            if (!waiting[id]) {\n              return;\n            }\n            delete waiting[id];\n            delete promises[id];\n            conf.delete(id);\n          };\n          var resolvedMode = mode;\n          if (!resolvedMode) {\n            resolvedMode = 'then';\n          }\n          if (resolvedMode === 'then') {\n            var nextTickFailure = function() {\n              nextTick(onFailure);\n            };\n            promise = promise.then(function(result) {\n              nextTick(onSuccess.bind(this, result));\n            }, nextTickFailure);\n            if (typeof promise.finally === 'function') {\n              promise.finally(nextTickFailure);\n            }\n          } else if (resolvedMode === 'done') {\n            if (typeof promise.done !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'done\\' ' + 'in \\'done\\' mode');\n            }\n            promise.done(onSuccess, onFailure);\n          } else if (resolvedMode === 'done:finally') {\n            if (typeof promise.done !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'done\\' ' + 'in \\'done:finally\\' mode');\n            }\n            if (typeof promise.finally !== 'function') {\n              throw new Error('Memoizee error: Retrieved promise does not implement \\'finally\\' ' + 'in \\'done:finally\\' mode');\n            }\n            promise.done(onSuccess);\n            promise.finally(onFailure);\n          }\n        });\n        conf.on('get', function(id, args, context) {\n          var promise;\n          if (waiting[id]) {\n            ++waiting[id];\n            return;\n          }\n          promise = promises[id];\n          var emit = function() {\n            conf.emit('getasync', id, args, context);\n          };\n          if (isPromise(promise)) {\n            if (typeof promise.done === 'function') {\n              promise.done(emit);\n            } else {\n              promise.then(function() {\n                nextTick(emit);\n              });\n            }\n          } else {\n            emit();\n          }\n        });\n        conf.on('delete', function(id) {\n          delete promises[id];\n          if (waiting[id]) {\n            delete waiting[id];\n            return;\n          }\n          if (!hasOwnProperty.call(cache, id)) {\n            return;\n          }\n          var result = cache[id];\n          delete cache[id];\n          conf.emit('deleteasync', id, [ result ]);\n        });\n        conf.on('clear', function() {\n          var oldCache = cache;\n          cache = create(null);\n          waiting = create(null);\n          promises = create(null);\n          conf.emit('clearasync', objectMap(oldCache, function(data) {\n            return [ data ];\n          }));\n        });\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      'es5-ext/object/map': 188,\n      'es5-ext/object/primitive-set': 191,\n      'es5-ext/object/validate-stringifiable-value': 194,\n      'es5-ext/to-short-string-representation': 201,\n      'is-promise': 215,\n      'next-tick': 235\n    } ],\n    222: [ function(_dereq_, module, exports) {\n      'use strict';\n      var d = _dereq_('d'), extensions = _dereq_('../lib/registered-extensions'), create = Object.create, defineProperties = Object.defineProperties;\n      extensions.refCounter = function(ignore, conf, options) {\n        var cache, postfix;\n        cache = create(null);\n        postfix = options.async && extensions.async || options.promise && extensions.promise ? 'async' : '';\n        conf.on('set' + postfix, function(id, length) {\n          cache[id] = length || 1;\n        });\n        conf.on('get' + postfix, function(id) {\n          ++cache[id];\n        });\n        conf.on('delete' + postfix, function(id) {\n          delete cache[id];\n        });\n        conf.on('clear' + postfix, function() {\n          cache = {};\n        });\n        defineProperties(conf.memoized, {\n          deleteRef: d(function() {\n            var id = conf.get(arguments);\n            if (id === null) {\n              return null;\n            }\n            if (!cache[id]) {\n              return null;\n            }\n            if (!--cache[id]) {\n              conf.delete(id);\n              return true;\n            }\n            return false;\n          }),\n          getRefCount: d(function() {\n            var id = conf.get(arguments);\n            if (id === null) {\n              return 0;\n            }\n            if (!cache[id]) {\n              return 0;\n            }\n            return cache[id];\n          })\n        });\n      };\n    }, {\n      '../lib/registered-extensions': 225,\n      d: 157\n    } ],\n    223: [ function(_dereq_, module, exports) {\n      'use strict';\n      var normalizeOpts = _dereq_('es5-ext/object/normalize-options'), resolveLength = _dereq_('./lib/resolve-length'), plain = _dereq_('./plain');\n      module.exports = function(fn) {\n        var options = normalizeOpts(arguments[1]), length;\n        if (!options.normalizer) {\n          length = options.length = resolveLength(options.length, fn.length, options.async);\n          if (length !== 0) {\n            if (options.primitive) {\n              if (length === false) {\n                options.normalizer = _dereq_('./normalizers/primitive');\n              } else if (length > 1) {\n                options.normalizer = _dereq_('./normalizers/get-primitive-fixed')(length);\n              }\n            } else if (length === false) {\n              options.normalizer = _dereq_('./normalizers/get')();\n            } else if (length === 1) {\n              options.normalizer = _dereq_('./normalizers/get-1')();\n            } else {\n              options.normalizer = _dereq_('./normalizers/get-fixed')(length);\n            }\n          }\n        }\n        if (options.async) {\n          _dereq_('./ext/async');\n        }\n        if (options.promise) {\n          _dereq_('./ext/promise');\n        }\n        if (options.dispose) {\n          _dereq_('./ext/dispose');\n        }\n        if (options.maxAge) {\n          _dereq_('./ext/max-age');\n        }\n        if (options.max) {\n          _dereq_('./ext/max');\n        }\n        if (options.refCounter) {\n          _dereq_('./ext/ref-counter');\n        }\n        return plain(fn, options);\n      };\n    }, {\n      './ext/async': 217,\n      './ext/dispose': 218,\n      './ext/max': 220,\n      './ext/max-age': 219,\n      './ext/promise': 221,\n      './ext/ref-counter': 222,\n      './lib/resolve-length': 226,\n      './normalizers/get': 232,\n      './normalizers/get-1': 229,\n      './normalizers/get-fixed': 230,\n      './normalizers/get-primitive-fixed': 231,\n      './normalizers/primitive': 233,\n      './plain': 234,\n      'es5-ext/object/normalize-options': 190\n    } ],\n    224: [ function(_dereq_, module, exports) {\n      'use strict';\n      var customError = _dereq_('es5-ext/error/custom'), defineLength = _dereq_('es5-ext/function/_define-length'), d = _dereq_('d'), ee = _dereq_('event-emitter').methods, resolveResolve = _dereq_('./resolve-resolve'), resolveNormalize = _dereq_('./resolve-normalize');\n      var apply = Function.prototype.apply, call = Function.prototype.call, create = Object.create, defineProperties = Object.defineProperties, on = ee.on, emit = ee.emit;\n      module.exports = function(original, length, options) {\n        var cache = create(null), conf, memLength, get, set, del, clear, extDel, extGet, extHas, normalizer, getListeners, setListeners, deleteListeners, memoized, resolve;\n        if (length !== false) {\n          memLength = length;\n        } else if (isNaN(original.length)) {\n          memLength = 1;\n        } else {\n          memLength = original.length;\n        }\n        if (options.normalizer) {\n          normalizer = resolveNormalize(options.normalizer);\n          get = normalizer.get;\n          set = normalizer.set;\n          del = normalizer.delete;\n          clear = normalizer.clear;\n        }\n        if (options.resolvers != null) {\n          resolve = resolveResolve(options.resolvers);\n        }\n        if (get) {\n          memoized = defineLength(function(arg) {\n            var id, result, args = arguments;\n            if (resolve) {\n              args = resolve(args);\n            }\n            id = get(args);\n            if (id !== null) {\n              if (hasOwnProperty.call(cache, id)) {\n                if (getListeners) {\n                  conf.emit('get', id, args, this);\n                }\n                return cache[id];\n              }\n            }\n            if (args.length === 1) {\n              result = call.call(original, this, args[0]);\n            } else {\n              result = apply.call(original, this, args);\n            }\n            if (id === null) {\n              id = get(args);\n              if (id !== null) {\n                throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n              }\n              id = set(args);\n            } else if (hasOwnProperty.call(cache, id)) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache[id] = result;\n            if (setListeners) {\n              conf.emit('set', id, null, result);\n            }\n            return result;\n          }, memLength);\n        } else if (length === 0) {\n          memoized = function() {\n            var result;\n            if (hasOwnProperty.call(cache, 'data')) {\n              if (getListeners) {\n                conf.emit('get', 'data', arguments, this);\n              }\n              return cache.data;\n            }\n            if (arguments.length) {\n              result = apply.call(original, this, arguments);\n            } else {\n              result = call.call(original, this);\n            }\n            if (hasOwnProperty.call(cache, 'data')) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache.data = result;\n            if (setListeners) {\n              conf.emit('set', 'data', null, result);\n            }\n            return result;\n          };\n        } else {\n          memoized = function(arg) {\n            var result, args = arguments, id;\n            if (resolve) {\n              args = resolve(arguments);\n            }\n            id = String(args[0]);\n            if (hasOwnProperty.call(cache, id)) {\n              if (getListeners) {\n                conf.emit('get', id, args, this);\n              }\n              return cache[id];\n            }\n            if (args.length === 1) {\n              result = call.call(original, this, args[0]);\n            } else {\n              result = apply.call(original, this, args);\n            }\n            if (hasOwnProperty.call(cache, id)) {\n              throw customError('Circular invocation', 'CIRCULAR_INVOCATION');\n            }\n            cache[id] = result;\n            if (setListeners) {\n              conf.emit('set', id, null, result);\n            }\n            return result;\n          };\n        }\n        conf = {\n          original: original,\n          memoized: memoized,\n          profileName: options.profileName,\n          get: function(args) {\n            if (resolve) {\n              args = resolve(args);\n            }\n            if (get) {\n              return get(args);\n            }\n            return String(args[0]);\n          },\n          has: function(id) {\n            return hasOwnProperty.call(cache, id);\n          },\n          delete: function(id) {\n            var result;\n            if (!hasOwnProperty.call(cache, id)) {\n              return;\n            }\n            if (del) {\n              del(id);\n            }\n            result = cache[id];\n            delete cache[id];\n            if (deleteListeners) {\n              conf.emit('delete', id, result);\n            }\n          },\n          clear: function() {\n            var oldCache = cache;\n            if (clear) {\n              clear();\n            }\n            cache = create(null);\n            conf.emit('clear', oldCache);\n          },\n          on: function(type, listener) {\n            if (type === 'get') {\n              getListeners = true;\n            } else if (type === 'set') {\n              setListeners = true;\n            } else if (type === 'delete') {\n              deleteListeners = true;\n            }\n            return on.call(this, type, listener);\n          },\n          emit: emit,\n          updateEnv: function() {\n            original = conf.original;\n          }\n        };\n        if (get) {\n          extDel = defineLength(function(arg) {\n            var id, args = arguments;\n            if (resolve) {\n              args = resolve(args);\n            }\n            id = get(args);\n            if (id === null) {\n              return;\n            }\n            conf.delete(id);\n          }, memLength);\n        } else if (length === 0) {\n          extDel = function() {\n            return conf.delete('data');\n          };\n        } else {\n          extDel = function(arg) {\n            if (resolve) {\n              arg = resolve(arguments)[0];\n            }\n            return conf.delete(arg);\n          };\n        }\n        extGet = defineLength(function() {\n          var id, args = arguments;\n          if (length === 0) {\n            return cache.data;\n          }\n          if (resolve) {\n            args = resolve(args);\n          }\n          if (get) {\n            id = get(args);\n          } else {\n            id = String(args[0]);\n          }\n          return cache[id];\n        });\n        extHas = defineLength(function() {\n          var id, args = arguments;\n          if (length === 0) {\n            return conf.has('data');\n          }\n          if (resolve) {\n            args = resolve(args);\n          }\n          if (get) {\n            id = get(args);\n          } else {\n            id = String(args[0]);\n          }\n          if (id === null) {\n            return false;\n          }\n          return conf.has(id);\n        });\n        defineProperties(memoized, {\n          __memoized__: d(true),\n          delete: d(extDel),\n          clear: d(conf.clear),\n          _get: d(extGet),\n          _has: d(extHas)\n        });\n        return conf;\n      };\n    }, {\n      './resolve-normalize': 227,\n      './resolve-resolve': 228,\n      d: 157,\n      'es5-ext/error/custom': 164,\n      'es5-ext/function/_define-length': 165,\n      'event-emitter': 211\n    } ],\n    225: [ function(_dereq_, module, exports) {\n      'use strict';\n    }, {} ],\n    226: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toPosInt = _dereq_('es5-ext/number/to-pos-integer');\n      module.exports = function(optsLength, fnLength, isAsync) {\n        var length;\n        if (isNaN(optsLength)) {\n          length = fnLength;\n          if (!(length >= 0)) {\n            return 1;\n          }\n          if (isAsync && length) {\n            return length - 1;\n          }\n          return length;\n        }\n        if (optsLength === false) {\n          return false;\n        }\n        return toPosInt(optsLength);\n      };\n    }, {\n      'es5-ext/number/to-pos-integer': 176\n    } ],\n    227: [ function(_dereq_, module, exports) {\n      'use strict';\n      var callable = _dereq_('es5-ext/object/valid-callable');\n      module.exports = function(userNormalizer) {\n        var normalizer;\n        if (typeof userNormalizer === 'function') {\n          return {\n            set: userNormalizer,\n            get: userNormalizer\n          };\n        }\n        normalizer = {\n          get: callable(userNormalizer.get)\n        };\n        if (userNormalizer.set !== undefined) {\n          normalizer.set = callable(userNormalizer.set);\n          if (userNormalizer.delete) {\n            normalizer.delete = callable(userNormalizer.delete);\n          }\n          if (userNormalizer.clear) {\n            normalizer.clear = callable(userNormalizer.clear);\n          }\n          return normalizer;\n        }\n        normalizer.set = normalizer.get;\n        return normalizer;\n      };\n    }, {\n      'es5-ext/object/valid-callable': 192\n    } ],\n    228: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toArray = _dereq_('es5-ext/array/to-array'), isValue = _dereq_('es5-ext/object/is-value'), callable = _dereq_('es5-ext/object/valid-callable');\n      var slice = Array.prototype.slice, resolveArgs;\n      resolveArgs = function(args) {\n        return this.map(function(resolve, i) {\n          return resolve ? resolve(args[i]) : args[i];\n        }).concat(slice.call(args, this.length));\n      };\n      module.exports = function(resolvers) {\n        resolvers = toArray(resolvers);\n        resolvers.forEach(function(resolve) {\n          if (isValue(resolve)) {\n            callable(resolve);\n          }\n        });\n        return resolveArgs.bind(resolvers);\n      };\n    }, {\n      'es5-ext/array/to-array': 163,\n      'es5-ext/object/is-value': 184,\n      'es5-ext/object/valid-callable': 192\n    } ],\n    229: [ function(_dereq_, module, exports) {\n      'use strict';\n      var indexOf = _dereq_('es5-ext/array/#/e-index-of');\n      module.exports = function() {\n        var lastId = 0, argsMap = [], cache = [];\n        return {\n          get: function(args) {\n            var index = indexOf.call(argsMap, args[0]);\n            return index === -1 ? null : cache[index];\n          },\n          set: function(args) {\n            argsMap.push(args[0]);\n            cache.push(++lastId);\n            return lastId;\n          },\n          delete: function(id) {\n            var index = indexOf.call(cache, id);\n            if (index !== -1) {\n              argsMap.splice(index, 1);\n              cache.splice(index, 1);\n            }\n          },\n          clear: function() {\n            argsMap = [];\n            cache = [];\n          }\n        };\n      };\n    }, {\n      'es5-ext/array/#/e-index-of': 159\n    } ],\n    230: [ function(_dereq_, module, exports) {\n      'use strict';\n      var indexOf = _dereq_('es5-ext/array/#/e-index-of'), create = Object.create;\n      module.exports = function(length) {\n        var lastId = 0, map = [ [], [] ], cache = create(null);\n        return {\n          get: function(args) {\n            var index = 0, set = map, i;\n            while (index < length - 1) {\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                return null;\n              }\n              set = set[1][i];\n              ++index;\n            }\n            i = indexOf.call(set[0], args[index]);\n            if (i === -1) {\n              return null;\n            }\n            return set[1][i] || null;\n          },\n          set: function(args) {\n            var index = 0, set = map, i;\n            while (index < length - 1) {\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                i = set[0].push(args[index]) - 1;\n                set[1].push([ [], [] ]);\n              }\n              set = set[1][i];\n              ++index;\n            }\n            i = indexOf.call(set[0], args[index]);\n            if (i === -1) {\n              i = set[0].push(args[index]) - 1;\n            }\n            set[1][i] = ++lastId;\n            cache[lastId] = args;\n            return lastId;\n          },\n          delete: function(id) {\n            var index = 0, set = map, i, path = [], args = cache[id];\n            while (index < length - 1) {\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                return;\n              }\n              path.push(set, i);\n              set = set[1][i];\n              ++index;\n            }\n            i = indexOf.call(set[0], args[index]);\n            if (i === -1) {\n              return;\n            }\n            id = set[1][i];\n            set[0].splice(i, 1);\n            set[1].splice(i, 1);\n            while (!set[0].length && path.length) {\n              i = path.pop();\n              set = path.pop();\n              set[0].splice(i, 1);\n              set[1].splice(i, 1);\n            }\n            delete cache[id];\n          },\n          clear: function() {\n            map = [ [], [] ];\n            cache = create(null);\n          }\n        };\n      };\n    }, {\n      'es5-ext/array/#/e-index-of': 159\n    } ],\n    231: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(length) {\n        if (!length) {\n          return function() {\n            return '';\n          };\n        }\n        return function(args) {\n          var id = String(args[0]), i = 0, currentLength = length;\n          while (--currentLength) {\n            id += '\\x01' + args[++i];\n          }\n          return id;\n        };\n      };\n    }, {} ],\n    232: [ function(_dereq_, module, exports) {\n      'use strict';\n      var indexOf = _dereq_('es5-ext/array/#/e-index-of');\n      var create = Object.create;\n      module.exports = function() {\n        var lastId = 0, map = [], cache = create(null);\n        return {\n          get: function(args) {\n            var index = 0, set = map, i, length = args.length;\n            if (length === 0) {\n              return set[length] || null;\n            }\n            if (set = set[length]) {\n              while (index < length - 1) {\n                i = indexOf.call(set[0], args[index]);\n                if (i === -1) {\n                  return null;\n                }\n                set = set[1][i];\n                ++index;\n              }\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                return null;\n              }\n              return set[1][i] || null;\n            }\n            return null;\n          },\n          set: function(args) {\n            var index = 0, set = map, i, length = args.length;\n            if (length === 0) {\n              set[length] = ++lastId;\n            } else {\n              if (!set[length]) {\n                set[length] = [ [], [] ];\n              }\n              set = set[length];\n              while (index < length - 1) {\n                i = indexOf.call(set[0], args[index]);\n                if (i === -1) {\n                  i = set[0].push(args[index]) - 1;\n                  set[1].push([ [], [] ]);\n                }\n                set = set[1][i];\n                ++index;\n              }\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                i = set[0].push(args[index]) - 1;\n              }\n              set[1][i] = ++lastId;\n            }\n            cache[lastId] = args;\n            return lastId;\n          },\n          delete: function(id) {\n            var index = 0, set = map, i, args = cache[id], length = args.length, path = [];\n            if (length === 0) {\n              delete set[length];\n            } else if (set = set[length]) {\n              while (index < length - 1) {\n                i = indexOf.call(set[0], args[index]);\n                if (i === -1) {\n                  return;\n                }\n                path.push(set, i);\n                set = set[1][i];\n                ++index;\n              }\n              i = indexOf.call(set[0], args[index]);\n              if (i === -1) {\n                return;\n              }\n              id = set[1][i];\n              set[0].splice(i, 1);\n              set[1].splice(i, 1);\n              while (!set[0].length && path.length) {\n                i = path.pop();\n                set = path.pop();\n                set[0].splice(i, 1);\n                set[1].splice(i, 1);\n              }\n            }\n            delete cache[id];\n          },\n          clear: function() {\n            map = [];\n            cache = create(null);\n          }\n        };\n      };\n    }, {\n      'es5-ext/array/#/e-index-of': 159\n    } ],\n    233: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = function(args) {\n        var id, i, length = args.length;\n        if (!length) {\n          return '\\x02';\n        }\n        id = String(args[i = 0]);\n        while (--length) {\n          id += '\\x01' + args[++i];\n        }\n        return id;\n      };\n    }, {} ],\n    234: [ function(_dereq_, module, exports) {\n      'use strict';\n      var callable = _dereq_('es5-ext/object/valid-callable'), forEach = _dereq_('es5-ext/object/for-each'), extensions = _dereq_('./lib/registered-extensions'), configure = _dereq_('./lib/configure-map'), resolveLength = _dereq_('./lib/resolve-length');\n      module.exports = function self(fn) {\n        var options, length, conf;\n        callable(fn);\n        options = Object(arguments[1]);\n        if (options.async && options.promise) {\n          throw new Error('Options \\'async\\' and \\'promise\\' cannot be used together');\n        }\n        if (hasOwnProperty.call(fn, '__memoized__') && !options.force) {\n          return fn;\n        }\n        length = resolveLength(options.length, fn.length, options.async && extensions.async);\n        conf = configure(fn, length, options);\n        forEach(extensions, function(extFn, name) {\n          if (options[name]) {\n            extFn(options[name], conf, options);\n          }\n        });\n        if (self.__profiler__) {\n          self.__profiler__(conf);\n        }\n        conf.updateEnv();\n        return conf.memoized;\n      };\n    }, {\n      './lib/configure-map': 224,\n      './lib/registered-extensions': 225,\n      './lib/resolve-length': 226,\n      'es5-ext/object/for-each': 181,\n      'es5-ext/object/valid-callable': 192\n    } ],\n    235: [ function(_dereq_, module, exports) {\n      (function(process, setImmediate) {\n        'use strict';\n        var callable, byObserver;\n        callable = function(fn) {\n          if (typeof fn !== 'function') {\n            throw new TypeError(fn + ' is not a function');\n          }\n          return fn;\n        };\n        byObserver = function(Observer) {\n          var node = document.createTextNode(''), queue, currentQueue, i = 0;\n          new Observer(function() {\n            var callback;\n            if (!queue) {\n              if (!currentQueue) {\n                return;\n              }\n              queue = currentQueue;\n            } else if (currentQueue) {\n              queue = currentQueue.concat(queue);\n            }\n            currentQueue = queue;\n            queue = null;\n            if (typeof currentQueue === 'function') {\n              callback = currentQueue;\n              currentQueue = null;\n              callback();\n              return;\n            }\n            node.data = i = ++i % 2;\n            while (currentQueue) {\n              callback = currentQueue.shift();\n              if (!currentQueue.length) {\n                currentQueue = null;\n              }\n              callback();\n            }\n          }).observe(node, {\n            characterData: true\n          });\n          return function(fn) {\n            callable(fn);\n            if (queue) {\n              if (typeof queue === 'function') {\n                queue = [ queue, fn ];\n              } else {\n                queue.push(fn);\n              }\n              return;\n            }\n            queue = fn;\n            node.data = i = ++i % 2;\n          };\n        };\n        module.exports = function() {\n          if (typeof process === 'object' && process && typeof process.nextTick === 'function') {\n            return process.nextTick;\n          }\n          if (typeof document === 'object' && document) {\n            if (typeof MutationObserver === 'function') {\n              return byObserver(MutationObserver);\n            }\n            if (typeof WebKitMutationObserver === 'function') {\n              return byObserver(WebKitMutationObserver);\n            }\n          }\n          if (typeof setImmediate === 'function') {\n            return function(cb) {\n              setImmediate(callable(cb));\n            };\n          }\n          if (typeof setTimeout === 'function' || typeof setTimeout === 'object') {\n            return function(cb) {\n              setTimeout(callable(cb), 0);\n            };\n          }\n          return null;\n        }();\n      }).call(this, _dereq_('_process'), _dereq_('timers').setImmediate);\n    }, {\n      _process: 236,\n      timers: 237\n    } ],\n    236: [ function(_dereq_, module, exports) {\n      var process = module.exports = {};\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n      (function() {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          return setTimeout(fun, 0);\n        }\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          return clearTimeout(marker);\n        }\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n      process.nextTick = function(fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      };\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = '';\n      process.versions = {};\n      function noop() {}\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n      process.listeners = function(name) {\n        return [];\n      };\n      process.binding = function(name) {\n        throw new Error('process.binding is not supported');\n      };\n      process.cwd = function() {\n        return '/';\n      };\n      process.chdir = function(dir) {\n        throw new Error('process.chdir is not supported');\n      };\n      process.umask = function() {\n        return 0;\n      };\n    }, {} ],\n    237: [ function(_dereq_, module, exports) {\n      (function(setImmediate, clearImmediate) {\n        var nextTick = _dereq_('process/browser.js').nextTick;\n        var apply = Function.prototype.apply;\n        var slice = Array.prototype.slice;\n        var immediateIds = {};\n        var nextImmediateId = 0;\n        exports.setTimeout = function() {\n          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n        };\n        exports.setInterval = function() {\n          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n        };\n        exports.clearTimeout = exports.clearInterval = function(timeout) {\n          timeout.close();\n        };\n        function Timeout(id, clearFn) {\n          this._id = id;\n          this._clearFn = clearFn;\n        }\n        Timeout.prototype.unref = Timeout.prototype.ref = function() {};\n        Timeout.prototype.close = function() {\n          this._clearFn.call(window, this._id);\n        };\n        exports.enroll = function(item, msecs) {\n          clearTimeout(item._idleTimeoutId);\n          item._idleTimeout = msecs;\n        };\n        exports.unenroll = function(item) {\n          clearTimeout(item._idleTimeoutId);\n          item._idleTimeout = -1;\n        };\n        exports._unrefActive = exports.active = function(item) {\n          clearTimeout(item._idleTimeoutId);\n          var msecs = item._idleTimeout;\n          if (msecs >= 0) {\n            item._idleTimeoutId = setTimeout(function onTimeout() {\n              if (item._onTimeout) {\n                item._onTimeout();\n              }\n            }, msecs);\n          }\n        };\n        exports.setImmediate = typeof setImmediate === 'function' ? setImmediate : function(fn) {\n          var id = nextImmediateId++;\n          var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n          immediateIds[id] = true;\n          nextTick(function onNextTick() {\n            if (immediateIds[id]) {\n              if (args) {\n                fn.apply(null, args);\n              } else {\n                fn.call(null);\n              }\n              exports.clearImmediate(id);\n            }\n          });\n          return id;\n        };\n        exports.clearImmediate = typeof clearImmediate === 'function' ? clearImmediate : function(id) {\n          delete immediateIds[id];\n        };\n      }).call(this, _dereq_('timers').setImmediate, _dereq_('timers').clearImmediate);\n    }, {\n      'process/browser.js': 236,\n      timers: 237\n    } ],\n    238: [ function(_dereq_, module, exports) {\n      'use strict';\n      module.exports = 2147483647;\n    }, {} ],\n    239: [ function(_dereq_, module, exports) {\n      'use strict';\n      var toPosInt = _dereq_('es5-ext/number/to-pos-integer'), maxTimeout = _dereq_('./max-timeout');\n      module.exports = function(value) {\n        value = toPosInt(value);\n        if (value > maxTimeout) {\n          throw new TypeError(value + ' exceeds maximum possible timeout');\n        }\n        return value;\n      };\n    }, {\n      './max-timeout': 238,\n      'es5-ext/number/to-pos-integer': 176\n    } ],\n    240: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isPrototype = _dereq_('../prototype/is');\n      module.exports = function(value) {\n        if (typeof value !== 'function') {\n          return false;\n        }\n        if (!hasOwnProperty.call(value, 'length')) {\n          return false;\n        }\n        try {\n          if (typeof value.length !== 'number') {\n            return false;\n          }\n          if (typeof value.call !== 'function') {\n            return false;\n          }\n          if (typeof value.apply !== 'function') {\n            return false;\n          }\n        } catch (error) {\n          return false;\n        }\n        return !isPrototype(value);\n      };\n    }, {\n      '../prototype/is': 243\n    } ],\n    241: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isValue = _dereq_('../value/is');\n      var possibleTypes = {\n        object: true,\n        function: true,\n        undefined: true\n      };\n      module.exports = function(value) {\n        if (!isValue(value)) {\n          return false;\n        }\n        return hasOwnProperty.call(possibleTypes, typeof value);\n      };\n    }, {\n      '../value/is': 244\n    } ],\n    242: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isFunction = _dereq_('../function/is');\n      var classRe = /^\\s*class[\\s{/}]/, functionToString = Function.prototype.toString;\n      module.exports = function(value) {\n        if (!isFunction(value)) {\n          return false;\n        }\n        if (classRe.test(functionToString.call(value))) {\n          return false;\n        }\n        return true;\n      };\n    }, {\n      '../function/is': 240\n    } ],\n    243: [ function(_dereq_, module, exports) {\n      'use strict';\n      var isObject = _dereq_('../object/is');\n      module.exports = function(value) {\n        if (!isObject(value)) {\n          return false;\n        }\n        try {\n          if (!value.constructor) {\n            return false;\n          }\n          return value.constructor.prototype === value;\n        } catch (error) {\n          return false;\n        }\n      };\n    }, {\n      '../object/is': 241\n    } ],\n    244: [ function(_dereq_, module, exports) {\n      'use strict';\n      var _undefined = void 0;\n      module.exports = function(value) {\n        return value !== _undefined && value !== null;\n      };\n    }, {} ],\n    245: [ function(_dereq_, module, exports) {\n      (function(global) {\n        (function(self) {\n          'use strict';\n          if (self.WeakMap) {\n            return;\n          }\n          var hasOwnProperty = Object.prototype.hasOwnProperty;\n          var defineProperty = function(object, name, value) {\n            if (Object.defineProperty) {\n              Object.defineProperty(object, name, {\n                configurable: true,\n                writable: true,\n                value: value\n              });\n            } else {\n              object[name] = value;\n            }\n          };\n          self.WeakMap = function() {\n            function WeakMap() {\n              if (this === void 0) {\n                throw new TypeError('Constructor WeakMap requires \\'new\\'');\n              }\n              defineProperty(this, '_id', genId('_WeakMap'));\n              if (arguments.length > 0) {\n                throw new TypeError('WeakMap iterable is not supported');\n              }\n            }\n            defineProperty(WeakMap.prototype, 'delete', function(key) {\n              checkInstance(this, 'delete');\n              if (!isObject(key)) {\n                return false;\n              }\n              var entry = key[this._id];\n              if (entry && entry[0] === key) {\n                delete key[this._id];\n                return true;\n              }\n              return false;\n            });\n            defineProperty(WeakMap.prototype, 'get', function(key) {\n              checkInstance(this, 'get');\n              if (!isObject(key)) {\n                return void 0;\n              }\n              var entry = key[this._id];\n              if (entry && entry[0] === key) {\n                return entry[1];\n              }\n              return void 0;\n            });\n            defineProperty(WeakMap.prototype, 'has', function(key) {\n              checkInstance(this, 'has');\n              if (!isObject(key)) {\n                return false;\n              }\n              var entry = key[this._id];\n              if (entry && entry[0] === key) {\n                return true;\n              }\n              return false;\n            });\n            defineProperty(WeakMap.prototype, 'set', function(key, value) {\n              checkInstance(this, 'set');\n              if (!isObject(key)) {\n                throw new TypeError('Invalid value used as weak map key');\n              }\n              var entry = key[this._id];\n              if (entry && entry[0] === key) {\n                entry[1] = value;\n                return this;\n              }\n              defineProperty(key, this._id, [ key, value ]);\n              return this;\n            });\n            function checkInstance(x, methodName) {\n              if (!isObject(x) || !hasOwnProperty.call(x, '_id')) {\n                throw new TypeError(methodName + ' method called on incompatible receiver ' + typeof x);\n              }\n            }\n            function genId(prefix) {\n              return prefix + '_' + rand() + '.' + rand();\n            }\n            function rand() {\n              return Math.random().toString().substring(2);\n            }\n            defineProperty(WeakMap, '_polyfill', true);\n            return WeakMap;\n          }();\n          function isObject(x) {\n            return Object(x) === x;\n          }\n        })(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this);\n      }).call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\n    }, {} ]\n  }, {}, [ 1 ]);\n  'use strict';\n  var utils = axe.utils = {};\n  'use strict';\n  var helpers = {};\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  var dotRegex = /\\{\\{.+?\\}\\}/g;\n  function getDefaultConfiguration(audit) {\n    'use strict';\n    var config;\n    if (audit) {\n      config = axe.utils.clone(audit);\n      config.commons = audit.commons;\n    } else {\n      config = {};\n    }\n    config.reporter = config.reporter || null;\n    config.noHtml = config.noHtml || false;\n    config.rules = config.rules || [];\n    config.checks = config.checks || [];\n    config.data = _extends({\n      checks: {},\n      rules: {}\n    }, config.data);\n    return config;\n  }\n  function unpackToObject(collection, audit, method) {\n    'use strict';\n    var i, l;\n    for (i = 0, l = collection.length; i < l; i++) {\n      audit[method](collection[i]);\n    }\n  }\n  function Audit(audit) {\n    this.brand = 'axe';\n    this.application = 'axeAPI';\n    this.tagExclude = [ 'experimental' ];\n    this.lang = 'en';\n    this.defaultConfig = audit;\n    this._init();\n    this._defaultLocale = null;\n  }\n  Audit.prototype._setDefaultLocale = function() {\n    if (this._defaultLocale) {\n      return;\n    }\n    var locale = {\n      checks: {},\n      rules: {},\n      failureSummaries: {},\n      incompleteFallbackMessage: '',\n      lang: this.lang\n    };\n    var checkIDs = Object.keys(this.data.checks);\n    for (var i = 0; i < checkIDs.length; i++) {\n      var id = checkIDs[i];\n      var check = this.data.checks[id];\n      var _check$messages = check.messages, pass = _check$messages.pass, fail = _check$messages.fail, incomplete = _check$messages.incomplete;\n      locale.checks[id] = {\n        pass: pass,\n        fail: fail,\n        incomplete: incomplete\n      };\n    }\n    var ruleIDs = Object.keys(this.data.rules);\n    for (var _i = 0; _i < ruleIDs.length; _i++) {\n      var _id = ruleIDs[_i];\n      var rule = this.data.rules[_id];\n      var description = rule.description, help = rule.help;\n      locale.rules[_id] = {\n        description: description,\n        help: help\n      };\n    }\n    var failureSummaries = Object.keys(this.data.failureSummaries);\n    for (var _i2 = 0; _i2 < failureSummaries.length; _i2++) {\n      var type = failureSummaries[_i2];\n      var failureSummary = this.data.failureSummaries[type];\n      var failureMessage = failureSummary.failureMessage;\n      locale.failureSummaries[type] = {\n        failureMessage: failureMessage\n      };\n    }\n    locale.incompleteFallbackMessage = this.data.incompleteFallbackMessage;\n    this._defaultLocale = locale;\n  };\n  Audit.prototype._resetLocale = function() {\n    var defaultLocale = this._defaultLocale;\n    if (!defaultLocale) {\n      return;\n    }\n    this.applyLocale(defaultLocale);\n  };\n  var mergeCheckLocale = function mergeCheckLocale(a, b) {\n    var pass = b.pass, fail = b.fail;\n    if (typeof pass === 'string' && dotRegex.test(pass)) {\n      pass = axe.imports.doT.compile(pass);\n    }\n    if (typeof fail === 'string' && dotRegex.test(fail)) {\n      fail = axe.imports.doT.compile(fail);\n    }\n    return _extends({}, a, {\n      messages: {\n        pass: pass || a.messages.pass,\n        fail: fail || a.messages.fail,\n        incomplete: _typeof(a.messages.incomplete) === 'object' ? _extends({}, a.messages.incomplete, {}, b.incomplete) : b.incomplete\n      }\n    });\n  };\n  var mergeRuleLocale = function mergeRuleLocale(a, b) {\n    var help = b.help, description = b.description;\n    if (typeof help === 'string' && dotRegex.test(help)) {\n      help = axe.imports.doT.compile(help);\n    }\n    if (typeof description === 'string' && dotRegex.test(description)) {\n      description = axe.imports.doT.compile(description);\n    }\n    return _extends({}, a, {\n      help: help || a.help,\n      description: description || a.description\n    });\n  };\n  var mergeFailureMessage = function mergeFailureMessage(a, b) {\n    var failureMessage = b.failureMessage;\n    if (typeof failureMessage === 'string' && dotRegex.test(failureMessage)) {\n      failureMessage = axe.imports.doT.compile(failureMessage);\n    }\n    return _extends({}, a, {\n      failureMessage: failureMessage || a.failureMessage\n    });\n  };\n  var mergeFallbackMessage = function mergeFallbackMessage(a, b) {\n    if (typeof b === 'string' && dotRegex.test(b)) {\n      b = axe.imports.doT.compile(b);\n    }\n    return b || a;\n  };\n  Audit.prototype._applyCheckLocale = function(checks) {\n    var keys = Object.keys(checks);\n    for (var i = 0; i < keys.length; i++) {\n      var id = keys[i];\n      if (!this.data.checks[id]) {\n        throw new Error('Locale provided for unknown check: \"'.concat(id, '\"'));\n      }\n      this.data.checks[id] = mergeCheckLocale(this.data.checks[id], checks[id]);\n    }\n  };\n  Audit.prototype._applyRuleLocale = function(rules) {\n    var keys = Object.keys(rules);\n    for (var i = 0; i < keys.length; i++) {\n      var id = keys[i];\n      if (!this.data.rules[id]) {\n        throw new Error('Locale provided for unknown rule: \"'.concat(id, '\"'));\n      }\n      this.data.rules[id] = mergeRuleLocale(this.data.rules[id], rules[id]);\n    }\n  };\n  Audit.prototype._applyFailureSummaries = function(messages) {\n    var keys = Object.keys(messages);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (!this.data.failureSummaries[key]) {\n        throw new Error('Locale provided for unknown failureMessage: \"'.concat(key, '\"'));\n      }\n      this.data.failureSummaries[key] = mergeFailureMessage(this.data.failureSummaries[key], messages[key]);\n    }\n  };\n  Audit.prototype.applyLocale = function(locale) {\n    this._setDefaultLocale();\n    if (locale.checks) {\n      this._applyCheckLocale(locale.checks);\n    }\n    if (locale.rules) {\n      this._applyRuleLocale(locale.rules);\n    }\n    if (locale.failureSummaries) {\n      this._applyFailureSummaries(locale.failureSummaries, 'failureSummaries');\n    }\n    if (locale.incompleteFallbackMessage) {\n      this.data.incompleteFallbackMessage = mergeFallbackMessage(this.data.incompleteFallbackMessage, locale.incompleteFallbackMessage);\n    }\n    if (locale.lang) {\n      this.lang = locale.lang;\n    }\n  };\n  Audit.prototype._init = function() {\n    var audit = getDefaultConfiguration(this.defaultConfig);\n    axe.commons = commons = audit.commons;\n    this.lang = audit.lang || 'en';\n    this.reporter = audit.reporter;\n    this.commands = {};\n    this.rules = [];\n    this.checks = {};\n    this.noHtml = audit.noHtml;\n    unpackToObject(audit.rules, this, 'addRule');\n    unpackToObject(audit.checks, this, 'addCheck');\n    this.data = {};\n    this.data.checks = audit.data && audit.data.checks || {};\n    this.data.rules = audit.data && audit.data.rules || {};\n    this.data.failureSummaries = audit.data && audit.data.failureSummaries || {};\n    this.data.incompleteFallbackMessage = audit.data && audit.data.incompleteFallbackMessage || '';\n    this._constructHelpUrls();\n  };\n  Audit.prototype.registerCommand = function(command) {\n    'use strict';\n    this.commands[command.id] = command.callback;\n  };\n  Audit.prototype.addRule = function(spec) {\n    'use strict';\n    if (spec.metadata) {\n      this.data.rules[spec.id] = spec.metadata;\n    }\n    var rule = this.getRule(spec.id);\n    if (rule) {\n      rule.configure(spec);\n    } else {\n      this.rules.push(new Rule(spec, this));\n    }\n  };\n  Audit.prototype.addCheck = function(spec) {\n    'use strict';\n    var metadata = spec.metadata;\n    if (_typeof(metadata) === 'object') {\n      this.data.checks[spec.id] = metadata;\n      if (_typeof(metadata.messages) === 'object') {\n        Object.keys(metadata.messages).filter(function(prop) {\n          return metadata.messages.hasOwnProperty(prop) && typeof metadata.messages[prop] === 'string';\n        }).forEach(function(prop) {\n          if (metadata.messages[prop].indexOf('function') === 0) {\n            metadata.messages[prop] = new Function('return ' + metadata.messages[prop] + ';')();\n          }\n        });\n      }\n    }\n    if (this.checks[spec.id]) {\n      this.checks[spec.id].configure(spec);\n    } else {\n      this.checks[spec.id] = new Check(spec);\n    }\n  };\n  function getRulesToRun(rules, context, options) {\n    var base = {\n      now: [],\n      later: []\n    };\n    var splitRules = rules.reduce(function(out, rule) {\n      if (!axe.utils.ruleShouldRun(rule, context, options)) {\n        return out;\n      }\n      if (rule.preload) {\n        out.later.push(rule);\n        return out;\n      }\n      out.now.push(rule);\n      return out;\n    }, base);\n    return splitRules;\n  }\n  function getDefferedRule(rule, context, options) {\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.mark('mark_rule_start_' + rule.id);\n    }\n    return function(resolve, reject) {\n      rule.run(context, options, function(ruleResult) {\n        resolve(ruleResult);\n      }, function(err) {\n        if (!options.debug) {\n          var errResult = Object.assign(new RuleResult(rule), {\n            result: axe.constants.CANTTELL,\n            description: 'An error occured while running this rule',\n            message: err.message,\n            stack: err.stack,\n            error: err,\n            errorNode: err.errorNode\n          });\n          resolve(errResult);\n        } else {\n          reject(err);\n        }\n      });\n    };\n  }\n  Audit.prototype.run = function(context, options, resolve, reject) {\n    'use strict';\n    this.normalizeOptions(options);\n    axe._selectCache = [];\n    var allRulesToRun = getRulesToRun(this.rules, context, options);\n    var runNowRules = allRulesToRun.now;\n    var runLaterRules = allRulesToRun.later;\n    var nowRulesQueue = axe.utils.queue();\n    runNowRules.forEach(function(rule) {\n      nowRulesQueue.defer(getDefferedRule(rule, context, options));\n    });\n    var preloaderQueue = axe.utils.queue();\n    if (runLaterRules.length) {\n      preloaderQueue.defer(function(resolve) {\n        axe.utils.preload(options).then(function(assets) {\n          return resolve(assets);\n        })['catch'](function(err) {\n          console.warn('Couldn\\'t load preload assets: ', err);\n          resolve(undefined);\n        });\n      });\n    }\n    var queueForNowRulesAndPreloader = axe.utils.queue();\n    queueForNowRulesAndPreloader.defer(nowRulesQueue);\n    queueForNowRulesAndPreloader.defer(preloaderQueue);\n    queueForNowRulesAndPreloader.then(function(nowRulesAndPreloaderResults) {\n      var assetsFromQueue = nowRulesAndPreloaderResults.pop();\n      if (assetsFromQueue && assetsFromQueue.length) {\n        var assets = assetsFromQueue[0];\n        if (assets) {\n          context = _extends({}, context, {}, assets);\n        }\n      }\n      var nowRulesResults = nowRulesAndPreloaderResults[0];\n      if (!runLaterRules.length) {\n        axe._selectCache = undefined;\n        resolve(nowRulesResults.filter(function(result) {\n          return !!result;\n        }));\n        return;\n      }\n      var laterRulesQueue = axe.utils.queue();\n      runLaterRules.forEach(function(rule) {\n        var deferredRule = getDefferedRule(rule, context, options);\n        laterRulesQueue.defer(deferredRule);\n      });\n      laterRulesQueue.then(function(laterRuleResults) {\n        axe._selectCache = undefined;\n        resolve(nowRulesResults.concat(laterRuleResults).filter(function(result) {\n          return !!result;\n        }));\n      })['catch'](reject);\n    })['catch'](reject);\n  };\n  Audit.prototype.after = function(results, options) {\n    'use strict';\n    var rules = this.rules;\n    return results.map(function(ruleResult) {\n      var rule = axe.utils.findBy(rules, 'id', ruleResult.id);\n      if (!rule) {\n        throw new Error('Result for unknown rule. You may be running mismatch axe-core versions');\n      }\n      return rule.after(ruleResult, options);\n    });\n  };\n  Audit.prototype.getRule = function(ruleId) {\n    return this.rules.find(function(rule) {\n      return rule.id === ruleId;\n    });\n  };\n  Audit.prototype.normalizeOptions = function(options) {\n    'use strict';\n    var audit = this;\n    var tags = [];\n    var ruleIds = [];\n    audit.rules.forEach(function(rule) {\n      ruleIds.push(rule.id);\n      rule.tags.forEach(function(tag) {\n        if (!tags.includes(tag)) {\n          tags.push(tag);\n        }\n      });\n    });\n    if (_typeof(options.runOnly) === 'object') {\n      if (Array.isArray(options.runOnly)) {\n        var hasTag = options.runOnly.find(function(value) {\n          return tags.includes(value);\n        });\n        var hasRule = options.runOnly.find(function(value) {\n          return ruleIds.includes(value);\n        });\n        if (hasTag && hasRule) {\n          throw new Error('runOnly cannot be both rules and tags');\n        }\n        if (hasRule) {\n          options.runOnly = {\n            type: 'rule',\n            values: options.runOnly\n          };\n        } else {\n          options.runOnly = {\n            type: 'tag',\n            values: options.runOnly\n          };\n        }\n      }\n      var only = options.runOnly;\n      if (only.value && !only.values) {\n        only.values = only.value;\n        delete only.value;\n      }\n      if (!Array.isArray(only.values) || only.values.length === 0) {\n        throw new Error('runOnly.values must be a non-empty array');\n      }\n      if ([ 'rule', 'rules' ].includes(only.type)) {\n        only.type = 'rule';\n        only.values.forEach(function(ruleId) {\n          if (!ruleIds.includes(ruleId)) {\n            throw new Error('unknown rule `' + ruleId + '` in options.runOnly');\n          }\n        });\n      } else if ([ 'tag', 'tags', undefined ].includes(only.type)) {\n        only.type = 'tag';\n        var unmatchedTags = only.values.filter(function(tag) {\n          return !tags.includes(tag);\n        });\n        if (unmatchedTags.length !== 0) {\n          axe.log('Could not find tags `' + unmatchedTags.join('`, `') + '`');\n        }\n      } else {\n        throw new Error('Unknown runOnly type \\''.concat(only.type, '\\''));\n      }\n    }\n    if (_typeof(options.rules) === 'object') {\n      Object.keys(options.rules).forEach(function(ruleId) {\n        if (!ruleIds.includes(ruleId)) {\n          throw new Error('unknown rule `' + ruleId + '` in options.rules');\n        }\n      });\n    }\n    return options;\n  };\n  Audit.prototype.setBranding = function(branding) {\n    'use strict';\n    var previous = {\n      brand: this.brand,\n      application: this.application\n    };\n    if (branding && branding.hasOwnProperty('brand') && branding.brand && typeof branding.brand === 'string') {\n      this.brand = branding.brand;\n    }\n    if (branding && branding.hasOwnProperty('application') && branding.application && typeof branding.application === 'string') {\n      this.application = branding.application;\n    }\n    this._constructHelpUrls(previous);\n  };\n  function getHelpUrl(_ref, ruleId, version) {\n    var brand = _ref.brand, application = _ref.application, lang = _ref.lang;\n    return axe.constants.helpUrlBase + brand + '/' + (version || axe.version.substring(0, axe.version.lastIndexOf('.'))) + '/' + ruleId + '?application=' + encodeURIComponent(application) + (lang && lang !== 'en' ? '&lang=' + encodeURIComponent(lang) : '');\n  }\n  Audit.prototype._constructHelpUrls = function() {\n    var _this = this;\n    var previous = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var version = (axe.version.match(/^[1-9][0-9]*\\.[0-9]+/) || [ 'x.y' ])[0];\n    this.rules.forEach(function(rule) {\n      if (!_this.data.rules[rule.id]) {\n        _this.data.rules[rule.id] = {};\n      }\n      var metaData = _this.data.rules[rule.id];\n      if (typeof metaData.helpUrl !== 'string' || previous && metaData.helpUrl === getHelpUrl(previous, rule.id, version)) {\n        metaData.helpUrl = getHelpUrl(_this, rule.id, version);\n      }\n    });\n  };\n  Audit.prototype.resetRulesAndChecks = function() {\n    'use strict';\n    this._init();\n    this._resetLocale();\n  };\n  'use strict';\n  (function() {\n    'use strict';\n    var _cache = {};\n    var cache = {\n      set: function set(key, value) {\n        _cache[key] = value;\n      },\n      get: function get(key) {\n        return _cache[key];\n      },\n      clear: function clear() {\n        _cache = {};\n      }\n    };\n    axe._cache = cache;\n  })();\n  'use strict';\n  function CheckResult(check) {\n    'use strict';\n    this.id = check.id;\n    this.data = null;\n    this.relatedNodes = [];\n    this.result = null;\n  }\n  'use strict';\n  function createExecutionContext(spec) {\n    'use strict';\n    if (typeof spec === 'string') {\n      return new Function('return ' + spec + ';')();\n    }\n    return spec;\n  }\n  function Check(spec) {\n    if (spec) {\n      this.id = spec.id;\n      this.configure(spec);\n    }\n  }\n  Check.prototype.enabled = true;\n  Check.prototype.run = function(node, options, context, resolve, reject) {\n    'use strict';\n    options = options || {};\n    var enabled = options.hasOwnProperty('enabled') ? options.enabled : this.enabled, checkOptions = options.options || this.options;\n    if (enabled) {\n      var checkResult = new CheckResult(this);\n      var checkHelper = axe.utils.checkHelper(checkResult, options, resolve, reject);\n      var result;\n      try {\n        result = this.evaluate.call(checkHelper, node.actualNode, checkOptions, node, context);\n      } catch (e) {\n        if (node && node.actualNode) {\n          e.errorNode = new DqElement(node.actualNode).toJSON();\n        }\n        reject(e);\n        return;\n      }\n      if (!checkHelper.isAsync) {\n        checkResult.result = result;\n        resolve(checkResult);\n      }\n    } else {\n      resolve(null);\n    }\n  };\n  Check.prototype.runSync = function(node, options, context) {\n    options = options || {};\n    var _options = options, _options$enabled = _options.enabled, enabled = _options$enabled === void 0 ? this.enabled : _options$enabled;\n    if (!enabled) {\n      return null;\n    }\n    var checkOptions = options.options || this.options;\n    var checkResult = new CheckResult(this);\n    var checkHelper = axe.utils.checkHelper(checkResult, options);\n    checkHelper.async = function() {\n      throw new Error('Cannot run async check while in a synchronous run');\n    };\n    var result;\n    try {\n      result = this.evaluate.call(checkHelper, node.actualNode, checkOptions, node, context);\n    } catch (e) {\n      if (node && node.actualNode) {\n        e.errorNode = new DqElement(node.actualNode).toJSON();\n      }\n      throw e;\n    }\n    checkResult.result = result;\n    return checkResult;\n  };\n  Check.prototype.configure = function(spec) {\n    var _this = this;\n    [ 'options', 'enabled' ].filter(function(prop) {\n      return spec.hasOwnProperty(prop);\n    }).forEach(function(prop) {\n      return _this[prop] = spec[prop];\n    });\n    [ 'evaluate', 'after' ].filter(function(prop) {\n      return spec.hasOwnProperty(prop);\n    }).forEach(function(prop) {\n      return _this[prop] = createExecutionContext(spec[prop]);\n    });\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function pushUniqueFrame(collection, frame) {\n    'use strict';\n    if (axe.utils.isHidden(frame)) {\n      return;\n    }\n    var fr = axe.utils.findBy(collection, 'node', frame);\n    if (!fr) {\n      collection.push({\n        node: frame,\n        include: [],\n        exclude: []\n      });\n    }\n  }\n  function pushUniqueFrameSelector(context, type, selectorArray) {\n    'use strict';\n    context.frames = context.frames || [];\n    var result, frame;\n    var frames = document.querySelectorAll(selectorArray.shift());\n    frameloop: for (var i = 0, l = frames.length; i < l; i++) {\n      frame = frames[i];\n      for (var j = 0, l2 = context.frames.length; j < l2; j++) {\n        if (context.frames[j].node === frame) {\n          context.frames[j][type].push(selectorArray);\n          break frameloop;\n        }\n      }\n      result = {\n        node: frame,\n        include: [],\n        exclude: []\n      };\n      if (selectorArray) {\n        result[type].push(selectorArray);\n      }\n      context.frames.push(result);\n    }\n  }\n  function normalizeContext(context) {\n    'use strict';\n    if (context && _typeof(context) === 'object' || context instanceof NodeList) {\n      if (context instanceof Node) {\n        return {\n          include: [ context ],\n          exclude: []\n        };\n      }\n      if (context.hasOwnProperty('include') || context.hasOwnProperty('exclude')) {\n        return {\n          include: context.include && +context.include.length ? context.include : [ document ],\n          exclude: context.exclude || []\n        };\n      }\n      if (context.length === +context.length) {\n        return {\n          include: context,\n          exclude: []\n        };\n      }\n    }\n    if (typeof context === 'string') {\n      return {\n        include: [ context ],\n        exclude: []\n      };\n    }\n    return {\n      include: [ document ],\n      exclude: []\n    };\n  }\n  function parseSelectorArray(context, type) {\n    'use strict';\n    var item, result = [], nodeList;\n    for (var i = 0, l = context[type].length; i < l; i++) {\n      item = context[type][i];\n      if (typeof item === 'string') {\n        nodeList = Array.from(document.querySelectorAll(item));\n        result = result.concat(nodeList.map(function(node) {\n          return axe.utils.getNodeFromTree(node);\n        }));\n        break;\n      } else if (item && item.length && !(item instanceof Node)) {\n        if (item.length > 1) {\n          pushUniqueFrameSelector(context, type, item);\n        } else {\n          nodeList = Array.from(document.querySelectorAll(item[0]));\n          result = result.concat(nodeList.map(function(node) {\n            return axe.utils.getNodeFromTree(node);\n          }));\n        }\n      } else if (item instanceof Node) {\n        if (item.documentElement instanceof Node) {\n          result.push(context.flatTree[0]);\n        } else {\n          result.push(axe.utils.getNodeFromTree(item));\n        }\n      }\n    }\n    return result.filter(function(r) {\n      return r;\n    });\n  }\n  function validateContext(context) {\n    'use strict';\n    if (context.include.length === 0) {\n      if (context.frames.length === 0) {\n        var env = axe.utils.respondable.isInFrame() ? 'frame' : 'page';\n        return new Error('No elements found for include in ' + env + ' Context');\n      }\n      context.frames.forEach(function(frame, i) {\n        if (frame.include.length === 0) {\n          return new Error('No elements found for include in Context of frame ' + i);\n        }\n      });\n    }\n  }\n  function getRootNode(_ref) {\n    var include = _ref.include, exclude = _ref.exclude;\n    var selectors = Array.from(include).concat(Array.from(exclude));\n    for (var i = 0; i < selectors.length; ++i) {\n      var item = selectors[i];\n      if (item instanceof Element) {\n        return item.ownerDocument.documentElement;\n      }\n      if (item instanceof Document) {\n        return item.documentElement;\n      }\n    }\n    return document.documentElement;\n  }\n  function Context(spec) {\n    'use strict';\n    var _this = this;\n    this.frames = [];\n    this.initiator = spec && typeof spec.initiator === 'boolean' ? spec.initiator : true;\n    this.page = false;\n    spec = normalizeContext(spec);\n    this.flatTree = axe.utils.getFlattenedTree(getRootNode(spec));\n    this.exclude = spec.exclude;\n    this.include = spec.include;\n    this.include = parseSelectorArray(this, 'include');\n    this.exclude = parseSelectorArray(this, 'exclude');\n    axe.utils.select('frame, iframe', this).forEach(function(frame) {\n      if (isNodeInContext(frame, _this)) {\n        pushUniqueFrame(_this.frames, frame.actualNode);\n      }\n    });\n    if (this.include.length === 1 && this.include[0].actualNode === document.documentElement) {\n      this.page = true;\n    }\n    var err = validateContext(this);\n    if (err instanceof Error) {\n      throw err;\n    }\n    if (!Array.isArray(this.include)) {\n      this.include = Array.from(this.include);\n    }\n    this.include.sort(axe.utils.nodeSorter);\n  }\n  'use strict';\n  function RuleResult(rule) {\n    'use strict';\n    this.id = rule.id;\n    this.result = axe.constants.NA;\n    this.pageLevel = rule.pageLevel;\n    this.impact = null;\n    this.nodes = [];\n  }\n  'use strict';\n  function Rule(spec, parentAudit) {\n    'use strict';\n    this._audit = parentAudit;\n    this.id = spec.id;\n    this.selector = spec.selector || '*';\n    this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n    this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n    this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n    this.any = spec.any || [];\n    this.all = spec.all || [];\n    this.none = spec.none || [];\n    this.tags = spec.tags || [];\n    this.preload = spec.preload ? true : false;\n    if (spec.matches) {\n      this.matches = createExecutionContext(spec.matches);\n    }\n  }\n  Rule.prototype.matches = function() {\n    'use strict';\n    return true;\n  };\n  Rule.prototype.gather = function(context) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var markStart = 'mark_gather_start_' + this.id;\n    var markEnd = 'mark_gather_end_' + this.id;\n    var markHiddenStart = 'mark_isHidden_start_' + this.id;\n    var markHiddenEnd = 'mark_isHidden_end_' + this.id;\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.mark(markStart);\n    }\n    var elements = axe.utils.select(this.selector, context);\n    if (this.excludeHidden) {\n      if (options.performanceTimer) {\n        axe.utils.performanceTimer.mark(markHiddenStart);\n      }\n      elements = elements.filter(function(element) {\n        return !axe.utils.isHidden(element.actualNode);\n      });\n      if (options.performanceTimer) {\n        axe.utils.performanceTimer.mark(markHiddenEnd);\n        axe.utils.performanceTimer.measure('rule_' + this.id + '#gather_axe.utils.isHidden', markHiddenStart, markHiddenEnd);\n      }\n    }\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.mark(markEnd);\n      axe.utils.performanceTimer.measure('rule_' + this.id + '#gather', markStart, markEnd);\n    }\n    return elements;\n  };\n  Rule.prototype.runChecks = function(type, node, options, context, resolve, reject) {\n    'use strict';\n    var self = this;\n    var checkQueue = axe.utils.queue();\n    this[type].forEach(function(c) {\n      var check = self._audit.checks[c.id || c];\n      var option = axe.utils.getCheckOption(check, self.id, options);\n      checkQueue.defer(function(res, rej) {\n        check.run(node, option, context, res, rej);\n      });\n    });\n    checkQueue.then(function(results) {\n      results = results.filter(function(check) {\n        return check;\n      });\n      resolve({\n        type: type,\n        results: results\n      });\n    })['catch'](reject);\n  };\n  Rule.prototype.runChecksSync = function(type, node, options, context) {\n    'use strict';\n    var self = this;\n    var results = [];\n    this[type].forEach(function(c) {\n      var check = self._audit.checks[c.id || c];\n      var option = axe.utils.getCheckOption(check, self.id, options);\n      results.push(check.runSync(node, option, context));\n    });\n    results = results.filter(function(check) {\n      return check;\n    });\n    return {\n      type: type,\n      results: results\n    };\n  };\n  Rule.prototype.run = function(context) {\n    var _this = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var resolve = arguments.length > 2 ? arguments[2] : undefined;\n    var reject = arguments.length > 3 ? arguments[3] : undefined;\n    if (options.performanceTimer) {\n      this._trackPerformance();\n    }\n    var q = axe.utils.queue();\n    var ruleResult = new RuleResult(this);\n    var nodes;\n    try {\n      nodes = this.gatherAndMatchNodes(context, options);\n    } catch (error) {\n      reject(new SupportError({\n        cause: error,\n        ruleId: this.id\n      }));\n      return;\n    }\n    if (options.performanceTimer) {\n      this._logGatherPerformance(nodes);\n    }\n    nodes.forEach(function(node) {\n      q.defer(function(resolveNode, rejectNode) {\n        var checkQueue = axe.utils.queue();\n        [ 'any', 'all', 'none' ].forEach(function(type) {\n          checkQueue.defer(function(res, rej) {\n            _this.runChecks(type, node, options, context, res, rej);\n          });\n        });\n        checkQueue.then(function(results) {\n          var result = getResult(results);\n          if (result) {\n            result.node = new axe.utils.DqElement(node.actualNode, options);\n            ruleResult.nodes.push(result);\n          }\n          resolveNode();\n        })['catch'](function(err) {\n          return rejectNode(err);\n        });\n      });\n    });\n    q.defer(function(resolve) {\n      return setTimeout(resolve, 0);\n    });\n    if (options.performanceTimer) {\n      this._logRulePerformance();\n    }\n    q.then(function() {\n      return resolve(ruleResult);\n    })['catch'](function(error) {\n      return reject(error);\n    });\n  };\n  Rule.prototype.runSync = function(context) {\n    var _this2 = this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (options.performanceTimer) {\n      this._trackPerformance();\n    }\n    var ruleResult = new RuleResult(this);\n    var nodes;\n    try {\n      nodes = this.gatherAndMatchNodes(context, options);\n    } catch (error) {\n      throw new SupportError({\n        cause: error,\n        ruleId: this.id\n      });\n    }\n    if (options.performanceTimer) {\n      this._logGatherPerformance(nodes);\n    }\n    nodes.forEach(function(node) {\n      var results = [];\n      [ 'any', 'all', 'none' ].forEach(function(type) {\n        results.push(_this2.runChecksSync(type, node, options, context));\n      });\n      var result = getResult(results);\n      if (result) {\n        result.node = node.actualNode ? new axe.utils.DqElement(node.actualNode, options) : null;\n        ruleResult.nodes.push(result);\n      }\n    });\n    if (options.performanceTimer) {\n      this._logRulePerformance();\n    }\n    return ruleResult;\n  };\n  Rule.prototype._trackPerformance = function() {\n    this._markStart = 'mark_rule_start_' + this.id;\n    this._markEnd = 'mark_rule_end_' + this.id;\n    this._markChecksStart = 'mark_runchecks_start_' + this.id;\n    this._markChecksEnd = 'mark_runchecks_end_' + this.id;\n  };\n  Rule.prototype._logGatherPerformance = function(nodes) {\n    axe.log('gather (', nodes.length, '):', axe.utils.performanceTimer.timeElapsed() + 'ms');\n    axe.utils.performanceTimer.mark(this._markChecksStart);\n  };\n  Rule.prototype._logRulePerformance = function() {\n    axe.utils.performanceTimer.mark(this._markChecksEnd);\n    axe.utils.performanceTimer.mark(this._markEnd);\n    axe.utils.performanceTimer.measure('runchecks_' + this.id, this._markChecksStart, this._markChecksEnd);\n    axe.utils.performanceTimer.measure('rule_' + this.id, this._markStart, this._markEnd);\n  };\n  function getResult(results) {\n    if (results.length) {\n      var hasResults = false, result = {};\n      results.forEach(function(r) {\n        var res = r.results.filter(function(result) {\n          return result;\n        });\n        result[r.type] = res;\n        if (res.length) {\n          hasResults = true;\n        }\n      });\n      if (hasResults) {\n        return result;\n      }\n      return null;\n    }\n  }\n  Rule.prototype.gatherAndMatchNodes = function(context, options) {\n    var _this3 = this;\n    var markMatchesStart = 'mark_matches_start_' + this.id;\n    var markMatchesEnd = 'mark_matches_end_' + this.id;\n    var nodes = this.gather(context, options);\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.mark(markMatchesStart);\n    }\n    nodes = nodes.filter(function(node) {\n      return _this3.matches(node.actualNode, node, context);\n    });\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.mark(markMatchesEnd);\n      axe.utils.performanceTimer.measure('rule_' + this.id + '#matches', markMatchesStart, markMatchesEnd);\n    }\n    return nodes;\n  };\n  function findAfterChecks(rule) {\n    'use strict';\n    return axe.utils.getAllChecks(rule).map(function(c) {\n      var check = rule._audit.checks[c.id || c];\n      return check && typeof check.after === 'function' ? check : null;\n    }).filter(Boolean);\n  }\n  function findCheckResults(nodes, checkID) {\n    'use strict';\n    var checkResults = [];\n    nodes.forEach(function(nodeResult) {\n      var checks = axe.utils.getAllChecks(nodeResult);\n      checks.forEach(function(checkResult) {\n        if (checkResult.id === checkID) {\n          checkResults.push(checkResult);\n        }\n      });\n    });\n    return checkResults;\n  }\n  function filterChecks(checks) {\n    'use strict';\n    return checks.filter(function(check) {\n      return check.filtered !== true;\n    });\n  }\n  function sanitizeNodes(result) {\n    'use strict';\n    var checkTypes = [ 'any', 'all', 'none' ];\n    var nodes = result.nodes.filter(function(detail) {\n      var length = 0;\n      checkTypes.forEach(function(type) {\n        detail[type] = filterChecks(detail[type]);\n        length += detail[type].length;\n      });\n      return length > 0;\n    });\n    if (result.pageLevel && nodes.length) {\n      nodes = [ nodes.reduce(function(a, b) {\n        if (a) {\n          checkTypes.forEach(function(type) {\n            a[type].push.apply(a[type], b[type]);\n          });\n          return a;\n        }\n      }) ];\n    }\n    return nodes;\n  }\n  Rule.prototype.after = function(result, options) {\n    'use strict';\n    var afterChecks = findAfterChecks(this);\n    var ruleID = this.id;\n    afterChecks.forEach(function(check) {\n      var beforeResults = findCheckResults(result.nodes, check.id);\n      var option = axe.utils.getCheckOption(check, ruleID, options);\n      var afterResults = check.after(beforeResults, option);\n      beforeResults.forEach(function(item) {\n        if (afterResults.indexOf(item) === -1) {\n          item.filtered = true;\n        }\n      });\n    });\n    result.nodes = sanitizeNodes(result);\n    return result;\n  };\n  Rule.prototype.configure = function(spec) {\n    'use strict';\n    if (spec.hasOwnProperty('selector')) {\n      this.selector = spec.selector;\n    }\n    if (spec.hasOwnProperty('excludeHidden')) {\n      this.excludeHidden = typeof spec.excludeHidden === 'boolean' ? spec.excludeHidden : true;\n    }\n    if (spec.hasOwnProperty('enabled')) {\n      this.enabled = typeof spec.enabled === 'boolean' ? spec.enabled : true;\n    }\n    if (spec.hasOwnProperty('pageLevel')) {\n      this.pageLevel = typeof spec.pageLevel === 'boolean' ? spec.pageLevel : false;\n    }\n    if (spec.hasOwnProperty('any')) {\n      this.any = spec.any;\n    }\n    if (spec.hasOwnProperty('all')) {\n      this.all = spec.all;\n    }\n    if (spec.hasOwnProperty('none')) {\n      this.none = spec.none;\n    }\n    if (spec.hasOwnProperty('tags')) {\n      this.tags = spec.tags;\n    }\n    if (spec.hasOwnProperty('matches')) {\n      if (typeof spec.matches === 'string') {\n        this.matches = new Function('return ' + spec.matches + ';')();\n      } else {\n        this.matches = spec.matches;\n      }\n    }\n  };\n  'use strict';\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      _defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      _defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  }\n  var whitespaceRegex = /[\\t\\r\\n\\f]/g;\n  var AbstractVirtualNode = function() {\n    function AbstractVirtualNode() {\n      _classCallCheck(this, AbstractVirtualNode);\n      this.children = [];\n      this.parent = null;\n    }\n    _createClass(AbstractVirtualNode, [ {\n      key: 'attr',\n      value: function attr() {\n        throw new Error('VirtualNode class must have a \"attr\" function');\n      }\n    }, {\n      key: 'hasAttr',\n      value: function hasAttr() {\n        throw new Error('VirtualNode class must have a \"hasAttr\" function');\n      }\n    }, {\n      key: 'hasClass',\n      value: function hasClass(className) {\n        var classAttr = this.attr('class');\n        if (!classAttr) {\n          return false;\n        }\n        var selector = ' ' + className + ' ';\n        return (' ' + classAttr + ' ').replace(whitespaceRegex, ' ').indexOf(selector) >= 0;\n      }\n    }, {\n      key: 'props',\n      get: function get() {\n        throw new Error('VirtualNode class must have a \"props\" object consisting ' + 'of \"nodeType\" and \"nodeName\" properties');\n      }\n    } ]);\n    return AbstractVirtualNode;\n  }();\n  axe.AbstractVirtualNode = AbstractVirtualNode;\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      _defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      _defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  }\n  function _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {\n      return call;\n    }\n    return _assertThisInitialized(self);\n  }\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError('this hasn\\'t been initialised - super() hasn\\'t been called');\n    }\n    return self;\n  }\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) {\n      _setPrototypeOf(subClass, superClass);\n    }\n  }\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n  var SerialVirtualNode = function(_axe$AbstractVirtualN) {\n    _inherits(SerialVirtualNode, _axe$AbstractVirtualN);\n    function SerialVirtualNode(serialNode) {\n      var _this;\n      _classCallCheck(this, SerialVirtualNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(SerialVirtualNode).call(this));\n      _this._props = normaliseProps(serialNode);\n      _this._attrs = normaliseAttrs(serialNode);\n      return _this;\n    }\n    _createClass(SerialVirtualNode, [ {\n      key: 'attr',\n      value: function attr(attrName) {\n        return this._attrs[attrName] || null;\n      }\n    }, {\n      key: 'hasAttr',\n      value: function hasAttr(attrName) {\n        return this._attrs[attrName] !== undefined;\n      }\n    }, {\n      key: 'props',\n      get: function get() {\n        return this._props;\n      }\n    } ]);\n    return SerialVirtualNode;\n  }(axe.AbstractVirtualNode);\n  function normaliseProps(serialNode) {\n    var nodeName = serialNode.nodeName, _serialNode$nodeType = serialNode.nodeType, nodeType = _serialNode$nodeType === void 0 ? 1 : _serialNode$nodeType;\n    axe.utils.assert(nodeType === 1, 'nodeType has to be undefined or 1, got \\''.concat(nodeType, '\\''));\n    axe.utils.assert(typeof nodeName === 'string', 'nodeName has to be a string, got \\''.concat(nodeName, '\\''));\n    var props = _extends({}, serialNode, {\n      nodeType: nodeType,\n      nodeName: nodeName.toLowerCase()\n    });\n    delete props.attributes;\n    return Object.freeze(props);\n  }\n  function normaliseAttrs(_ref) {\n    var _ref$attributes = _ref.attributes, attributes = _ref$attributes === void 0 ? {} : _ref$attributes;\n    var attrMap = {\n      htmlFor: 'for',\n      className: 'class'\n    };\n    return Object.keys(attributes).reduce(function(attrs, attrName) {\n      var value = attributes[attrName];\n      axe.utils.assert(_typeof(value) !== 'object' || value === null, 'expects attributes not to be an object, \\''.concat(attrName, '\\' was'));\n      if (value !== undefined) {\n        var mappedName = attrMap[attrName] || attrName;\n        attrs[mappedName] = value !== null ? String(value) : null;\n      }\n      return attrs;\n    }, {});\n  }\n  axe.SerialVirtualNode = SerialVirtualNode;\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError('Cannot call a class as a function');\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ('value' in descriptor) {\n        descriptor.writable = true;\n      }\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) {\n      _defineProperties(Constructor.prototype, protoProps);\n    }\n    if (staticProps) {\n      _defineProperties(Constructor, staticProps);\n    }\n    return Constructor;\n  }\n  function _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {\n      return call;\n    }\n    return _assertThisInitialized(self);\n  }\n  function _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n      return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n  }\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError('this hasn\\'t been initialised - super() hasn\\'t been called');\n    }\n    return self;\n  }\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== 'function' && superClass !== null) {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) {\n      _setPrototypeOf(subClass, superClass);\n    }\n  }\n  function _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n      o.__proto__ = p;\n      return o;\n    };\n    return _setPrototypeOf(o, p);\n  }\n  var isXHTMLGlobal;\n  var VirtualNode = function(_axe$AbstractVirtualN) {\n    _inherits(VirtualNode, _axe$AbstractVirtualN);\n    function VirtualNode(node, parent, shadowId) {\n      var _this;\n      _classCallCheck(this, VirtualNode);\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(VirtualNode).call(this));\n      _this.shadowId = shadowId;\n      _this.children = [];\n      _this.actualNode = node;\n      _this.parent = parent;\n      _this._isHidden = null;\n      _this._cache = {};\n      if (typeof isXHTMLGlobal === 'undefined') {\n        isXHTMLGlobal = axe.utils.isXHTML(node.ownerDocument);\n      }\n      _this._isXHTML = isXHTMLGlobal;\n      if (axe._cache.get('nodeMap')) {\n        axe._cache.get('nodeMap').set(node, _assertThisInitialized(_this));\n      }\n      return _this;\n    }\n    _createClass(VirtualNode, [ {\n      key: 'attr',\n      value: function attr(attrName) {\n        if (typeof this.actualNode.getAttribute !== 'function') {\n          return null;\n        }\n        return this.actualNode.getAttribute(attrName);\n      }\n    }, {\n      key: 'hasAttr',\n      value: function hasAttr(attrName) {\n        if (typeof this.actualNode.hasAttribute !== 'function') {\n          return false;\n        }\n        return this.actualNode.hasAttribute(attrName);\n      }\n    }, {\n      key: 'getComputedStylePropertyValue',\n      value: function getComputedStylePropertyValue(property) {\n        var key = 'computedStyle_' + property;\n        if (!this._cache.hasOwnProperty(key)) {\n          if (!this._cache.hasOwnProperty('computedStyle')) {\n            this._cache.computedStyle = window.getComputedStyle(this.actualNode);\n          }\n          this._cache[key] = this._cache.computedStyle.getPropertyValue(property);\n        }\n        return this._cache[key];\n      }\n    }, {\n      key: 'props',\n      get: function get() {\n        var _this$actualNode = this.actualNode, nodeType = _this$actualNode.nodeType, nodeName = _this$actualNode.nodeName, id = _this$actualNode.id, type = _this$actualNode.type, multiple = _this$actualNode.multiple;\n        return {\n          nodeType: nodeType,\n          nodeName: this._isXHTML ? nodeName : nodeName.toLowerCase(),\n          id: id,\n          type: type,\n          multiple: multiple\n        };\n      }\n    }, {\n      key: 'isFocusable',\n      get: function get() {\n        if (!this._cache.hasOwnProperty('isFocusable')) {\n          this._cache.isFocusable = axe.commons.dom.isFocusable(this.actualNode);\n        }\n        return this._cache.isFocusable;\n      }\n    }, {\n      key: 'tabbableElements',\n      get: function get() {\n        if (!this._cache.hasOwnProperty('tabbableElements')) {\n          this._cache.tabbableElements = axe.commons.dom.getTabbableElements(this);\n        }\n        return this._cache.tabbableElements;\n      }\n    }, {\n      key: 'clientRects',\n      get: function get() {\n        if (!this._cache.hasOwnProperty('clientRects')) {\n          this._cache.clientRects = Array.from(this.actualNode.getClientRects()).filter(function(rect) {\n            return rect.width > 0;\n          });\n        }\n        return this._cache.clientRects;\n      }\n    }, {\n      key: 'boundingClientRect',\n      get: function get() {\n        if (!this._cache.hasOwnProperty('boundingClientRect')) {\n          this._cache.boundingClientRect = this.actualNode.getBoundingClientRect();\n        }\n        return this._cache.boundingClientRect;\n      }\n    } ]);\n    return VirtualNode;\n  }(axe.AbstractVirtualNode);\n  axe.VirtualNode = VirtualNode;\n  'use strict';\n  (function(axe) {\n    var definitions = [ {\n      name: 'NA',\n      value: 'inapplicable',\n      priority: 0,\n      group: 'inapplicable'\n    }, {\n      name: 'PASS',\n      value: 'passed',\n      priority: 1,\n      group: 'passes'\n    }, {\n      name: 'CANTTELL',\n      value: 'cantTell',\n      priority: 2,\n      group: 'incomplete'\n    }, {\n      name: 'FAIL',\n      value: 'failed',\n      priority: 3,\n      group: 'violations'\n    } ];\n    var constants = {\n      helpUrlBase: 'https://dequeuniversity.com/rules/',\n      results: [],\n      resultGroups: [],\n      resultGroupMap: {},\n      impact: Object.freeze([ 'minor', 'moderate', 'serious', 'critical' ]),\n      preload: Object.freeze({\n        assets: [ 'cssom', 'media' ],\n        timeout: 1e4\n      })\n    };\n    definitions.forEach(function(definition) {\n      var name = definition.name;\n      var value = definition.value;\n      var priority = definition.priority;\n      var group = definition.group;\n      constants[name] = value;\n      constants[name + '_PRIO'] = priority;\n      constants[name + '_GROUP'] = group;\n      constants.results[priority] = value;\n      constants.resultGroups[priority] = group;\n      constants.resultGroupMap[value] = group;\n    });\n    Object.freeze(constants.results);\n    Object.freeze(constants.resultGroups);\n    Object.freeze(constants.resultGroupMap);\n    Object.freeze(constants);\n    Object.defineProperty(axe, 'constants', {\n      value: constants,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n  })(axe);\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  axe.log = function() {\n    'use strict';\n    if ((typeof console === 'undefined' ? 'undefined' : _typeof(console)) === 'object' && console.log) {\n      Function.prototype.apply.call(console.log, console, arguments);\n    }\n  };\n  'use strict';\n  function cleanupPlugins(resolve, reject) {\n    'use strict';\n    resolve = resolve || function() {};\n    reject = reject || axe.log;\n    if (!axe._audit) {\n      throw new Error('No audit configured');\n    }\n    var q = axe.utils.queue();\n    var cleanupErrors = [];\n    Object.keys(axe.plugins).forEach(function(key) {\n      q.defer(function(res) {\n        var rej = function rej(err) {\n          cleanupErrors.push(err);\n          res();\n        };\n        try {\n          axe.plugins[key].cleanup(res, rej);\n        } catch (err) {\n          rej(err);\n        }\n      });\n    });\n    var flattenedTree = axe.utils.getFlattenedTree(document.body);\n    axe.utils.querySelectorAll(flattenedTree, 'iframe, frame').forEach(function(node) {\n      q.defer(function(res, rej) {\n        return axe.utils.sendCommandToFrame(node.actualNode, {\n          command: 'cleanup-plugin'\n        }, res, rej);\n      });\n    });\n    q.then(function(results) {\n      if (cleanupErrors.length === 0) {\n        resolve(results);\n      } else {\n        reject(cleanupErrors);\n      }\n    })['catch'](reject);\n  }\n  axe.cleanup = cleanupPlugins;\n  'use strict';\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  }\n  function _iterableToArrayLimit(arr, i) {\n    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === '[object Arguments]')) {\n      return;\n    }\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) {\n          break;\n        }\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return'] != null) {\n          _i['return']();\n        }\n      } finally {\n        if (_d) {\n          throw _e;\n        }\n      }\n    }\n    return _arr;\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) {\n      return arr;\n    }\n  }\n  function configureChecksRulesAndBranding(spec) {\n    'use strict';\n    var audit;\n    audit = axe._audit;\n    if (!audit) {\n      throw new Error('No audit configured');\n    }\n    if (spec.axeVersion || spec.ver) {\n      var specVersion = spec.axeVersion || spec.ver;\n      if (!/^\\d+\\.\\d+\\.\\d+(-canary)?/.test(specVersion)) {\n        throw new Error('Invalid configured version '.concat(specVersion));\n      }\n      var _specVersion$split = specVersion.split('-'), _specVersion$split2 = _slicedToArray(_specVersion$split, 2), version = _specVersion$split2[0], canary = _specVersion$split2[1];\n      var _version$split$map = version.split('.').map(Number), _version$split$map2 = _slicedToArray(_version$split$map, 3), major = _version$split$map2[0], minor = _version$split$map2[1], patch = _version$split$map2[2];\n      var _axe$version$split = axe.version.split('-'), _axe$version$split2 = _slicedToArray(_axe$version$split, 2), axeVersion = _axe$version$split2[0], axeCanary = _axe$version$split2[1];\n      var _axeVersion$split$map = axeVersion.split('.').map(Number), _axeVersion$split$map2 = _slicedToArray(_axeVersion$split$map, 3), axeMajor = _axeVersion$split$map2[0], axeMinor = _axeVersion$split$map2[1], axePatch = _axeVersion$split$map2[2];\n      if (major !== axeMajor || axeMinor < minor || axeMinor === minor && axePatch < patch || major === axeMajor && minor === axeMinor && patch === axePatch && canary && canary !== axeCanary) {\n        throw new Error('Configured version '.concat(specVersion, ' is not compatible with current axe version ').concat(axe.version));\n      }\n    }\n    if (spec.reporter && (typeof spec.reporter === 'function' || reporters[spec.reporter])) {\n      audit.reporter = spec.reporter;\n    }\n    if (spec.checks) {\n      if (!Array.isArray(spec.checks)) {\n        throw new TypeError('Checks property must be an array');\n      }\n      spec.checks.forEach(function(check) {\n        if (!check.id) {\n          throw new TypeError('Configured check '.concat(JSON.stringify(check), ' is invalid. Checks must be an object with at least an id property'));\n        }\n        audit.addCheck(check);\n      });\n    }\n    var modifiedRules = [];\n    if (spec.rules) {\n      if (!Array.isArray(spec.rules)) {\n        throw new TypeError('Rules property must be an array');\n      }\n      spec.rules.forEach(function(rule) {\n        if (!rule.id) {\n          throw new TypeError('Configured rule '.concat(JSON.stringify(rule), ' is invalid. Rules must be an object with at least an id property'));\n        }\n        modifiedRules.push(rule.id);\n        audit.addRule(rule);\n      });\n    }\n    if (spec.disableOtherRules) {\n      audit.rules.forEach(function(rule) {\n        if (modifiedRules.includes(rule.id) === false) {\n          rule.enabled = false;\n        }\n      });\n    }\n    if (typeof spec.branding !== 'undefined') {\n      audit.setBranding(spec.branding);\n    } else {\n      audit._constructHelpUrls();\n    }\n    if (spec.tagExclude) {\n      audit.tagExclude = spec.tagExclude;\n    }\n    if (spec.locale) {\n      audit.applyLocale(spec.locale);\n    }\n    if (spec.noHtml) {\n      audit.noHtml = true;\n    }\n  }\n  axe.configure = configureChecksRulesAndBranding;\n  'use strict';\n  axe.getRules = function(tags) {\n    'use strict';\n    tags = tags || [];\n    var matchingRules = !tags.length ? axe._audit.rules : axe._audit.rules.filter(function(item) {\n      return !!tags.filter(function(tag) {\n        return item.tags.indexOf(tag) !== -1;\n      }).length;\n    });\n    var ruleData = axe._audit.data.rules || {};\n    return matchingRules.map(function(matchingRule) {\n      var rd = ruleData[matchingRule.id] || {};\n      return {\n        ruleId: matchingRule.id,\n        description: rd.description,\n        help: rd.help,\n        helpUrl: rd.helpUrl,\n        tags: matchingRule.tags\n      };\n    });\n  };\n  'use strict';\n  function runCommand(data, keepalive, callback) {\n    'use strict';\n    var resolve = callback;\n    var reject = function reject(err) {\n      if (err instanceof Error === false) {\n        err = new Error(err);\n      }\n      callback(err);\n    };\n    var context = data && data.context || {};\n    if (context.hasOwnProperty('include') && !context.include.length) {\n      context.include = [ document ];\n    }\n    var options = data && data.options || {};\n    switch (data.command) {\n     case 'rules':\n      return runRules(context, options, function(results, cleanup) {\n        resolve(results);\n        cleanup();\n      }, reject);\n\n     case 'cleanup-plugin':\n      return cleanupPlugins(resolve, reject);\n\n     default:\n      if (axe._audit && axe._audit.commands && axe._audit.commands[data.command]) {\n        return axe._audit.commands[data.command](data, callback);\n      }\n    }\n  }\n  axe._load = function(audit) {\n    'use strict';\n    axe.utils.respondable.subscribe('axe.ping', function(data, keepalive, respond) {\n      respond({\n        axe: true\n      });\n    });\n    axe.utils.respondable.subscribe('axe.start', runCommand);\n    axe._audit = new Audit(audit);\n  };\n  'use strict';\n  var axe = axe || {};\n  axe.plugins = {};\n  function Plugin(spec) {\n    'use strict';\n    this._run = spec.run;\n    this._collect = spec.collect;\n    this._registry = {};\n    spec.commands.forEach(function(command) {\n      axe._audit.registerCommand(command);\n    });\n  }\n  Plugin.prototype.run = function() {\n    'use strict';\n    return this._run.apply(this, arguments);\n  };\n  Plugin.prototype.collect = function() {\n    'use strict';\n    return this._collect.apply(this, arguments);\n  };\n  Plugin.prototype.cleanup = function(done) {\n    'use strict';\n    var q = axe.utils.queue();\n    var that = this;\n    Object.keys(this._registry).forEach(function(key) {\n      q.defer(function(done) {\n        that._registry[key].cleanup(done);\n      });\n    });\n    q.then(function() {\n      done();\n    });\n  };\n  Plugin.prototype.add = function(impl) {\n    'use strict';\n    this._registry[impl.id] = impl;\n  };\n  axe.registerPlugin = function(plugin) {\n    'use strict';\n    axe.plugins[plugin.id] = new Plugin(plugin);\n  };\n  'use strict';\n  var reporters = {};\n  var defaultReporter;\n  axe.getReporter = function(reporter) {\n    'use strict';\n    if (typeof reporter === 'string' && reporters[reporter]) {\n      return reporters[reporter];\n    }\n    if (typeof reporter === 'function') {\n      return reporter;\n    }\n    return defaultReporter;\n  };\n  axe.addReporter = function registerReporter(name, cb, isDefault) {\n    'use strict';\n    reporters[name] = cb;\n    if (isDefault) {\n      defaultReporter = cb;\n    }\n  };\n  'use strict';\n  function resetConfiguration() {\n    'use strict';\n    var audit = axe._audit;\n    if (!audit) {\n      throw new Error('No audit configured');\n    }\n    audit.resetRulesAndChecks();\n  }\n  axe.reset = resetConfiguration;\n  'use strict';\n  function cleanup() {\n    axe._memoizedFns.forEach(function(fn) {\n      return fn.clear();\n    });\n    axe._cache.clear();\n    axe._tree = undefined;\n    axe._selectorData = undefined;\n  }\n  function runRules(context, options, resolve, reject) {\n    'use strict';\n    try {\n      context = new Context(context);\n      axe._tree = context.flatTree;\n      axe._selectorData = axe.utils.getSelectorData(context.flatTree);\n    } catch (e) {\n      cleanup();\n      return reject(e);\n    }\n    var q = axe.utils.queue();\n    var audit = axe._audit;\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.auditStart();\n    }\n    if (context.frames.length && options.iframes !== false) {\n      q.defer(function(res, rej) {\n        axe.utils.collectResultsFromFrames(context, options, 'rules', null, res, rej);\n      });\n    }\n    var scrollState;\n    q.defer(function(res, rej) {\n      if (options.restoreScroll) {\n        scrollState = axe.utils.getScrollState();\n      }\n      audit.run(context, options, res, rej);\n    });\n    q.then(function(data) {\n      try {\n        if (scrollState) {\n          axe.utils.setScrollState(scrollState);\n        }\n        if (options.performanceTimer) {\n          axe.utils.performanceTimer.auditEnd();\n        }\n        var results = axe.utils.mergeResults(data.map(function(results) {\n          return {\n            results: results\n          };\n        }));\n        if (context.initiator) {\n          results = audit.after(results, options);\n          results.forEach(axe.utils.publishMetaData);\n          results = results.map(axe.utils.finalizeRuleResult);\n        }\n        try {\n          resolve(results, cleanup);\n        } catch (e) {\n          cleanup();\n          axe.log(e);\n        }\n      } catch (e) {\n        cleanup();\n        reject(e);\n      }\n    })['catch'](function(e) {\n      cleanup();\n      reject(e);\n    });\n  }\n  axe._runRules = runRules;\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.runVirtualRule = function(ruleId, vNode) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    options.reporter = options.reporter || axe._audit.reporter || 'v1';\n    axe._selectorData = {};\n    if (vNode instanceof axe.AbstractVirtualNode === false) {\n      vNode = new SerialVirtualNode(vNode);\n    }\n    var rule = axe._audit.rules.find(function(rule) {\n      return rule.id === ruleId;\n    });\n    if (!rule) {\n      throw new Error('unknown rule `' + ruleId + '`');\n    }\n    rule = Object.create(rule, {\n      excludeHidden: {\n        value: false\n      }\n    });\n    var context = {\n      include: [ vNode ]\n    };\n    var rawResults = rule.runSync(context, options);\n    axe.utils.publishMetaData(rawResults);\n    axe.utils.finalizeRuleResult(rawResults);\n    var results = axe.utils.aggregateResult([ rawResults ]);\n    results.violations.forEach(function(result) {\n      return result.nodes.forEach(function(nodeResult) {\n        nodeResult.failureSummary = helpers.failureSummary(nodeResult);\n      });\n    });\n    return _extends({}, helpers.getEnvironmentData(), {}, results, {\n      toolOptions: options\n    });\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function isContext(potential) {\n    'use strict';\n    switch (true) {\n     case typeof potential === 'string':\n     case Array.isArray(potential):\n     case Node && potential instanceof Node:\n     case NodeList && potential instanceof NodeList:\n      return true;\n\n     case _typeof(potential) !== 'object':\n      return false;\n\n     case potential.include !== undefined:\n     case potential.exclude !== undefined:\n     case typeof potential.length === 'number':\n      return true;\n\n     default:\n      return false;\n    }\n  }\n  var noop = function noop() {};\n  function normalizeRunParams(context, options, callback) {\n    'use strict';\n    var typeErr = new TypeError('axe.run arguments are invalid');\n    if (!isContext(context)) {\n      if (callback !== undefined) {\n        throw typeErr;\n      }\n      callback = options;\n      options = context;\n      context = document;\n    }\n    if (_typeof(options) !== 'object') {\n      if (callback !== undefined) {\n        throw typeErr;\n      }\n      callback = options;\n      options = {};\n    }\n    if (typeof callback !== 'function' && callback !== undefined) {\n      throw typeErr;\n    }\n    return {\n      context: context,\n      options: options,\n      callback: callback || noop\n    };\n  }\n  axe.run = function(context, options, callback) {\n    'use strict';\n    if (!axe._audit) {\n      throw new Error('No audit configured');\n    }\n    var args = normalizeRunParams(context, options, callback);\n    context = args.context;\n    options = args.options;\n    callback = args.callback;\n    options.reporter = options.reporter || axe._audit.reporter || 'v1';\n    if (options.performanceTimer) {\n      axe.utils.performanceTimer.start();\n    }\n    var p;\n    var reject = noop;\n    var resolve = noop;\n    if (typeof Promise === 'function' && callback === noop) {\n      p = new Promise(function(_resolve, _reject) {\n        reject = _reject;\n        resolve = _resolve;\n      });\n    }\n    if (axe._running) {\n      var err = 'Axe is already running. Use `await axe.run()` to wait ' + 'for the previous run to finish before starting a new run.';\n      callback(err);\n      reject(err);\n      return p;\n    }\n    axe._running = true;\n    axe._runRules(context, options, function(rawResults, cleanup) {\n      var respond = function respond(results) {\n        axe._running = false;\n        cleanup();\n        try {\n          callback(null, results);\n        } catch (e) {\n          axe.log(e);\n        }\n        resolve(results);\n      };\n      if (options.performanceTimer) {\n        axe.utils.performanceTimer.end();\n      }\n      try {\n        var reporter = axe.getReporter(options.reporter);\n        var results = reporter(rawResults, options, respond);\n        if (results !== undefined) {\n          respond(results);\n        }\n      } catch (err) {\n        axe._running = false;\n        cleanup();\n        callback(err);\n        reject(err);\n      }\n    }, function(err) {\n      axe._running = false;\n      callback(err);\n      reject(err);\n    });\n    return p;\n  };\n  'use strict';\n  helpers.failureSummary = function failureSummary(nodeData) {\n    'use strict';\n    var failingChecks = {};\n    failingChecks.none = nodeData.none.concat(nodeData.all);\n    failingChecks.any = nodeData.any;\n    return Object.keys(failingChecks).map(function(key) {\n      if (!failingChecks[key].length) {\n        return;\n      }\n      var sum = axe._audit.data.failureSummaries[key];\n      if (sum && typeof sum.failureMessage === 'function') {\n        return sum.failureMessage(failingChecks[key].map(function(check) {\n          return check.message || '';\n        }));\n      }\n    }).filter(function(i) {\n      return i !== undefined;\n    }).join('\\n\\n');\n  };\n  'use strict';\n  helpers.getEnvironmentData = function getEnvironmentData() {\n    var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n    var _win$screen = win.screen, screen = _win$screen === void 0 ? {} : _win$screen, _win$navigator = win.navigator, navigator = _win$navigator === void 0 ? {} : _win$navigator, _win$location = win.location, location = _win$location === void 0 ? {} : _win$location, innerHeight = win.innerHeight, innerWidth = win.innerWidth;\n    var orientation = screen.msOrientation || screen.orientation || screen.mozOrientation || {};\n    return {\n      testEngine: {\n        name: 'axe-core',\n        version: axe.version\n      },\n      testRunner: {\n        name: axe._audit.brand\n      },\n      testEnvironment: {\n        userAgent: navigator.userAgent,\n        windowWidth: innerWidth,\n        windowHeight: innerHeight,\n        orientationAngle: orientation.angle,\n        orientationType: orientation.type\n      },\n      timestamp: new Date().toISOString(),\n      url: location.href\n    };\n  };\n  'use strict';\n  helpers.incompleteFallbackMessage = function incompleteFallbackMessage() {\n    'use strict';\n    return typeof axe._audit.data.incompleteFallbackMessage === 'function' ? axe._audit.data.incompleteFallbackMessage() : axe._audit.data.incompleteFallbackMessage;\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function normalizeRelatedNodes(node, options) {\n    'use strict';\n    [ 'any', 'all', 'none' ].forEach(function(type) {\n      if (!Array.isArray(node[type])) {\n        return;\n      }\n      node[type].filter(function(checkRes) {\n        return Array.isArray(checkRes.relatedNodes);\n      }).forEach(function(checkRes) {\n        checkRes.relatedNodes = checkRes.relatedNodes.map(function(relatedNode) {\n          var res = {\n            html: relatedNode.source\n          };\n          if (options.elementRef && !relatedNode.fromFrame) {\n            res.element = relatedNode.element;\n          }\n          if (options.selectors !== false || relatedNode.fromFrame) {\n            res.target = relatedNode.selector;\n          }\n          if (options.xpath) {\n            res.xpath = relatedNode.xpath;\n          }\n          return res;\n        });\n      });\n    });\n  }\n  var resultKeys = axe.constants.resultGroups;\n  helpers.processAggregate = function(results, options) {\n    var resultObject = axe.utils.aggregateResult(results);\n    resultKeys.forEach(function(key) {\n      if (options.resultTypes && !options.resultTypes.includes(key)) {\n        (resultObject[key] || []).forEach(function(ruleResult) {\n          if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {\n            ruleResult.nodes = [ ruleResult.nodes[0] ];\n          }\n        });\n      }\n      resultObject[key] = (resultObject[key] || []).map(function(ruleResult) {\n        ruleResult = Object.assign({}, ruleResult);\n        if (Array.isArray(ruleResult.nodes) && ruleResult.nodes.length > 0) {\n          ruleResult.nodes = ruleResult.nodes.map(function(subResult) {\n            if (_typeof(subResult.node) === 'object') {\n              subResult.html = subResult.node.source;\n              if (options.elementRef && !subResult.node.fromFrame) {\n                subResult.element = subResult.node.element;\n              }\n              if (options.selectors !== false || subResult.node.fromFrame) {\n                subResult.target = subResult.node.selector;\n              }\n              if (options.xpath) {\n                subResult.xpath = subResult.node.xpath;\n              }\n            }\n            delete subResult.result;\n            delete subResult.node;\n            normalizeRelatedNodes(subResult, options);\n            return subResult;\n          });\n        }\n        resultKeys.forEach(function(key) {\n          return delete ruleResult[key];\n        });\n        delete ruleResult.pageLevel;\n        delete ruleResult.result;\n        return ruleResult;\n      });\n    });\n    return resultObject;\n  };\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.addReporter('na', function(results, options, callback) {\n    'use strict';\n    console.warn('\"na\" reporter will be deprecated in axe v4.0. Use the \"v2\" reporter instead.');\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    callback(_extends({}, helpers.getEnvironmentData(), {\n      toolOptions: options,\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable\n    }));\n  });\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.addReporter('no-passes', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options.resultTypes = [ 'violations' ];\n    var out = helpers.processAggregate(results, options);\n    callback(_extends({}, helpers.getEnvironmentData(), {\n      toolOptions: options,\n      violations: out.violations\n    }));\n  });\n  'use strict';\n  axe.addReporter('rawEnv', function(results, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    function rawCallback(raw) {\n      var env = helpers.getEnvironmentData();\n      callback({\n        raw: raw,\n        env: env\n      });\n    }\n    axe.getReporter('raw')(results, options, rawCallback);\n  });\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.addReporter('raw', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (!results || !Array.isArray(results)) {\n      return callback(results);\n    }\n    var transformedResults = results.map(function(result) {\n      var transformedResult = _extends({}, result);\n      var types = [ 'passes', 'violations', 'incomplete', 'inapplicable' ];\n      for (var _i = 0, _types = types; _i < _types.length; _i++) {\n        var type = _types[_i];\n        if (transformedResult[type] && Array.isArray(transformedResult[type])) {\n          transformedResult[type] = transformedResult[type].map(function(typeResult) {\n            return _extends({}, typeResult, {\n              node: typeResult.node.toJSON()\n            });\n          });\n        }\n      }\n      return transformedResult;\n    });\n    callback(transformedResults);\n  });\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.addReporter('v1', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    var addFailureSummaries = function addFailureSummaries(result) {\n      result.nodes.forEach(function(nodeResult) {\n        nodeResult.failureSummary = helpers.failureSummary(nodeResult);\n      });\n    };\n    out.incomplete.forEach(addFailureSummaries);\n    out.violations.forEach(addFailureSummaries);\n    callback(_extends({}, helpers.getEnvironmentData(), {\n      toolOptions: options,\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable\n    }));\n  });\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  axe.addReporter('v2', function(results, options, callback) {\n    'use strict';\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    var out = helpers.processAggregate(results, options);\n    callback(_extends({}, helpers.getEnvironmentData(), {\n      toolOptions: options,\n      violations: out.violations,\n      passes: out.passes,\n      incomplete: out.incomplete,\n      inapplicable: out.inapplicable\n    }));\n  }, true);\n  'use strict';\n  axe.utils.aggregate = function(map, values, initial) {\n    values = values.slice();\n    if (initial) {\n      values.push(initial);\n    }\n    var sorting = values.map(function(val) {\n      return map.indexOf(val);\n    }).sort();\n    return map[sorting.pop()];\n  };\n  'use strict';\n  var _axe$constants = axe.constants, CANTTELL_PRIO = _axe$constants.CANTTELL_PRIO, FAIL_PRIO = _axe$constants.FAIL_PRIO;\n  var checkMap = [];\n  checkMap[axe.constants.PASS_PRIO] = true;\n  checkMap[axe.constants.CANTTELL_PRIO] = null;\n  checkMap[axe.constants.FAIL_PRIO] = false;\n  var checkTypes = [ 'any', 'all', 'none' ];\n  function anyAllNone(obj, functor) {\n    return checkTypes.reduce(function(out, type) {\n      out[type] = (obj[type] || []).map(function(val) {\n        return functor(val, type);\n      });\n      return out;\n    }, {});\n  }\n  axe.utils.aggregateChecks = function(nodeResOriginal) {\n    var nodeResult = Object.assign({}, nodeResOriginal);\n    anyAllNone(nodeResult, function(check, type) {\n      var i = typeof check.result === 'undefined' ? -1 : checkMap.indexOf(check.result);\n      check.priority = i !== -1 ? i : axe.constants.CANTTELL_PRIO;\n      if (type === 'none') {\n        if (check.priority === axe.constants.PASS_PRIO) {\n          check.priority = axe.constants.FAIL_PRIO;\n        } else if (check.priority === axe.constants.FAIL_PRIO) {\n          check.priority = axe.constants.PASS_PRIO;\n        }\n      }\n    });\n    var priorities = {\n      all: nodeResult.all.reduce(function(a, b) {\n        return Math.max(a, b.priority);\n      }, 0),\n      none: nodeResult.none.reduce(function(a, b) {\n        return Math.max(a, b.priority);\n      }, 0),\n      any: nodeResult.any.reduce(function(a, b) {\n        return Math.min(a, b.priority);\n      }, 4) % 4\n    };\n    nodeResult.priority = Math.max(priorities.all, priorities.none, priorities.any);\n    var impacts = [];\n    checkTypes.forEach(function(type) {\n      nodeResult[type] = nodeResult[type].filter(function(check) {\n        return check.priority === nodeResult.priority && check.priority === priorities[type];\n      });\n      nodeResult[type].forEach(function(check) {\n        return impacts.push(check.impact);\n      });\n    });\n    if ([ CANTTELL_PRIO, FAIL_PRIO ].includes(nodeResult.priority)) {\n      nodeResult.impact = axe.utils.aggregate(axe.constants.impact, impacts);\n    } else {\n      nodeResult.impact = null;\n    }\n    anyAllNone(nodeResult, function(c) {\n      delete c.result;\n      delete c.priority;\n    });\n    nodeResult.result = axe.constants.results[nodeResult.priority];\n    delete nodeResult.priority;\n    return nodeResult;\n  };\n  'use strict';\n  (function() {\n    axe.utils.aggregateNodeResults = function(nodeResults) {\n      var ruleResult = {};\n      nodeResults = nodeResults.map(function(nodeResult) {\n        if (nodeResult.any && nodeResult.all && nodeResult.none) {\n          return axe.utils.aggregateChecks(nodeResult);\n        } else if (Array.isArray(nodeResult.node)) {\n          return axe.utils.finalizeRuleResult(nodeResult);\n        } else {\n          throw new TypeError('Invalid Result type');\n        }\n      });\n      if (nodeResults && nodeResults.length) {\n        var resultList = nodeResults.map(function(node) {\n          return node.result;\n        });\n        ruleResult.result = axe.utils.aggregate(axe.constants.results, resultList, ruleResult.result);\n      } else {\n        ruleResult.result = 'inapplicable';\n      }\n      axe.constants.resultGroups.forEach(function(group) {\n        return ruleResult[group] = [];\n      });\n      nodeResults.forEach(function(nodeResult) {\n        var groupName = axe.constants.resultGroupMap[nodeResult.result];\n        ruleResult[groupName].push(nodeResult);\n      });\n      var impactGroup = axe.constants.FAIL_GROUP;\n      if (ruleResult[impactGroup].length === 0) {\n        impactGroup = axe.constants.CANTTELL_GROUP;\n      }\n      if (ruleResult[impactGroup].length > 0) {\n        var impactList = ruleResult[impactGroup].map(function(failure) {\n          return failure.impact;\n        });\n        ruleResult.impact = axe.utils.aggregate(axe.constants.impact, impactList) || null;\n      } else {\n        ruleResult.impact = null;\n      }\n      return ruleResult;\n    };\n  })();\n  'use strict';\n  function copyToGroup(resultObject, subResult, group) {\n    var resultCopy = Object.assign({}, subResult);\n    resultCopy.nodes = (resultCopy[group] || []).concat();\n    axe.constants.resultGroups.forEach(function(group) {\n      delete resultCopy[group];\n    });\n    resultObject[group].push(resultCopy);\n  }\n  axe.utils.aggregateResult = function(results) {\n    var resultObject = {};\n    axe.constants.resultGroups.forEach(function(groupName) {\n      return resultObject[groupName] = [];\n    });\n    results.forEach(function(subResult) {\n      if (subResult.error) {\n        copyToGroup(resultObject, subResult, axe.constants.CANTTELL_GROUP);\n      } else if (subResult.result === axe.constants.NA) {\n        copyToGroup(resultObject, subResult, axe.constants.NA_GROUP);\n      } else {\n        axe.constants.resultGroups.forEach(function(group) {\n          if (Array.isArray(subResult[group]) && subResult[group].length > 0) {\n            copyToGroup(resultObject, subResult, group);\n          }\n        });\n      }\n    });\n    return resultObject;\n  };\n  'use strict';\n  function areStylesSet(el, styles, stopAt) {\n    'use strict';\n    var styl = window.getComputedStyle(el, null);\n    if (!styl) {\n      return false;\n    }\n    for (var i = 0; i < styles.length; ++i) {\n      var att = styles[i];\n      if (styl.getPropertyValue(att.property) === att.value) {\n        return true;\n      }\n    }\n    if (!el.parentNode || el.nodeName.toUpperCase() === stopAt.toUpperCase()) {\n      return false;\n    }\n    return areStylesSet(el.parentNode, styles, stopAt);\n  }\n  axe.utils.areStylesSet = areStylesSet;\n  'use strict';\n  axe.utils.assert = function assert(bool, message) {\n    if (!bool) {\n      throw new Error(message);\n    }\n  };\n  'use strict';\n  axe.utils.checkHelper = function checkHelper(checkResult, options, resolve, reject) {\n    'use strict';\n    return {\n      isAsync: false,\n      async: function async() {\n        this.isAsync = true;\n        return function(result) {\n          if (result instanceof Error === false) {\n            checkResult.result = result;\n            resolve(checkResult);\n          } else {\n            reject(result);\n          }\n        };\n      },\n      data: function data(_data) {\n        checkResult.data = _data;\n      },\n      relatedNodes: function relatedNodes(nodes) {\n        nodes = nodes instanceof Node ? [ nodes ] : axe.utils.toArray(nodes);\n        checkResult.relatedNodes = nodes.map(function(element) {\n          return new axe.utils.DqElement(element, options);\n        });\n      }\n    };\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  axe.utils.clone = function(obj) {\n    'use strict';\n    var index, length, out = obj;\n    if (obj !== null && _typeof(obj) === 'object') {\n      if (Array.isArray(obj)) {\n        out = [];\n        for (index = 0, length = obj.length; index < length; index++) {\n          out[index] = axe.utils.clone(obj[index]);\n        }\n      } else {\n        out = {};\n        for (index in obj) {\n          out[index] = axe.utils.clone(obj[index]);\n        }\n      }\n    }\n    return out;\n  };\n  'use strict';\n  function err(message, node) {\n    'use strict';\n    var selector;\n    if (axe._tree) {\n      selector = axe.utils.getSelector(node);\n    }\n    return new Error(message + ': ' + (selector || node));\n  }\n  axe.utils.sendCommandToFrame = function(node, parameters, resolve, reject) {\n    'use strict';\n    var win = node.contentWindow;\n    if (!win) {\n      axe.log('Frame does not have a content window', node);\n      resolve(null);\n      return;\n    }\n    var timeout = setTimeout(function() {\n      timeout = setTimeout(function() {\n        if (!parameters.debug) {\n          resolve(null);\n        } else {\n          reject(err('No response from frame', node));\n        }\n      }, 0);\n    }, 500);\n    axe.utils.respondable(win, 'axe.ping', null, undefined, function() {\n      clearTimeout(timeout);\n      var frameWaitTime = parameters.options && parameters.options.frameWaitTime || 6e4;\n      timeout = setTimeout(function collectResultFramesTimeout() {\n        reject(err('Axe in frame timed out', node));\n      }, frameWaitTime);\n      axe.utils.respondable(win, 'axe.start', parameters, undefined, function(data) {\n        clearTimeout(timeout);\n        if (data instanceof Error === false) {\n          resolve(data);\n        } else {\n          reject(data);\n        }\n      });\n    });\n  };\n  function collectResultsFromFrames(context, options, command, parameter, resolve, reject) {\n    'use strict';\n    var q = axe.utils.queue();\n    var frames = context.frames;\n    frames.forEach(function(frame) {\n      var params = {\n        options: options,\n        command: command,\n        parameter: parameter,\n        context: {\n          initiator: false,\n          page: context.page,\n          include: frame.include || [],\n          exclude: frame.exclude || []\n        }\n      };\n      q.defer(function(res, rej) {\n        var node = frame.node;\n        axe.utils.sendCommandToFrame(node, params, function(data) {\n          if (data) {\n            return res({\n              results: data,\n              frameElement: node,\n              frame: axe.utils.getSelector(node)\n            });\n          }\n          res(null);\n        }, rej);\n      });\n    });\n    q.then(function(data) {\n      resolve(axe.utils.mergeResults(data, options));\n    })['catch'](reject);\n  }\n  axe.utils.collectResultsFromFrames = collectResultsFromFrames;\n  'use strict';\n  axe.utils.contains = function(vNode, otherVNode) {\n    'use strict';\n    function containsShadowChild(vNode, otherVNode) {\n      if (vNode.shadowId === otherVNode.shadowId) {\n        return true;\n      }\n      return !!vNode.children.find(function(child) {\n        return containsShadowChild(child, otherVNode);\n      });\n    }\n    if (vNode.shadowId || otherVNode.shadowId) {\n      return containsShadowChild(vNode, otherVNode);\n    }\n    if (vNode.actualNode) {\n      if (typeof vNode.actualNode.contains === 'function') {\n        return vNode.actualNode.contains(otherVNode.actualNode);\n      }\n      return !!(vNode.actualNode.compareDocumentPosition(otherVNode.actualNode) & 16);\n    } else {\n      do {\n        if (otherVNode === vNode) {\n          return true;\n        }\n      } while (otherVNode = otherVNode && otherVNode.parent);\n    }\n    return false;\n  };\n  'use strict';\n  (function(axe) {\n    var parser = new axe.imports.CssSelectorParser();\n    parser.registerSelectorPseudos('not');\n    parser.registerNestingOperators('>');\n    parser.registerAttrEqualityMods('^', '$', '*');\n    axe.utils.cssParser = parser;\n  })(axe);\n  'use strict';\n  function truncate(str, maxLength) {\n    maxLength = maxLength || 300;\n    if (str.length > maxLength) {\n      var index = str.indexOf('>');\n      str = str.substring(0, index + 1);\n    }\n    return str;\n  }\n  function getSource(element) {\n    var source = element.outerHTML;\n    if (!source && typeof XMLSerializer === 'function') {\n      source = new XMLSerializer().serializeToString(element);\n    }\n    return truncate(source || '');\n  }\n  function DqElement(element, options, spec) {\n    this._fromFrame = !!spec;\n    this.spec = spec || {};\n    if (options && options.absolutePaths) {\n      this._options = {\n        toRoot: true\n      };\n    }\n    if (axe._audit && axe._audit.noHtml) {\n      this.source = null;\n    } else if (this.spec.source !== undefined) {\n      this.source = this.spec.source;\n    } else {\n      this.source = getSource(element);\n    }\n    this._element = element;\n  }\n  DqElement.prototype = {\n    get selector() {\n      return this.spec.selector || [ axe.utils.getSelector(this.element, this._options) ];\n    },\n    get xpath() {\n      return this.spec.xpath || [ axe.utils.getXpath(this.element) ];\n    },\n    get element() {\n      return this._element;\n    },\n    get fromFrame() {\n      return this._fromFrame;\n    },\n    toJSON: function toJSON() {\n      'use strict';\n      return {\n        selector: this.selector,\n        source: this.source,\n        xpath: this.xpath\n      };\n    }\n  };\n  DqElement.fromFrame = function(node, options, frame) {\n    node.selector.unshift(frame.selector);\n    node.xpath.unshift(frame.xpath);\n    return new axe.utils.DqElement(frame.element, options, node);\n  };\n  axe.utils.DqElement = DqElement;\n  'use strict';\n  axe.utils.matchesSelector = function() {\n    'use strict';\n    var method;\n    function getMethod(node) {\n      var index, candidate, candidates = [ 'matches', 'matchesSelector', 'mozMatchesSelector', 'webkitMatchesSelector', 'msMatchesSelector' ], length = candidates.length;\n      for (index = 0; index < length; index++) {\n        candidate = candidates[index];\n        if (node[candidate]) {\n          return candidate;\n        }\n      }\n    }\n    return function(node, selector) {\n      if (!method || !node[method]) {\n        method = getMethod(node);\n      }\n      if (node[method]) {\n        return node[method](selector);\n      }\n      return false;\n    };\n  }();\n  'use strict';\n  axe.utils.escapeSelector = function(value) {\n    'use strict';\n    var string = String(value);\n    var length = string.length;\n    var index = -1;\n    var codeUnit;\n    var result = '';\n    var firstCodeUnit = string.charCodeAt(0);\n    while (++index < length) {\n      codeUnit = string.charCodeAt(index);\n      if (codeUnit == 0) {\n        result += '\\ufffd';\n        continue;\n      }\n      if (codeUnit >= 1 && codeUnit <= 31 || codeUnit == 127 || index == 0 && codeUnit >= 48 && codeUnit <= 57 || index == 1 && codeUnit >= 48 && codeUnit <= 57 && firstCodeUnit == 45) {\n        result += '\\\\' + codeUnit.toString(16) + ' ';\n        continue;\n      }\n      if (index == 0 && length == 1 && codeUnit == 45) {\n        result += '\\\\' + string.charAt(index);\n        continue;\n      }\n      if (codeUnit >= 128 || codeUnit == 45 || codeUnit == 95 || codeUnit >= 48 && codeUnit <= 57 || codeUnit >= 65 && codeUnit <= 90 || codeUnit >= 97 && codeUnit <= 122) {\n        result += string.charAt(index);\n        continue;\n      }\n      result += '\\\\' + string.charAt(index);\n    }\n    return result;\n  };\n  'use strict';\n  axe.utils.extendMetaData = function(to, from) {\n    Object.assign(to, from);\n    Object.keys(from).filter(function(prop) {\n      return typeof from[prop] === 'function';\n    }).forEach(function(prop) {\n      to[prop] = null;\n      try {\n        to[prop] = from[prop](to);\n      } catch (e) {}\n    });\n  };\n  'use strict';\n  axe.utils.finalizeRuleResult = function(ruleResult) {\n    Object.assign(ruleResult, axe.utils.aggregateNodeResults(ruleResult.nodes));\n    delete ruleResult.nodes;\n    return ruleResult;\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  axe.utils.findBy = function(array, key, value) {\n    if (Array.isArray(array)) {\n      return array.find(function(obj) {\n        return _typeof(obj) === 'object' && obj[key] === value;\n      });\n    }\n  };\n  'use strict';\n  var axe = axe || {\n    utils: {}\n  };\n  function getSlotChildren(node) {\n    var retVal = [];\n    node = node.firstChild;\n    while (node) {\n      retVal.push(node);\n      node = node.nextSibling;\n    }\n    return retVal;\n  }\n  function flattenTree(node, shadowId, parent) {\n    var retVal, realArray, nodeName;\n    function reduceShadowDOM(res, child, parent) {\n      var replacements = flattenTree(child, shadowId, parent);\n      if (replacements) {\n        res = res.concat(replacements);\n      }\n      return res;\n    }\n    if (node.documentElement) {\n      node = node.documentElement;\n    }\n    nodeName = node.nodeName.toLowerCase();\n    if (axe.utils.isShadowRoot(node)) {\n      retVal = new VirtualNode(node, parent, shadowId);\n      shadowId = 'a' + Math.random().toString().substring(2);\n      realArray = Array.from(node.shadowRoot.childNodes);\n      retVal.children = realArray.reduce(function(res, child) {\n        return reduceShadowDOM(res, child, retVal);\n      }, []);\n      return [ retVal ];\n    } else {\n      if (nodeName === 'content' && typeof node.getDistributedNodes === 'function') {\n        realArray = Array.from(node.getDistributedNodes());\n        return realArray.reduce(function(res, child) {\n          return reduceShadowDOM(res, child, parent);\n        }, []);\n      } else if (nodeName === 'slot' && typeof node.assignedNodes === 'function') {\n        realArray = Array.from(node.assignedNodes());\n        if (!realArray.length) {\n          realArray = getSlotChildren(node);\n        }\n        var styl = window.getComputedStyle(node);\n        if (false) {} else {\n          return realArray.reduce(function(res, child) {\n            return reduceShadowDOM(res, child, parent);\n          }, []);\n        }\n      } else {\n        if (node.nodeType === 1) {\n          retVal = new VirtualNode(node, parent, shadowId);\n          realArray = Array.from(node.childNodes);\n          retVal.children = realArray.reduce(function(res, child) {\n            return reduceShadowDOM(res, child, retVal);\n          }, []);\n          return [ retVal ];\n        } else if (node.nodeType === 3) {\n          return [ new VirtualNode(node, parent) ];\n        }\n        return undefined;\n      }\n    }\n  }\n  axe.utils.getFlattenedTree = function(node, shadowId) {\n    axe._cache.set('nodeMap', new WeakMap());\n    return flattenTree(node, shadowId);\n  };\n  axe.utils.getNodeFromTree = function(vNode, node) {\n    var el = node || vNode;\n    return axe._cache.get('nodeMap') ? axe._cache.get('nodeMap').get(el) : null;\n  };\n  'use strict';\n  axe.utils.getAllChecks = function getAllChecks(object) {\n    'use strict';\n    var result = [];\n    return result.concat(object.any || []).concat(object.all || []).concat(object.none || []);\n  };\n  'use strict';\n  axe.utils.getBaseLang = function getBaseLang(lang) {\n    if (!lang) {\n      return '';\n    }\n    return lang.trim().split('-')[0].toLowerCase();\n  };\n  'use strict';\n  axe.utils.getCheckMessage = function getCheckMessage(checkId, type, data) {\n    var check = axe._audit.data.checks[checkId];\n    if (!check) {\n      throw new Error('Cannot get message for unknown check: '.concat(checkId, '.'));\n    }\n    if (!check.messages[type]) {\n      throw new Error('Check \"'.concat(checkId, '\"\" does not have a \"').concat(type, '\" message.'));\n    }\n    return axe.utils.processMessage(check.messages[type], data);\n  };\n  'use strict';\n  axe.utils.getCheckOption = function(check, ruleID, options) {\n    var ruleCheckOption = ((options.rules && options.rules[ruleID] || {}).checks || {})[check.id];\n    var checkOption = (options.checks || {})[check.id];\n    var enabled = check.enabled;\n    var opts = check.options;\n    if (checkOption) {\n      if (checkOption.hasOwnProperty('enabled')) {\n        enabled = checkOption.enabled;\n      }\n      if (checkOption.hasOwnProperty('options')) {\n        opts = checkOption.options;\n      }\n    }\n    if (ruleCheckOption) {\n      if (ruleCheckOption.hasOwnProperty('enabled')) {\n        enabled = ruleCheckOption.enabled;\n      }\n      if (ruleCheckOption.hasOwnProperty('options')) {\n        opts = ruleCheckOption.options;\n      }\n    }\n    return {\n      enabled: enabled,\n      options: opts,\n      absolutePaths: options.absolutePaths\n    };\n  };\n  'use strict';\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  }\n  function _iterableToArrayLimit(arr, i) {\n    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === '[object Arguments]')) {\n      return;\n    }\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) {\n          break;\n        }\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return'] != null) {\n          _i['return']();\n        }\n      } finally {\n        if (_d) {\n          throw _e;\n        }\n      }\n    }\n    return _arr;\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) {\n      return arr;\n    }\n  }\n  function isMostlyNumbers() {\n    var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return str.length !== 0 && (str.match(/[0-9]/g) || '').length >= str.length / 2;\n  }\n  function splitString(str, splitIndex) {\n    return [ str.substring(0, splitIndex), str.substring(splitIndex) ];\n  }\n  function trimRight(str) {\n    return str.replace(/\\s+$/, '');\n  }\n  function uriParser(url) {\n    var original = url;\n    var protocol = '', domain = '', port = '', path = '', query = '', hash = '';\n    if (url.includes('#')) {\n      var _splitString = splitString(url, url.indexOf('#'));\n      var _splitString2 = _slicedToArray(_splitString, 2);\n      url = _splitString2[0];\n      hash = _splitString2[1];\n    }\n    if (url.includes('?')) {\n      var _splitString3 = splitString(url, url.indexOf('?'));\n      var _splitString4 = _slicedToArray(_splitString3, 2);\n      url = _splitString4[0];\n      query = _splitString4[1];\n    }\n    if (url.includes('://')) {\n      var _url$split = url.split('://');\n      var _url$split2 = _slicedToArray(_url$split, 2);\n      protocol = _url$split2[0];\n      url = _url$split2[1];\n      var _splitString5 = splitString(url, url.indexOf('/'));\n      var _splitString6 = _slicedToArray(_splitString5, 2);\n      domain = _splitString6[0];\n      url = _splitString6[1];\n    } else if (url.substr(0, 2) === '//') {\n      url = url.substr(2);\n      var _splitString7 = splitString(url, url.indexOf('/'));\n      var _splitString8 = _slicedToArray(_splitString7, 2);\n      domain = _splitString8[0];\n      url = _splitString8[1];\n    }\n    if (domain.substr(0, 4) === 'www.') {\n      domain = domain.substr(4);\n    }\n    if (domain && domain.includes(':')) {\n      var _splitString9 = splitString(domain, domain.indexOf(':'));\n      var _splitString10 = _slicedToArray(_splitString9, 2);\n      domain = _splitString10[0];\n      port = _splitString10[1];\n    }\n    path = url;\n    return {\n      original: original,\n      protocol: protocol,\n      domain: domain,\n      port: port,\n      path: path,\n      query: query,\n      hash: hash\n    };\n  }\n  axe.utils.getFriendlyUriEnd = function getFriendlyUriEnd() {\n    var uri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (uri.length <= 1 || uri.substr(0, 5) === 'data:' || uri.substr(0, 11) === 'javascript:' || uri.includes('?')) {\n      return;\n    }\n    var currentDomain = options.currentDomain, _options$maxLength = options.maxLength, maxLength = _options$maxLength === void 0 ? 25 : _options$maxLength;\n    var _uriParser = uriParser(uri), path = _uriParser.path, domain = _uriParser.domain, hash = _uriParser.hash;\n    var pathEnd = path.substr(path.substr(0, path.length - 2).lastIndexOf('/') + 1);\n    if (hash) {\n      if (pathEnd && (pathEnd + hash).length <= maxLength) {\n        return trimRight(pathEnd + hash);\n      } else if (pathEnd.length < 2 && hash.length > 2 && hash.length <= maxLength) {\n        return trimRight(hash);\n      } else {\n        return;\n      }\n    } else if (domain && domain.length < maxLength && path.length <= 1) {\n      return trimRight(domain + path);\n    }\n    if (path === '/' + pathEnd && domain && currentDomain && domain !== currentDomain && (domain + path).length <= maxLength) {\n      return trimRight(domain + path);\n    }\n    var lastDotIndex = pathEnd.lastIndexOf('.');\n    if ((lastDotIndex === -1 || lastDotIndex > 1) && (lastDotIndex !== -1 || pathEnd.length > 2) && pathEnd.length <= maxLength && !pathEnd.match(/index(\\.[a-zA-Z]{2-4})?/) && !isMostlyNumbers(pathEnd)) {\n      return trimRight(pathEnd);\n    }\n  };\n  'use strict';\n  axe.utils.getNodeAttributes = function getNodeAttributes(node) {\n    if (node.attributes instanceof window.NamedNodeMap) {\n      return node.attributes;\n    }\n    return node.cloneNode(false).attributes;\n  };\n  'use strict';\n  axe.utils.getRootNode = function getRootNode(node) {\n    var doc = node.getRootNode && node.getRootNode() || document;\n    if (doc === node) {\n      doc = document;\n    }\n    return doc;\n  };\n  'use strict';\n  axe.utils.getScroll = function getScroll(elm) {\n    var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var overflowX = elm.scrollWidth > elm.clientWidth + buffer;\n    var overflowY = elm.scrollHeight > elm.clientHeight + buffer;\n    if (!(overflowX || overflowY)) {\n      return;\n    }\n    var style = window.getComputedStyle(elm);\n    var overflowXStyle = style.getPropertyValue('overflow-x');\n    var overflowYStyle = style.getPropertyValue('overflow-y');\n    var scrollableX = overflowXStyle !== 'visible' && overflowXStyle !== 'hidden';\n    var scrollableY = overflowYStyle !== 'visible' && overflowYStyle !== 'hidden';\n    if (overflowX && scrollableX || overflowY && scrollableY) {\n      return {\n        elm: elm,\n        top: elm.scrollTop,\n        left: elm.scrollLeft\n      };\n    }\n  };\n  'use strict';\n  var escapeSelector = axe.utils.escapeSelector;\n  var isXHTML;\n  var ignoredAttributes = [ 'class', 'style', 'id', 'selected', 'checked', 'disabled', 'tabindex', 'aria-checked', 'aria-selected', 'aria-invalid', 'aria-activedescendant', 'aria-busy', 'aria-disabled', 'aria-expanded', 'aria-grabbed', 'aria-pressed', 'aria-valuenow' ];\n  var MAXATTRIBUTELENGTH = 31;\n  function getAttributeNameValue(node, at) {\n    var name = at.name;\n    var atnv;\n    if (name.indexOf('href') !== -1 || name.indexOf('src') !== -1) {\n      var friendly = axe.utils.getFriendlyUriEnd(node.getAttribute(name));\n      if (friendly) {\n        var value = encodeURI(friendly);\n        if (value) {\n          atnv = escapeSelector(at.name) + '$=\"' + escapeSelector(value) + '\"';\n        } else {\n          return;\n        }\n      } else {\n        atnv = escapeSelector(at.name) + '=\"' + escapeSelector(node.getAttribute(name)) + '\"';\n      }\n    } else {\n      atnv = escapeSelector(name) + '=\"' + escapeSelector(at.value) + '\"';\n    }\n    return atnv;\n  }\n  function countSort(a, b) {\n    return a.count < b.count ? -1 : a.count === b.count ? 0 : 1;\n  }\n  function filterAttributes(at) {\n    return !ignoredAttributes.includes(at.name) && at.name.indexOf(':') === -1 && (!at.value || at.value.length < MAXATTRIBUTELENGTH);\n  }\n  axe.utils.getSelectorData = function(domTree) {\n    var data = {\n      classes: {},\n      tags: {},\n      attributes: {}\n    };\n    domTree = Array.isArray(domTree) ? domTree : [ domTree ];\n    var currentLevel = domTree.slice();\n    var stack = [];\n    var _loop = function _loop() {\n      var current = currentLevel.pop();\n      var node = current.actualNode;\n      if (!!node.querySelectorAll) {\n        var tag = node.nodeName;\n        if (data.tags[tag]) {\n          data.tags[tag]++;\n        } else {\n          data.tags[tag] = 1;\n        }\n        if (node.classList) {\n          Array.from(node.classList).forEach(function(cl) {\n            var ind = escapeSelector(cl);\n            if (data.classes[ind]) {\n              data.classes[ind]++;\n            } else {\n              data.classes[ind] = 1;\n            }\n          });\n        }\n        if (node.hasAttributes()) {\n          Array.from(axe.utils.getNodeAttributes(node)).filter(filterAttributes).forEach(function(at) {\n            var atnv = getAttributeNameValue(node, at);\n            if (atnv) {\n              if (data.attributes[atnv]) {\n                data.attributes[atnv]++;\n              } else {\n                data.attributes[atnv] = 1;\n              }\n            }\n          });\n        }\n      }\n      if (current.children.length) {\n        stack.push(currentLevel);\n        currentLevel = current.children.slice();\n      }\n      while (!currentLevel.length && stack.length) {\n        currentLevel = stack.pop();\n      }\n    };\n    while (currentLevel.length) {\n      _loop();\n    }\n    return data;\n  };\n  function uncommonClasses(node, selectorData) {\n    var retVal = [];\n    var classData = selectorData.classes;\n    var tagData = selectorData.tags;\n    if (node.classList) {\n      Array.from(node.classList).forEach(function(cl) {\n        var ind = escapeSelector(cl);\n        if (classData[ind] < tagData[node.nodeName]) {\n          retVal.push({\n            name: ind,\n            count: classData[ind],\n            species: 'class'\n          });\n        }\n      });\n    }\n    return retVal.sort(countSort);\n  }\n  function getNthChildString(elm, selector) {\n    var siblings = elm.parentNode && Array.from(elm.parentNode.children || '') || [];\n    var hasMatchingSiblings = siblings.find(function(sibling) {\n      return sibling !== elm && axe.utils.matchesSelector(sibling, selector);\n    });\n    if (hasMatchingSiblings) {\n      var nthChild = 1 + siblings.indexOf(elm);\n      return ':nth-child(' + nthChild + ')';\n    } else {\n      return '';\n    }\n  }\n  function getElmId(elm) {\n    if (!elm.getAttribute('id')) {\n      return;\n    }\n    var doc = elm.getRootNode && elm.getRootNode() || document;\n    var id = '#' + escapeSelector(elm.getAttribute('id') || '');\n    if (!id.match(/player_uid_/) && doc.querySelectorAll(id).length === 1) {\n      return id;\n    }\n  }\n  function getBaseSelector(elm) {\n    if (typeof isXHTML === 'undefined') {\n      isXHTML = axe.utils.isXHTML(document);\n    }\n    return escapeSelector(isXHTML ? elm.localName : elm.nodeName.toLowerCase());\n  }\n  function uncommonAttributes(node, selectorData) {\n    var retVal = [];\n    var attData = selectorData.attributes;\n    var tagData = selectorData.tags;\n    if (node.hasAttributes()) {\n      Array.from(axe.utils.getNodeAttributes(node)).filter(filterAttributes).forEach(function(at) {\n        var atnv = getAttributeNameValue(node, at);\n        if (atnv && attData[atnv] < tagData[node.nodeName]) {\n          retVal.push({\n            name: atnv,\n            count: attData[atnv],\n            species: 'attribute'\n          });\n        }\n      });\n    }\n    return retVal.sort(countSort);\n  }\n  function getThreeLeastCommonFeatures(elm, selectorData) {\n    var selector = '';\n    var features;\n    var clss = uncommonClasses(elm, selectorData);\n    var atts = uncommonAttributes(elm, selectorData);\n    if (clss.length && clss[0].count === 1) {\n      features = [ clss[0] ];\n    } else if (atts.length && atts[0].count === 1) {\n      features = [ atts[0] ];\n      selector = getBaseSelector(elm);\n    } else {\n      features = clss.concat(atts);\n      features.sort(countSort);\n      features = features.slice(0, 3);\n      if (!features.some(function(feat) {\n        return feat.species === 'class';\n      })) {\n        selector = getBaseSelector(elm);\n      } else {\n        features.sort(function(a, b) {\n          return a.species !== b.species && a.species === 'class' ? -1 : a.species === b.species ? 0 : 1;\n        });\n      }\n    }\n    return selector += features.reduce(function(val, feat) {\n      switch (feat.species) {\n       case 'class':\n        return val + '.' + feat.name;\n\n       case 'attribute':\n        return val + '[' + feat.name + ']';\n      }\n      return val;\n    }, '');\n  }\n  function generateSelector(elm, options, doc) {\n    if (!axe._selectorData) {\n      throw new Error('Expect axe._selectorData to be set up');\n    }\n    var _options$toRoot = options.toRoot, toRoot = _options$toRoot === void 0 ? false : _options$toRoot;\n    var selector;\n    var similar;\n    do {\n      var features = getElmId(elm);\n      if (!features) {\n        features = getThreeLeastCommonFeatures(elm, axe._selectorData);\n        features += getNthChildString(elm, features);\n      }\n      if (selector) {\n        selector = features + ' > ' + selector;\n      } else {\n        selector = features;\n      }\n      if (!similar) {\n        similar = Array.from(doc.querySelectorAll(selector));\n      } else {\n        similar = similar.filter(function(item) {\n          return axe.utils.matchesSelector(item, selector);\n        });\n      }\n      elm = elm.parentElement;\n    } while ((similar.length > 1 || toRoot) && elm && elm.nodeType !== 11);\n    if (similar.length === 1) {\n      return selector;\n    } else if (selector.indexOf(' > ') !== -1) {\n      return ':root' + selector.substring(selector.indexOf(' > '));\n    }\n    return ':root';\n  }\n  axe.utils.getSelector = function createUniqueSelector(elm) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!elm) {\n      return '';\n    }\n    var doc = elm.getRootNode && elm.getRootNode() || document;\n    if (doc.nodeType === 11) {\n      var stack = [];\n      while (doc.nodeType === 11) {\n        if (!doc.host) {\n          return '';\n        }\n        stack.push({\n          elm: elm,\n          doc: doc\n        });\n        elm = doc.host;\n        doc = elm.getRootNode();\n      }\n      stack.push({\n        elm: elm,\n        doc: doc\n      });\n      return stack.reverse().map(function(comp) {\n        return generateSelector(comp.elm, options, comp.doc);\n      });\n    } else {\n      return generateSelector(elm, options, doc);\n    }\n  };\n  'use strict';\n  axe.utils.getStyleSheetFactory = function getStyleSheetFactory(dynamicDoc) {\n    if (!dynamicDoc) {\n      throw new Error('axe.utils.getStyleSheetFactory should be invoked with an argument');\n    }\n    return function(options) {\n      var data = options.data, _options$isCrossOrigi = options.isCrossOrigin, isCrossOrigin = _options$isCrossOrigi === void 0 ? false : _options$isCrossOrigi, shadowId = options.shadowId, root = options.root, priority = options.priority, _options$isLink = options.isLink, isLink = _options$isLink === void 0 ? false : _options$isLink;\n      var style = dynamicDoc.createElement('style');\n      if (isLink) {\n        var text = dynamicDoc.createTextNode('@import \"'.concat(data.href, '\"'));\n        style.appendChild(text);\n      } else {\n        style.appendChild(dynamicDoc.createTextNode(data));\n      }\n      dynamicDoc.head.appendChild(style);\n      return {\n        sheet: style.sheet,\n        isCrossOrigin: isCrossOrigin,\n        shadowId: shadowId,\n        root: root,\n        priority: priority\n      };\n    };\n  };\n  'use strict';\n  function getXPathArray(node, path) {\n    var sibling, count;\n    if (!node) {\n      return [];\n    }\n    if (!path && node.nodeType === 9) {\n      path = [ {\n        str: 'html'\n      } ];\n      return path;\n    }\n    path = path || [];\n    if (node.parentNode && node.parentNode !== node) {\n      path = getXPathArray(node.parentNode, path);\n    }\n    if (node.previousSibling) {\n      count = 1;\n      sibling = node.previousSibling;\n      do {\n        if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n          count++;\n        }\n        sibling = sibling.previousSibling;\n      } while (sibling);\n      if (count === 1) {\n        count = null;\n      }\n    } else if (node.nextSibling) {\n      sibling = node.nextSibling;\n      do {\n        if (sibling.nodeType === 1 && sibling.nodeName === node.nodeName) {\n          count = 1;\n          sibling = null;\n        } else {\n          count = null;\n          sibling = sibling.previousSibling;\n        }\n      } while (sibling);\n    }\n    if (node.nodeType === 1) {\n      var element = {};\n      element.str = node.nodeName.toLowerCase();\n      var id = node.getAttribute && axe.utils.escapeSelector(node.getAttribute('id'));\n      if (id && node.ownerDocument.querySelectorAll('#' + id).length === 1) {\n        element.id = node.getAttribute('id');\n      }\n      if (count > 1) {\n        element.count = count;\n      }\n      path.push(element);\n    }\n    return path;\n  }\n  function xpathToString(xpathArray) {\n    return xpathArray.reduce(function(str, elm) {\n      if (elm.id) {\n        return '/'.concat(elm.str, '[@id=\\'').concat(elm.id, '\\']');\n      } else {\n        return str + '/'.concat(elm.str) + (elm.count > 0 ? '['.concat(elm.count, ']') : '');\n      }\n    }, '');\n  }\n  axe.utils.getXpath = function getXpath(node) {\n    var xpathArray = getXPathArray(node);\n    return xpathToString(xpathArray);\n  };\n  'use strict';\n  var styleSheet;\n  function injectStyle(style) {\n    'use strict';\n    if (styleSheet && styleSheet.parentNode) {\n      if (styleSheet.styleSheet === undefined) {\n        styleSheet.appendChild(document.createTextNode(style));\n      } else {\n        styleSheet.styleSheet.cssText += style;\n      }\n      return styleSheet;\n    }\n    if (!style) {\n      return;\n    }\n    var head = document.head || document.getElementsByTagName('head')[0];\n    styleSheet = document.createElement('style');\n    styleSheet.type = 'text/css';\n    if (styleSheet.styleSheet === undefined) {\n      styleSheet.appendChild(document.createTextNode(style));\n    } else {\n      styleSheet.styleSheet.cssText = style;\n    }\n    head.appendChild(styleSheet);\n    return styleSheet;\n  }\n  axe.utils.injectStyle = injectStyle;\n  'use strict';\n  axe.utils.isHidden = function isHidden(el, recursed) {\n    'use strict';\n    var node = axe.utils.getNodeFromTree(el);\n    if (el.nodeType === 9) {\n      return false;\n    }\n    if (el.nodeType === 11) {\n      el = el.host;\n    }\n    if (node && node._isHidden !== null) {\n      return node._isHidden;\n    }\n    var style = window.getComputedStyle(el, null);\n    if (!style || !el.parentNode || style.getPropertyValue('display') === 'none' || !recursed && style.getPropertyValue('visibility') === 'hidden' || el.getAttribute('aria-hidden') === 'true') {\n      return true;\n    }\n    var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;\n    var isHidden = axe.utils.isHidden(parent, true);\n    if (node) {\n      node._isHidden = isHidden;\n    }\n    return isHidden;\n  };\n  'use strict';\n  var htmlTags = [ 'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'math', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'slot', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'svg', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr' ];\n  axe.utils.isHtmlElement = function isHtmlElement(node) {\n    if (node.namespaceURI === 'http://www.w3.org/2000/svg') {\n      return false;\n    }\n    return htmlTags.includes(node.nodeName.toLowerCase());\n  };\n  'use strict';\n  var possibleShadowRoots = [ 'article', 'aside', 'blockquote', 'body', 'div', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'main', 'nav', 'p', 'section', 'span' ];\n  axe.utils.isShadowRoot = function isShadowRoot(node) {\n    if (node.shadowRoot) {\n      var nodeName = node.nodeName.toLowerCase();\n      if (possibleShadowRoots.includes(nodeName) || /^[a-z][a-z0-9_.-]*-[a-z0-9_.-]*$/.test(nodeName)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  'use strict';\n  axe.utils.isXHTML = function(doc) {\n    'use strict';\n    if (!doc.createElement) {\n      return false;\n    }\n    return doc.createElement('A').localName === 'A';\n  };\n  'use strict';\n  function matchesTag(vNode, exp) {\n    return vNode.props.nodeType === 1 && (exp.tag === '*' || vNode.props.nodeName === exp.tag);\n  }\n  function matchesClasses(vNode, exp) {\n    return !exp.classes || exp.classes.every(function(cl) {\n      return vNode.hasClass(cl.value);\n    });\n  }\n  function matchesAttributes(vNode, exp) {\n    return !exp.attributes || exp.attributes.every(function(att) {\n      var nodeAtt = vNode.attr(att.key);\n      return nodeAtt !== null && (!att.value || att.test(nodeAtt));\n    });\n  }\n  function matchesId(vNode, exp) {\n    return !exp.id || vNode.props.id === exp.id;\n  }\n  function matchesPseudos(target, exp) {\n    if (!exp.pseudos || exp.pseudos.every(function(pseudo) {\n      if (pseudo.name === 'not') {\n        return !axe.utils.matchesExpression(target, pseudo.expressions[0]);\n      }\n      throw new Error('the pseudo selector ' + pseudo.name + ' has not yet been implemented');\n    })) {\n      return true;\n    }\n    return false;\n  }\n  function matchExpression(vNode, expression) {\n    return matchesTag(vNode, expression) && matchesClasses(vNode, expression) && matchesAttributes(vNode, expression) && matchesId(vNode, expression) && matchesPseudos(vNode, expression);\n  }\n  var escapeRegExp = function() {\n    var from = /(?=[\\-\\[\\]{}()*+?.\\\\\\^$|,#\\s])/g;\n    var to = '\\\\';\n    return function(string) {\n      return string.replace(from, to);\n    };\n  }();\n  var reUnescape = /\\\\/g;\n  function convertAttributes(atts) {\n    if (!atts) {\n      return;\n    }\n    return atts.map(function(att) {\n      var attributeKey = att.name.replace(reUnescape, '');\n      var attributeValue = (att.value || '').replace(reUnescape, '');\n      var test, regexp;\n      switch (att.operator) {\n       case '^=':\n        regexp = new RegExp('^' + escapeRegExp(attributeValue));\n        break;\n\n       case '$=':\n        regexp = new RegExp(escapeRegExp(attributeValue) + '$');\n        break;\n\n       case '~=':\n        regexp = new RegExp('(^|\\\\s)' + escapeRegExp(attributeValue) + '(\\\\s|$)');\n        break;\n\n       case '|=':\n        regexp = new RegExp('^' + escapeRegExp(attributeValue) + '(-|$)');\n        break;\n\n       case '=':\n        test = function test(value) {\n          return attributeValue === value;\n        };\n        break;\n\n       case '*=':\n        test = function test(value) {\n          return value && value.includes(attributeValue);\n        };\n        break;\n\n       case '!=':\n        test = function test(value) {\n          return attributeValue !== value;\n        };\n        break;\n\n       default:\n        test = function test(value) {\n          return !!value;\n        };\n      }\n      if (attributeValue === '' && /^[*$^]=$/.test(att.operator)) {\n        test = function test() {\n          return false;\n        };\n      }\n      if (!test) {\n        test = function test(value) {\n          return value && regexp.test(value);\n        };\n      }\n      return {\n        key: attributeKey,\n        value: attributeValue,\n        test: test\n      };\n    });\n  }\n  function convertClasses(classes) {\n    if (!classes) {\n      return;\n    }\n    return classes.map(function(className) {\n      className = className.replace(reUnescape, '');\n      return {\n        value: className,\n        regexp: new RegExp('(^|\\\\s)' + escapeRegExp(className) + '(\\\\s|$)')\n      };\n    });\n  }\n  function convertPseudos(pseudos) {\n    if (!pseudos) {\n      return;\n    }\n    return pseudos.map(function(p) {\n      var expressions;\n      if (p.name === 'not') {\n        expressions = p.value;\n        expressions = expressions.selectors ? expressions.selectors : [ expressions ];\n        expressions = convertExpressions(expressions);\n      }\n      return {\n        name: p.name,\n        expressions: expressions,\n        value: p.value\n      };\n    });\n  }\n  function convertExpressions(expressions) {\n    return expressions.map(function(exp) {\n      var newExp = [];\n      var rule = exp.rule;\n      while (rule) {\n        newExp.push({\n          tag: rule.tagName ? rule.tagName.toLowerCase() : '*',\n          combinator: rule.nestingOperator ? rule.nestingOperator : ' ',\n          id: rule.id,\n          attributes: convertAttributes(rule.attrs),\n          classes: convertClasses(rule.classNames),\n          pseudos: convertPseudos(rule.pseudos)\n        });\n        rule = rule.rule;\n      }\n      return newExp;\n    });\n  }\n  axe.utils.convertSelector = function convertSelector(selector) {\n    var expressions = axe.utils.cssParser.parse(selector);\n    expressions = expressions.selectors ? expressions.selectors : [ expressions ];\n    return convertExpressions(expressions);\n  };\n  axe.utils.matchesExpression = function matchesExpression(vNode, expressions, matchAnyParent) {\n    var exps = [].concat(expressions);\n    var expression = exps.pop();\n    var matches = matchExpression(vNode, expression);\n    while (!matches && matchAnyParent && vNode.parent) {\n      vNode = vNode.parent;\n      matches = matchExpression(vNode, expression);\n    }\n    if (exps.length) {\n      if ([ ' ', '>' ].includes(expression.combinator) === false) {\n        throw new Error('axe.utils.matchesExpression does not support the combinator: ' + expression.combinator);\n      }\n      matches = matches && axe.utils.matchesExpression(vNode.parent, exps, expression.combinator === ' ');\n    }\n    return matches;\n  };\n  axe.utils.matches = function matches(vNode, selector) {\n    var expressions = axe.utils.convertSelector(selector);\n    return expressions.some(function(expression) {\n      return axe.utils.matchesExpression(vNode, expression);\n    });\n  };\n  'use strict';\n  axe._memoizedFns = [];\n  axe.utils.memoize = function(fn) {\n    var memoized = axe.imports.memoize(fn);\n    axe._memoizedFns.push(memoized);\n    return memoized;\n  };\n  'use strict';\n  function pushFrame(resultSet, options, frameElement, frameSelector) {\n    'use strict';\n    var frameXpath = axe.utils.getXpath(frameElement);\n    var frameSpec = {\n      element: frameElement,\n      selector: frameSelector,\n      xpath: frameXpath\n    };\n    resultSet.forEach(function(res) {\n      res.node = axe.utils.DqElement.fromFrame(res.node, options, frameSpec);\n      var checks = axe.utils.getAllChecks(res);\n      if (checks.length) {\n        checks.forEach(function(check) {\n          check.relatedNodes = check.relatedNodes.map(function(node) {\n            return axe.utils.DqElement.fromFrame(node, options, frameSpec);\n          });\n        });\n      }\n    });\n  }\n  function spliceNodes(target, to) {\n    'use strict';\n    var firstFromFrame = to[0].node, sorterResult, t;\n    for (var i = 0, l = target.length; i < l; i++) {\n      t = target[i].node;\n      sorterResult = axe.utils.nodeSorter({\n        actualNode: t.element\n      }, {\n        actualNode: firstFromFrame.element\n      });\n      if (sorterResult > 0 || sorterResult === 0 && firstFromFrame.selector.length < t.selector.length) {\n        target.splice.apply(target, [ i, 0 ].concat(to));\n        return;\n      }\n    }\n    target.push.apply(target, to);\n  }\n  function normalizeResult(result) {\n    'use strict';\n    if (!result || !result.results) {\n      return null;\n    }\n    if (!Array.isArray(result.results)) {\n      return [ result.results ];\n    }\n    if (!result.results.length) {\n      return null;\n    }\n    return result.results;\n  }\n  axe.utils.mergeResults = function mergeResults(frameResults, options) {\n    'use strict';\n    var result = [];\n    frameResults.forEach(function(frameResult) {\n      var results = normalizeResult(frameResult);\n      if (!results || !results.length) {\n        return;\n      }\n      results.forEach(function(ruleResult) {\n        if (ruleResult.nodes && frameResult.frame) {\n          pushFrame(ruleResult.nodes, options, frameResult.frameElement, frameResult.frame);\n        }\n        var res = axe.utils.findBy(result, 'id', ruleResult.id);\n        if (!res) {\n          result.push(ruleResult);\n        } else {\n          if (ruleResult.nodes.length) {\n            spliceNodes(res.nodes, ruleResult.nodes);\n          }\n        }\n      });\n    });\n    return result;\n  };\n  'use strict';\n  axe.utils.nodeSorter = function nodeSorter(nodeA, nodeB) {\n    nodeA = nodeA.actualNode || nodeA;\n    nodeB = nodeB.actualNode || nodeB;\n    if (nodeA === nodeB) {\n      return 0;\n    }\n    if (nodeA.compareDocumentPosition(nodeB) & 4) {\n      return -1;\n    } else {\n      return 1;\n    }\n  };\n  'use strict';\n  axe.utils.parseCrossOriginStylesheet = function parseCrossOriginStylesheet(url, options, priority, importedUrls, isCrossOrigin) {\n    var axiosOptions = {\n      method: 'get',\n      timeout: axe.constants.preload.timeout,\n      url: url\n    };\n    importedUrls.push(url);\n    return axe.imports.axios(axiosOptions).then(function(_ref) {\n      var data = _ref.data;\n      var result = options.convertDataToStylesheet({\n        data: data,\n        isCrossOrigin: isCrossOrigin,\n        priority: priority,\n        root: options.rootNode,\n        shadowId: options.shadowId\n      });\n      return axe.utils.parseStylesheet(result.sheet, options, priority, importedUrls, result.isCrossOrigin);\n    });\n  };\n  'use strict';\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n  function _nonIterableSpread() {\n    throw new TypeError('Invalid attempt to spread non-iterable instance');\n  }\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') {\n      return Array.from(iter);\n    }\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n      return arr2;\n    }\n  }\n  axe.utils.parseSameOriginStylesheet = function parseSameOriginStylesheet(sheet, options, priority, importedUrls) {\n    var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var rules = Array.from(sheet.cssRules);\n    if (!rules) {\n      return Promise.resolve();\n    }\n    var cssImportRules = rules.filter(function(r) {\n      return r.type === 3;\n    });\n    if (!cssImportRules.length) {\n      return Promise.resolve({\n        isCrossOrigin: isCrossOrigin,\n        priority: priority,\n        root: options.rootNode,\n        shadowId: options.shadowId,\n        sheet: sheet\n      });\n    }\n    var cssImportUrlsNotAlreadyImported = cssImportRules.filter(function(rule) {\n      return rule.href;\n    }).map(function(rule) {\n      return rule.href;\n    }).filter(function(url) {\n      return !importedUrls.includes(url);\n    });\n    var promises = cssImportUrlsNotAlreadyImported.map(function(importUrl, cssRuleIndex) {\n      var newPriority = [].concat(_toConsumableArray(priority), [ cssRuleIndex ]);\n      var isCrossOriginRequest = /^https?:\\/\\/|^\\/\\//i.test(importUrl);\n      return axe.utils.parseCrossOriginStylesheet(importUrl, options, newPriority, importedUrls, isCrossOriginRequest);\n    });\n    var nonImportCSSRules = rules.filter(function(r) {\n      return r.type !== 3;\n    });\n    if (!nonImportCSSRules.length) {\n      return Promise.all(promises);\n    }\n    promises.push(Promise.resolve(options.convertDataToStylesheet({\n      data: nonImportCSSRules.map(function(rule) {\n        return rule.cssText;\n      }).join(),\n      isCrossOrigin: isCrossOrigin,\n      priority: priority,\n      root: options.rootNode,\n      shadowId: options.shadowId\n    })));\n    return Promise.all(promises);\n  };\n  'use strict';\n  axe.utils.parseStylesheet = function parseStylesheet(sheet, options, priority, importedUrls) {\n    var isCrossOrigin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    var isSameOrigin = isSameOriginStylesheet(sheet);\n    if (isSameOrigin) {\n      return axe.utils.parseSameOriginStylesheet(sheet, options, priority, importedUrls, isCrossOrigin);\n    }\n    return axe.utils.parseCrossOriginStylesheet(sheet.href, options, priority, importedUrls, true);\n  };\n  function isSameOriginStylesheet(sheet) {\n    try {\n      var rules = sheet.cssRules;\n      if (!rules && sheet.href) {\n        return false;\n      }\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  'use strict';\n  utils.performanceTimer = function() {\n    'use strict';\n    function now() {\n      if (window.performance && window.performance) {\n        return window.performance.now();\n      }\n    }\n    var originalTime = null;\n    var lastRecordedTime = now();\n    return {\n      start: function start() {\n        this.mark('mark_axe_start');\n      },\n      end: function end() {\n        this.mark('mark_axe_end');\n        this.measure('axe', 'mark_axe_start', 'mark_axe_end');\n        this.logMeasures('axe');\n      },\n      auditStart: function auditStart() {\n        this.mark('mark_audit_start');\n      },\n      auditEnd: function auditEnd() {\n        this.mark('mark_audit_end');\n        this.measure('audit_start_to_end', 'mark_audit_start', 'mark_audit_end');\n        this.logMeasures();\n      },\n      mark: function mark(markName) {\n        if (window.performance && window.performance.mark !== undefined) {\n          window.performance.mark(markName);\n        }\n      },\n      measure: function measure(measureName, startMark, endMark) {\n        if (window.performance && window.performance.measure !== undefined) {\n          window.performance.measure(measureName, startMark, endMark);\n        }\n      },\n      logMeasures: function logMeasures(measureName) {\n        function log(req) {\n          axe.log('Measure ' + req.name + ' took ' + req.duration + 'ms');\n        }\n        if (window.performance && window.performance.getEntriesByType !== undefined) {\n          var axeStart = window.performance.getEntriesByName('mark_axe_start')[0];\n          var measures = window.performance.getEntriesByType('measure').filter(function(measure) {\n            return measure.startTime >= axeStart.startTime;\n          });\n          for (var i = 0; i < measures.length; ++i) {\n            var req = measures[i];\n            if (req.name === measureName) {\n              log(req);\n              return;\n            }\n            log(req);\n          }\n        }\n      },\n      timeElapsed: function timeElapsed() {\n        return now() - lastRecordedTime;\n      },\n      reset: function reset() {\n        if (!originalTime) {\n          originalTime = now();\n        }\n        lastRecordedTime = now();\n      }\n    };\n  }();\n  'use strict';\n  if (typeof Object.assign !== 'function') {\n    (function() {\n      Object.assign = function(target) {\n        'use strict';\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n          var source = arguments[index];\n          if (source !== undefined && source !== null) {\n            for (var nextKey in source) {\n              if (source.hasOwnProperty(nextKey)) {\n                output[nextKey] = source[nextKey];\n              }\n            }\n          }\n        }\n        return output;\n      };\n    })();\n  }\n  if (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n      value: function value(predicate) {\n        if (this === null) {\n          throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n        for (var i = 0; i < length; i++) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return value;\n          }\n        }\n        return undefined;\n      }\n    });\n  }\n  axe.utils.pollyfillElementsFromPoint = function() {\n    if (document.elementsFromPoint) {\n      return document.elementsFromPoint;\n    }\n    if (document.msElementsFromPoint) {\n      return document.msElementsFromPoint;\n    }\n    var usePointer = function() {\n      var element = document.createElement('x');\n      element.style.cssText = 'pointer-events:auto';\n      return element.style.pointerEvents === 'auto';\n    }();\n    var cssProp = usePointer ? 'pointer-events' : 'visibility';\n    var cssDisableVal = usePointer ? 'none' : 'hidden';\n    var style = document.createElement('style');\n    style.innerHTML = usePointer ? '* { pointer-events: all }' : '* { visibility: visible }';\n    return function(x, y) {\n      var current, i, d;\n      var elements = [];\n      var previousPointerEvents = [];\n      document.head.appendChild(style);\n      while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1) {\n        elements.push(current);\n        previousPointerEvents.push({\n          value: current.style.getPropertyValue(cssProp),\n          priority: current.style.getPropertyPriority(cssProp)\n        });\n        current.style.setProperty(cssProp, cssDisableVal, 'important');\n      }\n      if (elements.indexOf(document.documentElement) < elements.length - 1) {\n        elements.splice(elements.indexOf(document.documentElement), 1);\n        elements.push(document.documentElement);\n      }\n      for (i = previousPointerEvents.length; !!(d = previousPointerEvents[--i]); ) {\n        elements[i].style.setProperty(cssProp, d.value ? d.value : '', d.priority);\n      }\n      document.head.removeChild(style);\n      return elements;\n    };\n  };\n  if (typeof window.addEventListener === 'function') {\n    document.elementsFromPoint = axe.utils.pollyfillElementsFromPoint();\n  }\n  if (!Array.prototype.includes) {\n    Object.defineProperty(Array.prototype, 'includes', {\n      value: function value(searchElement) {\n        'use strict';\n        var O = Object(this);\n        var len = parseInt(O.length, 10) || 0;\n        if (len === 0) {\n          return false;\n        }\n        var n = parseInt(arguments[1], 10) || 0;\n        var k;\n        if (n >= 0) {\n          k = n;\n        } else {\n          k = len + n;\n          if (k < 0) {\n            k = 0;\n          }\n        }\n        var currentElement;\n        while (k < len) {\n          currentElement = O[k];\n          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {\n            return true;\n          }\n          k++;\n        }\n        return false;\n      }\n    });\n  }\n  if (!Array.prototype.some) {\n    Object.defineProperty(Array.prototype, 'some', {\n      value: function value(fun) {\n        'use strict';\n        if (this == null) {\n          throw new TypeError('Array.prototype.some called on null or undefined');\n        }\n        if (typeof fun !== 'function') {\n          throw new TypeError();\n        }\n        var t = Object(this);\n        var len = t.length >>> 0;\n        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n        for (var i = 0; i < len; i++) {\n          if (i in t && fun.call(thisArg, t[i], i, t)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    });\n  }\n  if (!Array.from) {\n    Object.defineProperty(Array, 'from', {\n      value: function() {\n        var toStr = Object.prototype.toString;\n        var isCallable = function isCallable(fn) {\n          return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function toInteger(value) {\n          var number = Number(value);\n          if (isNaN(number)) {\n            return 0;\n          }\n          if (number === 0 || !isFinite(number)) {\n            return number;\n          }\n          return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n        };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function toLength(value) {\n          var len = toInteger(value);\n          return Math.min(Math.max(len, 0), maxSafeInteger);\n        };\n        return function from(arrayLike) {\n          var C = this;\n          var items = Object(arrayLike);\n          if (arrayLike == null) {\n            throw new TypeError('Array.from requires an array-like object - not null or undefined');\n          }\n          var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n          var T;\n          if (typeof mapFn !== 'undefined') {\n            if (!isCallable(mapFn)) {\n              throw new TypeError('Array.from: when provided, the second argument must be a function');\n            }\n            if (arguments.length > 2) {\n              T = arguments[2];\n            }\n          }\n          var len = toLength(items.length);\n          var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n          var k = 0;\n          var kValue;\n          while (k < len) {\n            kValue = items[k];\n            if (mapFn) {\n              A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n            } else {\n              A[k] = kValue;\n            }\n            k += 1;\n          }\n          A.length = len;\n          return A;\n        };\n      }()\n    });\n  }\n  if (!String.prototype.includes) {\n    String.prototype.includes = function(search, start) {\n      if (typeof start !== 'number') {\n        start = 0;\n      }\n      if (start + search.length > this.length) {\n        return false;\n      } else {\n        return this.indexOf(search, start) !== -1;\n      }\n    };\n  }\n  'use strict';\n  axe.utils.preloadCssom = function preloadCssom(_ref) {\n    var _ref$treeRoot = _ref.treeRoot, treeRoot = _ref$treeRoot === void 0 ? axe._tree[0] : _ref$treeRoot;\n    var rootNodes = getAllRootNodesInTree(treeRoot);\n    if (!rootNodes.length) {\n      return Promise.resolve();\n    }\n    var dynamicDoc = document.implementation.createHTMLDocument('Dynamic document for loading cssom');\n    var convertDataToStylesheet = axe.utils.getStyleSheetFactory(dynamicDoc);\n    return getCssomForAllRootNodes(rootNodes, convertDataToStylesheet).then(function(assets) {\n      return flattenAssets(assets);\n    });\n  };\n  function getAllRootNodesInTree(tree) {\n    var ids = [];\n    var rootNodes = axe.utils.querySelectorAllFilter(tree, '*', function(node) {\n      if (ids.includes(node.shadowId)) {\n        return false;\n      }\n      ids.push(node.shadowId);\n      return true;\n    }).map(function(node) {\n      return {\n        shadowId: node.shadowId,\n        rootNode: axe.utils.getRootNode(node.actualNode)\n      };\n    });\n    return axe.utils.uniqueArray(rootNodes, []);\n  }\n  function getCssomForAllRootNodes(rootNodes, convertDataToStylesheet) {\n    var promises = [];\n    rootNodes.forEach(function(_ref2, index) {\n      var rootNode = _ref2.rootNode, shadowId = _ref2.shadowId;\n      var sheets = getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet);\n      if (!sheets) {\n        return Promise.all(promises);\n      }\n      var rootIndex = index + 1;\n      var parseOptions = {\n        rootNode: rootNode,\n        shadowId: shadowId,\n        convertDataToStylesheet: convertDataToStylesheet,\n        rootIndex: rootIndex\n      };\n      var importedUrls = [];\n      var p = Promise.all(sheets.map(function(sheet, sheetIndex) {\n        var priority = [ rootIndex, sheetIndex ];\n        return axe.utils.parseStylesheet(sheet, parseOptions, priority, importedUrls);\n      }));\n      promises.push(p);\n    });\n    return Promise.all(promises);\n  }\n  function flattenAssets(assets) {\n    return assets.reduce(function(acc, val) {\n      return Array.isArray(val) ? acc.concat(flattenAssets(val)) : acc.concat(val);\n    }, []);\n  }\n  function getStylesheetsOfRootNode(rootNode, shadowId, convertDataToStylesheet) {\n    var sheets;\n    if (rootNode.nodeType === 11 && shadowId) {\n      sheets = getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet);\n    } else {\n      sheets = getStylesheetsFromDocument(rootNode);\n    }\n    return filterStylesheetsWithSameHref(sheets);\n  }\n  function getStylesheetsFromDocumentFragment(rootNode, convertDataToStylesheet) {\n    return Array.from(rootNode.children).filter(filerStyleAndLinkAttributesInDocumentFragment).reduce(function(out, node) {\n      var nodeName = node.nodeName.toUpperCase();\n      var data = nodeName === 'STYLE' ? node.textContent : node;\n      var isLink = nodeName === 'LINK';\n      var stylesheet = convertDataToStylesheet({\n        data: data,\n        isLink: isLink,\n        root: rootNode\n      });\n      out.push(stylesheet.sheet);\n      return out;\n    }, []);\n  }\n  function getStylesheetsFromDocument(rootNode) {\n    return Array.from(rootNode.styleSheets).filter(function(sheet) {\n      return filterMediaIsPrint(sheet.media.mediaText);\n    });\n  }\n  function filerStyleAndLinkAttributesInDocumentFragment(node) {\n    var nodeName = node.nodeName.toUpperCase();\n    var linkHref = node.getAttribute('href');\n    var linkRel = node.getAttribute('rel');\n    var isLink = nodeName === 'LINK' && linkHref && linkRel && node.rel.toUpperCase().includes('STYLESHEET');\n    var isStyle = nodeName === 'STYLE';\n    return isStyle || isLink && filterMediaIsPrint(node.media);\n  }\n  function filterMediaIsPrint(media) {\n    if (!media) {\n      return true;\n    }\n    return !media.toUpperCase().includes('PRINT');\n  }\n  function filterStylesheetsWithSameHref(sheets) {\n    var hrefs = [];\n    return sheets.filter(function(sheet) {\n      if (!sheet.href) {\n        return true;\n      }\n      if (hrefs.includes(sheet.href)) {\n        return false;\n      }\n      hrefs.push(sheet.href);\n      return true;\n    });\n  }\n  'use strict';\n  axe.utils.preloadMedia = function preloadMedia(_ref) {\n    var _ref$treeRoot = _ref.treeRoot, treeRoot = _ref$treeRoot === void 0 ? axe._tree[0] : _ref$treeRoot;\n    var mediaVirtualNodes = axe.utils.querySelectorAllFilter(treeRoot, 'video, audio', function(_ref2) {\n      var actualNode = _ref2.actualNode;\n      if (actualNode.hasAttribute('src')) {\n        return !!actualNode.getAttribute('src');\n      }\n      var sourceWithSrc = Array.from(actualNode.getElementsByTagName('source')).filter(function(source) {\n        return !!source.getAttribute('src');\n      });\n      if (sourceWithSrc.length <= 0) {\n        return false;\n      }\n      return true;\n    });\n    return Promise.all(mediaVirtualNodes.map(function(_ref3) {\n      var actualNode = _ref3.actualNode;\n      return isMediaElementReady(actualNode);\n    }));\n  };\n  function isMediaElementReady(elm) {\n    return new Promise(function(resolve) {\n      if (elm.readyState > 0) {\n        resolve(elm);\n      }\n      function onMediaReady() {\n        elm.removeEventListener('loadedmetadata', onMediaReady);\n        resolve(elm);\n      }\n      elm.addEventListener('loadedmetadata', onMediaReady);\n    });\n  }\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function isValidPreloadObject(preload) {\n    return _typeof(preload) === 'object' && Array.isArray(preload.assets);\n  }\n  axe.utils.shouldPreload = function shouldPreload(options) {\n    if (!options || options.preload === undefined || options.preload === null) {\n      return true;\n    }\n    if (typeof options.preload === 'boolean') {\n      return options.preload;\n    }\n    return isValidPreloadObject(options.preload);\n  };\n  axe.utils.getPreloadConfig = function getPreloadConfig(options) {\n    var _axe$constants$preloa = axe.constants.preload, assets = _axe$constants$preloa.assets, timeout = _axe$constants$preloa.timeout;\n    var config = {\n      assets: assets,\n      timeout: timeout\n    };\n    if (!options.preload) {\n      return config;\n    }\n    if (typeof options.preload === 'boolean') {\n      return config;\n    }\n    var areRequestedAssetsValid = options.preload.assets.every(function(a) {\n      return assets.includes(a.toLowerCase());\n    });\n    if (!areRequestedAssetsValid) {\n      throw new Error('Requested assets, not supported. ' + 'Supported assets are: '.concat(assets.join(', '), '.'));\n    }\n    config.assets = axe.utils.uniqueArray(options.preload.assets.map(function(a) {\n      return a.toLowerCase();\n    }), []);\n    if (options.preload.timeout && typeof options.preload.timeout === 'number' && !isNaN(options.preload.timeout)) {\n      config.timeout = options.preload.timeout;\n    }\n    return config;\n  };\n  axe.utils.preload = function preload(options) {\n    var preloadFunctionsMap = {\n      cssom: axe.utils.preloadCssom,\n      media: axe.utils.preloadMedia\n    };\n    var shouldPreload = axe.utils.shouldPreload(options);\n    if (!shouldPreload) {\n      return Promise.resolve();\n    }\n    return new Promise(function(resolve, reject) {\n      var _axe$utils$getPreload = axe.utils.getPreloadConfig(options), assets = _axe$utils$getPreload.assets, timeout = _axe$utils$getPreload.timeout;\n      var preloadTimeout = setTimeout(function() {\n        return reject(new Error('Preload assets timed out.'));\n      }, timeout);\n      Promise.all(assets.map(function(asset) {\n        return preloadFunctionsMap[asset](options).then(function(results) {\n          return _defineProperty({}, asset, results);\n        });\n      })).then(function(results) {\n        var preloadAssets = results.reduce(function(out, result) {\n          return _extends({}, out, {}, result);\n        }, {});\n        clearTimeout(preloadTimeout);\n        resolve(preloadAssets);\n      })['catch'](function(err) {\n        clearTimeout(preloadTimeout);\n        reject(err);\n      });\n    });\n  };\n  'use strict';\n  var dataRegex = /\\$\\{\\s?data\\s?\\}/g;\n  function substitute(str, data) {\n    if (typeof data === 'string') {\n      return str.replace(dataRegex, data);\n    }\n    for (var prop in data) {\n      if (data.hasOwnProperty(prop)) {\n        var regex = new RegExp('\\\\${\\\\s?data\\\\.' + prop + '\\\\s?}', 'g');\n        str = str.replace(regex, data[prop]);\n      }\n    }\n    return str;\n  }\n  axe.utils.processMessage = function processMessage(message, data) {\n    if (!message) {\n      return;\n    }\n    if (Array.isArray(data)) {\n      data.values = data.join(', ');\n      if (typeof message.singular === 'string' && typeof message.plural === 'string') {\n        var _str = data.length === 1 ? message.singular : message.plural;\n        return substitute(_str, data);\n      }\n      return substitute(message, data);\n    }\n    if (typeof message === 'string') {\n      return substitute(message, data);\n    }\n    if (typeof data === 'string') {\n      var _str2 = message[data];\n      return substitute(_str2, data);\n    }\n    var str = message['default'] || helpers.incompleteFallbackMessage();\n    if (data && data.messageKey && message[data.messageKey]) {\n      str = message[data.messageKey];\n    }\n    return processMessage(str, data);\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  function getIncompleteReason(checkData, messages) {\n    function getDefaultMsg(messages) {\n      if (messages.incomplete && messages.incomplete['default']) {\n        return messages.incomplete['default'];\n      } else {\n        return helpers.incompleteFallbackMessage();\n      }\n    }\n    if (checkData && checkData.missingData) {\n      try {\n        var msg = messages.incomplete[checkData.missingData[0].reason];\n        if (!msg) {\n          throw new Error();\n        }\n        return msg;\n      } catch (e) {\n        if (typeof checkData.missingData === 'string') {\n          return messages.incomplete[checkData.missingData];\n        } else {\n          return getDefaultMsg(messages);\n        }\n      }\n    } else if (checkData && checkData.messageKey) {\n      return messages.incomplete[checkData.messageKey];\n    } else {\n      return getDefaultMsg(messages);\n    }\n  }\n  function extender(checksData, shouldBeTrue) {\n    'use strict';\n    return function(check) {\n      var sourceData = checksData[check.id] || {};\n      var messages = sourceData.messages || {};\n      var data = Object.assign({}, sourceData);\n      delete data.messages;\n      if (check.result === undefined) {\n        if (_typeof(messages.incomplete) === 'object' && !Array.isArray(check.data)) {\n          data.message = getIncompleteReason(check.data, messages);\n        }\n        if (!data.message) {\n          data.message = messages.incomplete;\n        }\n      } else {\n        data.message = check.result === shouldBeTrue ? messages.pass : messages.fail;\n      }\n      if (typeof data.message !== 'function') {\n        data.message = axe.utils.processMessage(data.message, check.data);\n      }\n      axe.utils.extendMetaData(check, data);\n    };\n  }\n  axe.utils.publishMetaData = function(ruleResult) {\n    'use strict';\n    var checksData = axe._audit.data.checks || {};\n    var rulesData = axe._audit.data.rules || {};\n    var rule = axe.utils.findBy(axe._audit.rules, 'id', ruleResult.id) || {};\n    ruleResult.tags = axe.utils.clone(rule.tags || []);\n    var shouldBeTrue = extender(checksData, true);\n    var shouldBeFalse = extender(checksData, false);\n    ruleResult.nodes.forEach(function(detail) {\n      detail.any.forEach(shouldBeTrue);\n      detail.all.forEach(shouldBeTrue);\n      detail.none.forEach(shouldBeFalse);\n    });\n    axe.utils.extendMetaData(ruleResult, axe.utils.clone(rulesData[ruleResult.id] || {}));\n  };\n  'use strict';\n  function createLocalVariables(vNodes, anyLevel, thisLevel, parentShadowId) {\n    var retVal = {\n      vNodes: vNodes.slice(),\n      anyLevel: anyLevel,\n      thisLevel: thisLevel,\n      parentShadowId: parentShadowId\n    };\n    retVal.vNodes.reverse();\n    return retVal;\n  }\n  function matchExpressions(domTree, expressions, filter) {\n    var stack = [];\n    var vNodes = Array.isArray(domTree) ? domTree : [ domTree ];\n    var currentLevel = createLocalVariables(vNodes, expressions, [], domTree[0].shadowId);\n    var result = [];\n    while (currentLevel.vNodes.length) {\n      var vNode = currentLevel.vNodes.pop();\n      var childOnly = [];\n      var childAny = [];\n      var combined = currentLevel.anyLevel.slice().concat(currentLevel.thisLevel);\n      var added = false;\n      for (var i = 0; i < combined.length; i++) {\n        var exp = combined[i];\n        if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && axe.utils.matchesExpression(vNode, exp[0])) {\n          if (exp.length === 1) {\n            if (!added && (!filter || filter(vNode))) {\n              result.push(vNode);\n              added = true;\n            }\n          } else {\n            var rest = exp.slice(1);\n            if ([ ' ', '>' ].includes(rest[0].combinator) === false) {\n              throw new Error('axe.utils.querySelectorAll does not support the combinator: ' + exp[1].combinator);\n            }\n            if (rest[0].combinator === '>') {\n              childOnly.push(rest);\n            } else {\n              childAny.push(rest);\n            }\n          }\n        }\n        if ((!exp[0].id || vNode.shadowId === currentLevel.parentShadowId) && currentLevel.anyLevel.includes(exp)) {\n          childAny.push(exp);\n        }\n      }\n      if (vNode.children && vNode.children.length) {\n        stack.push(currentLevel);\n        currentLevel = createLocalVariables(vNode.children, childAny, childOnly, vNode.shadowId);\n      }\n      while (!currentLevel.vNodes.length && stack.length) {\n        currentLevel = stack.pop();\n      }\n    }\n    return result;\n  }\n  axe.utils.querySelectorAll = function(domTree, selector) {\n    return axe.utils.querySelectorAllFilter(domTree, selector);\n  };\n  axe.utils.querySelectorAllFilter = function(domTree, selector, filter) {\n    domTree = Array.isArray(domTree) ? domTree : [ domTree ];\n    var expressions = axe.utils.convertSelector(selector);\n    return matchExpressions(domTree, expressions, filter);\n  };\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  (function() {\n    'use strict';\n    function noop() {}\n    function funcGuard(f) {\n      if (typeof f !== 'function') {\n        throw new TypeError('Queue methods require functions as arguments');\n      }\n    }\n    function queue() {\n      var tasks = [];\n      var started = 0;\n      var remaining = 0;\n      var completeQueue = noop;\n      var complete = false;\n      var err;\n      var defaultFail = function defaultFail(e) {\n        err = e;\n        setTimeout(function() {\n          if (err !== undefined && err !== null) {\n            axe.log('Uncaught error (of queue)', err);\n          }\n        }, 1);\n      };\n      var failed = defaultFail;\n      function createResolve(i) {\n        return function(r) {\n          tasks[i] = r;\n          remaining -= 1;\n          if (!remaining && completeQueue !== noop) {\n            complete = true;\n            completeQueue(tasks);\n          }\n        };\n      }\n      function abort(msg) {\n        completeQueue = noop;\n        failed(msg);\n        return tasks;\n      }\n      function pop() {\n        var length = tasks.length;\n        for (;started < length; started++) {\n          var task = tasks[started];\n          try {\n            task.call(null, createResolve(started), abort);\n          } catch (e) {\n            abort(e);\n          }\n        }\n      }\n      var q = {\n        defer: function defer(fn) {\n          if (_typeof(fn) === 'object' && fn.then && fn['catch']) {\n            var defer = fn;\n            fn = function fn(resolve, reject) {\n              defer.then(resolve)['catch'](reject);\n            };\n          }\n          funcGuard(fn);\n          if (err !== undefined) {\n            return;\n          } else if (complete) {\n            throw new Error('Queue already completed');\n          }\n          tasks.push(fn);\n          ++remaining;\n          pop();\n          return q;\n        },\n        then: function then(fn) {\n          funcGuard(fn);\n          if (completeQueue !== noop) {\n            throw new Error('queue `then` already set');\n          }\n          if (!err) {\n            completeQueue = fn;\n            if (!remaining) {\n              complete = true;\n              completeQueue(tasks);\n            }\n          }\n          return q;\n        },\n        catch: function _catch(fn) {\n          funcGuard(fn);\n          if (failed !== defaultFail) {\n            throw new Error('queue `catch` already set');\n          }\n          if (!err) {\n            failed = fn;\n          } else {\n            fn(err);\n            err = null;\n          }\n          return q;\n        },\n        abort: abort\n      };\n      return q;\n    }\n    axe.utils.queue = queue;\n  })();\n  'use strict';\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  (function(exports) {\n    'use strict';\n    var messages = {}, subscribers = {}, errorTypes = Object.freeze([ 'EvalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError' ]);\n    function _getSource() {\n      var application = 'axeAPI', version = '', src;\n      if (typeof axe !== 'undefined' && axe._audit && axe._audit.application) {\n        application = axe._audit.application;\n      }\n      if (typeof axe !== 'undefined') {\n        version = axe.version;\n      }\n      src = application + '.' + version;\n      return src;\n    }\n    function verify(postedMessage) {\n      if (_typeof(postedMessage) === 'object' && typeof postedMessage.uuid === 'string' && postedMessage._respondable === true) {\n        var messageSource = _getSource();\n        return postedMessage._source === messageSource;\n      }\n      return false;\n    }\n    function post(win, topic, message, uuid, keepalive, callback) {\n      var error;\n      if (message instanceof Error) {\n        error = {\n          name: message.name,\n          message: message.message,\n          stack: message.stack\n        };\n        message = undefined;\n      }\n      var data = {\n        uuid: uuid,\n        topic: topic,\n        message: message,\n        error: error,\n        _respondable: true,\n        _source: _getSource(),\n        _axeuuid: axe._uuid,\n        _keepalive: keepalive\n      };\n      var axeRespondables = axe._cache.get('axeRespondables');\n      if (!axeRespondables) {\n        axeRespondables = {};\n        axe._cache.set('axeRespondables', axeRespondables);\n      }\n      axeRespondables[uuid] = true;\n      if (typeof callback === 'function') {\n        messages[uuid] = callback;\n      }\n      win.postMessage(JSON.stringify(data), '*');\n    }\n    function respondable(win, topic, message, keepalive, callback) {\n      var id = uuid.v1();\n      post(win, topic, message, id, keepalive, callback);\n    }\n    respondable.subscribe = function(topic, callback) {\n      subscribers[topic] = callback;\n    };\n    respondable.isInFrame = function(win) {\n      win = win || window;\n      return !!win.frameElement;\n    };\n    function createResponder(source, topic, uuid) {\n      return function(message, keepalive, callback) {\n        post(source, topic, message, uuid, keepalive, callback);\n      };\n    }\n    function publish(source, data, keepalive) {\n      var topic = data.topic;\n      var subscriber = subscribers[topic];\n      if (subscriber && source === window.parent) {\n        var responder = createResponder(source, null, data.uuid);\n        subscriber(data.message, keepalive, responder);\n      }\n    }\n    function buildErrorObject(error) {\n      var msg = error.message || 'Unknown error occurred';\n      var errorName = errorTypes.includes(error.name) ? error.name : 'Error';\n      var ErrConstructor = window[errorName] || Error;\n      if (error.stack) {\n        msg += '\\n' + error.stack.replace(error.message, '');\n      }\n      return new ErrConstructor(msg);\n    }\n    function parseMessage(dataString) {\n      var data;\n      if (typeof dataString !== 'string') {\n        return;\n      }\n      try {\n        data = JSON.parse(dataString);\n      } catch (ex) {}\n      if (!verify(data)) {\n        return;\n      }\n      if (_typeof(data.error) === 'object') {\n        data.error = buildErrorObject(data.error);\n      } else {\n        data.error = undefined;\n      }\n      return data;\n    }\n    if (typeof window.addEventListener === 'function') {\n      window.addEventListener('message', function(e) {\n        var data = parseMessage(e.data);\n        if (!data || !data._axeuuid) {\n          return;\n        }\n        var uuid = data.uuid;\n        var axeRespondables = axe._cache.get('axeRespondables') || {};\n        if (axeRespondables[uuid] && data._axeuuid === axe._uuid) {\n          return;\n        }\n        var keepalive = data._keepalive;\n        var callback = messages[uuid];\n        if (callback) {\n          var result = data.error || data.message;\n          var responder = createResponder(e.source, data.topic, uuid);\n          callback(result, keepalive, responder);\n          if (!keepalive) {\n            delete messages[uuid];\n          }\n        }\n        if (!data.error) {\n          try {\n            publish(e.source, data, keepalive);\n          } catch (err) {\n            post(e.source, null, err, uuid, false);\n          }\n        }\n      }, false);\n    }\n    exports.respondable = respondable;\n  })(utils);\n  'use strict';\n  function matchTags(rule, runOnly) {\n    'use strict';\n    var include, exclude, matching;\n    var defaultExclude = axe._audit && axe._audit.tagExclude ? axe._audit.tagExclude : [];\n    if (runOnly.hasOwnProperty('include') || runOnly.hasOwnProperty('exclude')) {\n      include = runOnly.include || [];\n      include = Array.isArray(include) ? include : [ include ];\n      exclude = runOnly.exclude || [];\n      exclude = Array.isArray(exclude) ? exclude : [ exclude ];\n      exclude = exclude.concat(defaultExclude.filter(function(tag) {\n        return include.indexOf(tag) === -1;\n      }));\n    } else {\n      include = Array.isArray(runOnly) ? runOnly : [ runOnly ];\n      exclude = defaultExclude.filter(function(tag) {\n        return include.indexOf(tag) === -1;\n      });\n    }\n    matching = include.some(function(tag) {\n      return rule.tags.indexOf(tag) !== -1;\n    });\n    if (matching || include.length === 0 && rule.enabled !== false) {\n      return exclude.every(function(tag) {\n        return rule.tags.indexOf(tag) === -1;\n      });\n    } else {\n      return false;\n    }\n  }\n  axe.utils.ruleShouldRun = function(rule, context, options) {\n    'use strict';\n    var runOnly = options.runOnly || {};\n    var ruleOptions = (options.rules || {})[rule.id];\n    if (rule.pageLevel && !context.page) {\n      return false;\n    } else if (runOnly.type === 'rule') {\n      return runOnly.values.indexOf(rule.id) !== -1;\n    } else if (ruleOptions && typeof ruleOptions.enabled === 'boolean') {\n      return ruleOptions.enabled;\n    } else if (runOnly.type === 'tag' && runOnly.values) {\n      return matchTags(rule, runOnly.values);\n    } else {\n      return matchTags(rule, []);\n    }\n  };\n  'use strict';\n  function setScroll(elm, top, left) {\n    if (elm === window) {\n      return elm.scroll(left, top);\n    } else {\n      elm.scrollTop = top;\n      elm.scrollLeft = left;\n    }\n  }\n  function getElmScrollRecursive(root) {\n    return Array.from(root.children || root.childNodes || []).reduce(function(scrolls, elm) {\n      var scroll = axe.utils.getScroll(elm);\n      if (scroll) {\n        scrolls.push(scroll);\n      }\n      return scrolls.concat(getElmScrollRecursive(elm));\n    }, []);\n  }\n  axe.utils.getScrollState = function getScrollState() {\n    var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n    var root = win.document.documentElement;\n    var windowScroll = [ win.pageXOffset !== undefined ? {\n      elm: win,\n      top: win.pageYOffset,\n      left: win.pageXOffset\n    } : {\n      elm: root,\n      top: root.scrollTop,\n      left: root.scrollLeft\n    } ];\n    return windowScroll.concat(getElmScrollRecursive(document.body));\n  };\n  axe.utils.setScrollState = function setScrollState(scrollState) {\n    scrollState.forEach(function(_ref) {\n      var elm = _ref.elm, top = _ref.top, left = _ref.left;\n      return setScroll(elm, top, left);\n    });\n  };\n  'use strict';\n  function getDeepest(collection) {\n    'use strict';\n    return collection.sort(function(a, b) {\n      if (axe.utils.contains(a, b)) {\n        return 1;\n      }\n      return -1;\n    })[0];\n  }\n  function isNodeInContext(node, context) {\n    'use strict';\n    var include = context.include && getDeepest(context.include.filter(function(candidate) {\n      return axe.utils.contains(candidate, node);\n    }));\n    var exclude = context.exclude && getDeepest(context.exclude.filter(function(candidate) {\n      return axe.utils.contains(candidate, node);\n    }));\n    if (!exclude && include || exclude && axe.utils.contains(exclude, include)) {\n      return true;\n    }\n    return false;\n  }\n  function pushNode(result, nodes) {\n    'use strict';\n    var temp;\n    if (result.length === 0) {\n      return nodes;\n    }\n    if (result.length < nodes.length) {\n      temp = result;\n      result = nodes;\n      nodes = temp;\n    }\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (!result.includes(nodes[i])) {\n        result.push(nodes[i]);\n      }\n    }\n    return result;\n  }\n  function reduceIncludes(includes) {\n    return includes.reduce(function(res, el) {\n      if (!res.length || !axe.utils.contains(res[res.length - 1], el)) {\n        res.push(el);\n      }\n      return res;\n    }, []);\n  }\n  axe.utils.select = function select(selector, context) {\n    'use strict';\n    var result = [];\n    var candidate;\n    if (axe._selectCache) {\n      for (var j = 0, l = axe._selectCache.length; j < l; j++) {\n        var item = axe._selectCache[j];\n        if (item.selector === selector) {\n          return item.result;\n        }\n      }\n    }\n    var curried = function(context) {\n      return function(node) {\n        return isNodeInContext(node, context);\n      };\n    }(context);\n    var reducedIncludes = reduceIncludes(context.include);\n    for (var i = 0; i < reducedIncludes.length; i++) {\n      candidate = reducedIncludes[i];\n      result = pushNode(result, axe.utils.querySelectorAllFilter(candidate, selector, curried));\n    }\n    if (axe._selectCache) {\n      axe._selectCache.push({\n        selector: selector,\n        result: result\n      });\n    }\n    return result;\n  };\n  'use strict';\n  axe.utils.toArray = function(thing) {\n    'use strict';\n    return Array.prototype.slice.call(thing);\n  };\n  axe.utils.uniqueArray = function(arr1, arr2) {\n    return arr1.concat(arr2).filter(function(elem, pos, arr) {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n  'use strict';\n  axe.utils.tokenList = function(str) {\n    'use strict';\n    return str.trim().replace(/\\s{2,}/g, ' ').split(' ');\n  };\n  'use strict';\n  var uuid;\n  (function(_global) {\n    var _rng;\n    var _crypto = _global.crypto || _global.msCrypto;\n    if (!_rng && _crypto && _crypto.getRandomValues) {\n      var _rnds8 = new Uint8Array(16);\n      _rng = function whatwgRNG() {\n        _crypto.getRandomValues(_rnds8);\n        return _rnds8;\n      };\n    }\n    if (!_rng) {\n      var _rnds = new Array(16);\n      _rng = function _rng() {\n        for (var i = 0, r; i < 16; i++) {\n          if ((i & 3) === 0) {\n            r = Math.random() * 4294967296;\n          }\n          _rnds[i] = r >>> ((i & 3) << 3) & 255;\n        }\n        return _rnds;\n      };\n    }\n    var BufferClass = typeof _global.Buffer == 'function' ? _global.Buffer : Array;\n    var _byteToHex = [];\n    var _hexToByte = {};\n    for (var i = 0; i < 256; i++) {\n      _byteToHex[i] = (i + 256).toString(16).substr(1);\n      _hexToByte[_byteToHex[i]] = i;\n    }\n    function parse(s, buf, offset) {\n      var i = buf && offset || 0, ii = 0;\n      buf = buf || [];\n      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n        if (ii < 16) {\n          buf[i + ii++] = _hexToByte[oct];\n        }\n      });\n      while (ii < 16) {\n        buf[i + ii++] = 0;\n      }\n      return buf;\n    }\n    function unparse(buf, offset) {\n      var i = offset || 0, bth = _byteToHex;\n      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];\n    }\n    var _seedBytes = _rng();\n    var _nodeId = [ _seedBytes[0] | 1, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5] ];\n    var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 16383;\n    var _lastMSecs = 0, _lastNSecs = 0;\n    function v1(options, buf, offset) {\n      var i = buf && offset || 0;\n      var b = buf || [];\n      options = options || {};\n      var clockseq = options.clockseq != null ? options.clockseq : _clockseq;\n      var msecs = options.msecs != null ? options.msecs : new Date().getTime();\n      var nsecs = options.nsecs != null ? options.nsecs : _lastNSecs + 1;\n      var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;\n      if (dt < 0 && options.clockseq == null) {\n        clockseq = clockseq + 1 & 16383;\n      }\n      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {\n        nsecs = 0;\n      }\n      if (nsecs >= 1e4) {\n        throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n      }\n      _lastMSecs = msecs;\n      _lastNSecs = nsecs;\n      _clockseq = clockseq;\n      msecs += 122192928e5;\n      var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;\n      b[i++] = tl >>> 24 & 255;\n      b[i++] = tl >>> 16 & 255;\n      b[i++] = tl >>> 8 & 255;\n      b[i++] = tl & 255;\n      var tmh = msecs / 4294967296 * 1e4 & 268435455;\n      b[i++] = tmh >>> 8 & 255;\n      b[i++] = tmh & 255;\n      b[i++] = tmh >>> 24 & 15 | 16;\n      b[i++] = tmh >>> 16 & 255;\n      b[i++] = clockseq >>> 8 | 128;\n      b[i++] = clockseq & 255;\n      var node = options.node || _nodeId;\n      for (var n = 0; n < 6; n++) {\n        b[i + n] = node[n];\n      }\n      return buf ? buf : unparse(b);\n    }\n    function v4(options, buf, offset) {\n      var i = buf && offset || 0;\n      if (typeof options == 'string') {\n        buf = options == 'binary' ? new BufferClass(16) : null;\n        options = null;\n      }\n      options = options || {};\n      var rnds = options.random || (options.rng || _rng)();\n      rnds[6] = rnds[6] & 15 | 64;\n      rnds[8] = rnds[8] & 63 | 128;\n      if (buf) {\n        for (var ii = 0; ii < 16; ii++) {\n          buf[i + ii] = rnds[ii];\n        }\n      }\n      return buf || unparse(rnds);\n    }\n    uuid = v4;\n    uuid.v1 = v1;\n    uuid.v4 = v4;\n    uuid.parse = parse;\n    uuid.unparse = unparse;\n    uuid.BufferClass = BufferClass;\n    axe._uuid = v1();\n  })(window);\n  'use strict';\n  axe.utils.validInputTypes = function validInputTypes() {\n    'use strict';\n    return [ 'hidden', 'text', 'search', 'tel', 'url', 'email', 'password', 'date', 'month', 'week', 'time', 'datetime-local', 'number', 'range', 'color', 'checkbox', 'radio', 'file', 'submit', 'image', 'reset', 'button' ];\n  };\n  'use strict';\n  var langs = [ 'aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'in', 'io', 'is', 'it', 'iu', 'iw', 'ja', 'ji', 'jv', 'jw', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mo', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'sh', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu', 'aaa', 'aab', 'aac', 'aad', 'aae', 'aaf', 'aag', 'aah', 'aai', 'aak', 'aal', 'aam', 'aan', 'aao', 'aap', 'aaq', 'aas', 'aat', 'aau', 'aav', 'aaw', 'aax', 'aaz', 'aba', 'abb', 'abc', 'abd', 'abe', 'abf', 'abg', 'abh', 'abi', 'abj', 'abl', 'abm', 'abn', 'abo', 'abp', 'abq', 'abr', 'abs', 'abt', 'abu', 'abv', 'abw', 'abx', 'aby', 'abz', 'aca', 'acb', 'acd', 'ace', 'acf', 'ach', 'aci', 'ack', 'acl', 'acm', 'acn', 'acp', 'acq', 'acr', 'acs', 'act', 'acu', 'acv', 'acw', 'acx', 'acy', 'acz', 'ada', 'adb', 'add', 'ade', 'adf', 'adg', 'adh', 'adi', 'adj', 'adl', 'adn', 'ado', 'adp', 'adq', 'adr', 'ads', 'adt', 'adu', 'adw', 'adx', 'ady', 'adz', 'aea', 'aeb', 'aec', 'aed', 'aee', 'aek', 'ael', 'aem', 'aen', 'aeq', 'aer', 'aes', 'aeu', 'aew', 'aey', 'aez', 'afa', 'afb', 'afd', 'afe', 'afg', 'afh', 'afi', 'afk', 'afn', 'afo', 'afp', 'afs', 'aft', 'afu', 'afz', 'aga', 'agb', 'agc', 'agd', 'age', 'agf', 'agg', 'agh', 'agi', 'agj', 'agk', 'agl', 'agm', 'agn', 'ago', 'agp', 'agq', 'agr', 'ags', 'agt', 'agu', 'agv', 'agw', 'agx', 'agy', 'agz', 'aha', 'ahb', 'ahg', 'ahh', 'ahi', 'ahk', 'ahl', 'ahm', 'ahn', 'aho', 'ahp', 'ahr', 'ahs', 'aht', 'aia', 'aib', 'aic', 'aid', 'aie', 'aif', 'aig', 'aih', 'aii', 'aij', 'aik', 'ail', 'aim', 'ain', 'aio', 'aip', 'aiq', 'air', 'ais', 'ait', 'aiw', 'aix', 'aiy', 'aja', 'ajg', 'aji', 'ajn', 'ajp', 'ajt', 'aju', 'ajw', 'ajz', 'akb', 'akc', 'akd', 'ake', 'akf', 'akg', 'akh', 'aki', 'akj', 'akk', 'akl', 'akm', 'ako', 'akp', 'akq', 'akr', 'aks', 'akt', 'aku', 'akv', 'akw', 'akx', 'aky', 'akz', 'ala', 'alc', 'ald', 'ale', 'alf', 'alg', 'alh', 'ali', 'alj', 'alk', 'all', 'alm', 'aln', 'alo', 'alp', 'alq', 'alr', 'als', 'alt', 'alu', 'alv', 'alw', 'alx', 'aly', 'alz', 'ama', 'amb', 'amc', 'ame', 'amf', 'amg', 'ami', 'amj', 'amk', 'aml', 'amm', 'amn', 'amo', 'amp', 'amq', 'amr', 'ams', 'amt', 'amu', 'amv', 'amw', 'amx', 'amy', 'amz', 'ana', 'anb', 'anc', 'and', 'ane', 'anf', 'ang', 'anh', 'ani', 'anj', 'ank', 'anl', 'anm', 'ann', 'ano', 'anp', 'anq', 'anr', 'ans', 'ant', 'anu', 'anv', 'anw', 'anx', 'any', 'anz', 'aoa', 'aob', 'aoc', 'aod', 'aoe', 'aof', 'aog', 'aoh', 'aoi', 'aoj', 'aok', 'aol', 'aom', 'aon', 'aor', 'aos', 'aot', 'aou', 'aox', 'aoz', 'apa', 'apb', 'apc', 'apd', 'ape', 'apf', 'apg', 'aph', 'api', 'apj', 'apk', 'apl', 'apm', 'apn', 'apo', 'app', 'apq', 'apr', 'aps', 'apt', 'apu', 'apv', 'apw', 'apx', 'apy', 'apz', 'aqa', 'aqc', 'aqd', 'aqg', 'aql', 'aqm', 'aqn', 'aqp', 'aqr', 'aqt', 'aqz', 'arb', 'arc', 'ard', 'are', 'arh', 'ari', 'arj', 'ark', 'arl', 'arn', 'aro', 'arp', 'arq', 'arr', 'ars', 'art', 'aru', 'arv', 'arw', 'arx', 'ary', 'arz', 'asa', 'asb', 'asc', 'asd', 'ase', 'asf', 'asg', 'ash', 'asi', 'asj', 'ask', 'asl', 'asn', 'aso', 'asp', 'asq', 'asr', 'ass', 'ast', 'asu', 'asv', 'asw', 'asx', 'asy', 'asz', 'ata', 'atb', 'atc', 'atd', 'ate', 'atg', 'ath', 'ati', 'atj', 'atk', 'atl', 'atm', 'atn', 'ato', 'atp', 'atq', 'atr', 'ats', 'att', 'atu', 'atv', 'atw', 'atx', 'aty', 'atz', 'aua', 'aub', 'auc', 'aud', 'aue', 'auf', 'aug', 'auh', 'aui', 'auj', 'auk', 'aul', 'aum', 'aun', 'auo', 'aup', 'auq', 'aur', 'aus', 'aut', 'auu', 'auw', 'aux', 'auy', 'auz', 'avb', 'avd', 'avi', 'avk', 'avl', 'avm', 'avn', 'avo', 'avs', 'avt', 'avu', 'avv', 'awa', 'awb', 'awc', 'awd', 'awe', 'awg', 'awh', 'awi', 'awk', 'awm', 'awn', 'awo', 'awr', 'aws', 'awt', 'awu', 'awv', 'aww', 'awx', 'awy', 'axb', 'axe', 'axg', 'axk', 'axl', 'axm', 'axx', 'aya', 'ayb', 'ayc', 'ayd', 'aye', 'ayg', 'ayh', 'ayi', 'ayk', 'ayl', 'ayn', 'ayo', 'ayp', 'ayq', 'ayr', 'ays', 'ayt', 'ayu', 'ayx', 'ayy', 'ayz', 'aza', 'azb', 'azc', 'azd', 'azg', 'azj', 'azm', 'azn', 'azo', 'azt', 'azz', 'baa', 'bab', 'bac', 'bad', 'bae', 'baf', 'bag', 'bah', 'bai', 'baj', 'bal', 'ban', 'bao', 'bap', 'bar', 'bas', 'bat', 'bau', 'bav', 'baw', 'bax', 'bay', 'baz', 'bba', 'bbb', 'bbc', 'bbd', 'bbe', 'bbf', 'bbg', 'bbh', 'bbi', 'bbj', 'bbk', 'bbl', 'bbm', 'bbn', 'bbo', 'bbp', 'bbq', 'bbr', 'bbs', 'bbt', 'bbu', 'bbv', 'bbw', 'bbx', 'bby', 'bbz', 'bca', 'bcb', 'bcc', 'bcd', 'bce', 'bcf', 'bcg', 'bch', 'bci', 'bcj', 'bck', 'bcl', 'bcm', 'bcn', 'bco', 'bcp', 'bcq', 'bcr', 'bcs', 'bct', 'bcu', 'bcv', 'bcw', 'bcy', 'bcz', 'bda', 'bdb', 'bdc', 'bdd', 'bde', 'bdf', 'bdg', 'bdh', 'bdi', 'bdj', 'bdk', 'bdl', 'bdm', 'bdn', 'bdo', 'bdp', 'bdq', 'bdr', 'bds', 'bdt', 'bdu', 'bdv', 'bdw', 'bdx', 'bdy', 'bdz', 'bea', 'beb', 'bec', 'bed', 'bee', 'bef', 'beg', 'beh', 'bei', 'bej', 'bek', 'bem', 'beo', 'bep', 'beq', 'ber', 'bes', 'bet', 'beu', 'bev', 'bew', 'bex', 'bey', 'bez', 'bfa', 'bfb', 'bfc', 'bfd', 'bfe', 'bff', 'bfg', 'bfh', 'bfi', 'bfj', 'bfk', 'bfl', 'bfm', 'bfn', 'bfo', 'bfp', 'bfq', 'bfr', 'bfs', 'bft', 'bfu', 'bfw', 'bfx', 'bfy', 'bfz', 'bga', 'bgb', 'bgc', 'bgd', 'bge', 'bgf', 'bgg', 'bgi', 'bgj', 'bgk', 'bgl', 'bgm', 'bgn', 'bgo', 'bgp', 'bgq', 'bgr', 'bgs', 'bgt', 'bgu', 'bgv', 'bgw', 'bgx', 'bgy', 'bgz', 'bha', 'bhb', 'bhc', 'bhd', 'bhe', 'bhf', 'bhg', 'bhh', 'bhi', 'bhj', 'bhk', 'bhl', 'bhm', 'bhn', 'bho', 'bhp', 'bhq', 'bhr', 'bhs', 'bht', 'bhu', 'bhv', 'bhw', 'bhx', 'bhy', 'bhz', 'bia', 'bib', 'bic', 'bid', 'bie', 'bif', 'big', 'bij', 'bik', 'bil', 'bim', 'bin', 'bio', 'bip', 'biq', 'bir', 'bit', 'biu', 'biv', 'biw', 'bix', 'biy', 'biz', 'bja', 'bjb', 'bjc', 'bjd', 'bje', 'bjf', 'bjg', 'bjh', 'bji', 'bjj', 'bjk', 'bjl', 'bjm', 'bjn', 'bjo', 'bjp', 'bjq', 'bjr', 'bjs', 'bjt', 'bju', 'bjv', 'bjw', 'bjx', 'bjy', 'bjz', 'bka', 'bkb', 'bkc', 'bkd', 'bkf', 'bkg', 'bkh', 'bki', 'bkj', 'bkk', 'bkl', 'bkm', 'bkn', 'bko', 'bkp', 'bkq', 'bkr', 'bks', 'bkt', 'bku', 'bkv', 'bkw', 'bkx', 'bky', 'bkz', 'bla', 'blb', 'blc', 'bld', 'ble', 'blf', 'blg', 'blh', 'bli', 'blj', 'blk', 'bll', 'blm', 'bln', 'blo', 'blp', 'blq', 'blr', 'bls', 'blt', 'blv', 'blw', 'blx', 'bly', 'blz', 'bma', 'bmb', 'bmc', 'bmd', 'bme', 'bmf', 'bmg', 'bmh', 'bmi', 'bmj', 'bmk', 'bml', 'bmm', 'bmn', 'bmo', 'bmp', 'bmq', 'bmr', 'bms', 'bmt', 'bmu', 'bmv', 'bmw', 'bmx', 'bmy', 'bmz', 'bna', 'bnb', 'bnc', 'bnd', 'bne', 'bnf', 'bng', 'bni', 'bnj', 'bnk', 'bnl', 'bnm', 'bnn', 'bno', 'bnp', 'bnq', 'bnr', 'bns', 'bnt', 'bnu', 'bnv', 'bnw', 'bnx', 'bny', 'bnz', 'boa', 'bob', 'boe', 'bof', 'bog', 'boh', 'boi', 'boj', 'bok', 'bol', 'bom', 'bon', 'boo', 'bop', 'boq', 'bor', 'bot', 'bou', 'bov', 'bow', 'box', 'boy', 'boz', 'bpa', 'bpb', 'bpd', 'bpg', 'bph', 'bpi', 'bpj', 'bpk', 'bpl', 'bpm', 'bpn', 'bpo', 'bpp', 'bpq', 'bpr', 'bps', 'bpt', 'bpu', 'bpv', 'bpw', 'bpx', 'bpy', 'bpz', 'bqa', 'bqb', 'bqc', 'bqd', 'bqf', 'bqg', 'bqh', 'bqi', 'bqj', 'bqk', 'bql', 'bqm', 'bqn', 'bqo', 'bqp', 'bqq', 'bqr', 'bqs', 'bqt', 'bqu', 'bqv', 'bqw', 'bqx', 'bqy', 'bqz', 'bra', 'brb', 'brc', 'brd', 'brf', 'brg', 'brh', 'bri', 'brj', 'brk', 'brl', 'brm', 'brn', 'bro', 'brp', 'brq', 'brr', 'brs', 'brt', 'bru', 'brv', 'brw', 'brx', 'bry', 'brz', 'bsa', 'bsb', 'bsc', 'bse', 'bsf', 'bsg', 'bsh', 'bsi', 'bsj', 'bsk', 'bsl', 'bsm', 'bsn', 'bso', 'bsp', 'bsq', 'bsr', 'bss', 'bst', 'bsu', 'bsv', 'bsw', 'bsx', 'bsy', 'bta', 'btb', 'btc', 'btd', 'bte', 'btf', 'btg', 'bth', 'bti', 'btj', 'btk', 'btl', 'btm', 'btn', 'bto', 'btp', 'btq', 'btr', 'bts', 'btt', 'btu', 'btv', 'btw', 'btx', 'bty', 'btz', 'bua', 'bub', 'buc', 'bud', 'bue', 'buf', 'bug', 'buh', 'bui', 'buj', 'buk', 'bum', 'bun', 'buo', 'bup', 'buq', 'bus', 'but', 'buu', 'buv', 'buw', 'bux', 'buy', 'buz', 'bva', 'bvb', 'bvc', 'bvd', 'bve', 'bvf', 'bvg', 'bvh', 'bvi', 'bvj', 'bvk', 'bvl', 'bvm', 'bvn', 'bvo', 'bvp', 'bvq', 'bvr', 'bvt', 'bvu', 'bvv', 'bvw', 'bvx', 'bvy', 'bvz', 'bwa', 'bwb', 'bwc', 'bwd', 'bwe', 'bwf', 'bwg', 'bwh', 'bwi', 'bwj', 'bwk', 'bwl', 'bwm', 'bwn', 'bwo', 'bwp', 'bwq', 'bwr', 'bws', 'bwt', 'bwu', 'bww', 'bwx', 'bwy', 'bwz', 'bxa', 'bxb', 'bxc', 'bxd', 'bxe', 'bxf', 'bxg', 'bxh', 'bxi', 'bxj', 'bxk', 'bxl', 'bxm', 'bxn', 'bxo', 'bxp', 'bxq', 'bxr', 'bxs', 'bxu', 'bxv', 'bxw', 'bxx', 'bxz', 'bya', 'byb', 'byc', 'byd', 'bye', 'byf', 'byg', 'byh', 'byi', 'byj', 'byk', 'byl', 'bym', 'byn', 'byo', 'byp', 'byq', 'byr', 'bys', 'byt', 'byv', 'byw', 'byx', 'byy', 'byz', 'bza', 'bzb', 'bzc', 'bzd', 'bze', 'bzf', 'bzg', 'bzh', 'bzi', 'bzj', 'bzk', 'bzl', 'bzm', 'bzn', 'bzo', 'bzp', 'bzq', 'bzr', 'bzs', 'bzt', 'bzu', 'bzv', 'bzw', 'bzx', 'bzy', 'bzz', 'caa', 'cab', 'cac', 'cad', 'cae', 'caf', 'cag', 'cah', 'cai', 'caj', 'cak', 'cal', 'cam', 'can', 'cao', 'cap', 'caq', 'car', 'cas', 'cau', 'cav', 'caw', 'cax', 'cay', 'caz', 'cba', 'cbb', 'cbc', 'cbd', 'cbe', 'cbg', 'cbh', 'cbi', 'cbj', 'cbk', 'cbl', 'cbn', 'cbo', 'cbq', 'cbr', 'cbs', 'cbt', 'cbu', 'cbv', 'cbw', 'cby', 'cca', 'ccc', 'ccd', 'cce', 'ccg', 'cch', 'ccj', 'ccl', 'ccm', 'ccn', 'cco', 'ccp', 'ccq', 'ccr', 'ccs', 'cda', 'cdc', 'cdd', 'cde', 'cdf', 'cdg', 'cdh', 'cdi', 'cdj', 'cdm', 'cdn', 'cdo', 'cdr', 'cds', 'cdy', 'cdz', 'cea', 'ceb', 'ceg', 'cek', 'cel', 'cen', 'cet', 'cfa', 'cfd', 'cfg', 'cfm', 'cga', 'cgc', 'cgg', 'cgk', 'chb', 'chc', 'chd', 'chf', 'chg', 'chh', 'chj', 'chk', 'chl', 'chm', 'chn', 'cho', 'chp', 'chq', 'chr', 'cht', 'chw', 'chx', 'chy', 'chz', 'cia', 'cib', 'cic', 'cid', 'cie', 'cih', 'cik', 'cim', 'cin', 'cip', 'cir', 'ciw', 'ciy', 'cja', 'cje', 'cjh', 'cji', 'cjk', 'cjm', 'cjn', 'cjo', 'cjp', 'cjr', 'cjs', 'cjv', 'cjy', 'cka', 'ckb', 'ckh', 'ckl', 'ckn', 'cko', 'ckq', 'ckr', 'cks', 'ckt', 'cku', 'ckv', 'ckx', 'cky', 'ckz', 'cla', 'clc', 'cld', 'cle', 'clh', 'cli', 'clj', 'clk', 'cll', 'clm', 'clo', 'clt', 'clu', 'clw', 'cly', 'cma', 'cmc', 'cme', 'cmg', 'cmi', 'cmk', 'cml', 'cmm', 'cmn', 'cmo', 'cmr', 'cms', 'cmt', 'cna', 'cnb', 'cnc', 'cng', 'cnh', 'cni', 'cnk', 'cnl', 'cno', 'cnr', 'cns', 'cnt', 'cnu', 'cnw', 'cnx', 'coa', 'cob', 'coc', 'cod', 'coe', 'cof', 'cog', 'coh', 'coj', 'cok', 'col', 'com', 'con', 'coo', 'cop', 'coq', 'cot', 'cou', 'cov', 'cow', 'cox', 'coy', 'coz', 'cpa', 'cpb', 'cpc', 'cpe', 'cpf', 'cpg', 'cpi', 'cpn', 'cpo', 'cpp', 'cps', 'cpu', 'cpx', 'cpy', 'cqd', 'cqu', 'cra', 'crb', 'crc', 'crd', 'crf', 'crg', 'crh', 'cri', 'crj', 'crk', 'crl', 'crm', 'crn', 'cro', 'crp', 'crq', 'crr', 'crs', 'crt', 'crv', 'crw', 'crx', 'cry', 'crz', 'csa', 'csb', 'csc', 'csd', 'cse', 'csf', 'csg', 'csh', 'csi', 'csj', 'csk', 'csl', 'csm', 'csn', 'cso', 'csq', 'csr', 'css', 'cst', 'csu', 'csv', 'csw', 'csy', 'csz', 'cta', 'ctc', 'ctd', 'cte', 'ctg', 'cth', 'ctl', 'ctm', 'ctn', 'cto', 'ctp', 'cts', 'ctt', 'ctu', 'ctz', 'cua', 'cub', 'cuc', 'cug', 'cuh', 'cui', 'cuj', 'cuk', 'cul', 'cum', 'cuo', 'cup', 'cuq', 'cur', 'cus', 'cut', 'cuu', 'cuv', 'cuw', 'cux', 'cuy', 'cvg', 'cvn', 'cwa', 'cwb', 'cwd', 'cwe', 'cwg', 'cwt', 'cya', 'cyb', 'cyo', 'czh', 'czk', 'czn', 'czo', 'czt', 'daa', 'dac', 'dad', 'dae', 'daf', 'dag', 'dah', 'dai', 'daj', 'dak', 'dal', 'dam', 'dao', 'dap', 'daq', 'dar', 'das', 'dau', 'dav', 'daw', 'dax', 'day', 'daz', 'dba', 'dbb', 'dbd', 'dbe', 'dbf', 'dbg', 'dbi', 'dbj', 'dbl', 'dbm', 'dbn', 'dbo', 'dbp', 'dbq', 'dbr', 'dbt', 'dbu', 'dbv', 'dbw', 'dby', 'dcc', 'dcr', 'dda', 'ddd', 'dde', 'ddg', 'ddi', 'ddj', 'ddn', 'ddo', 'ddr', 'dds', 'ddw', 'dec', 'ded', 'dee', 'def', 'deg', 'deh', 'dei', 'dek', 'del', 'dem', 'den', 'dep', 'deq', 'der', 'des', 'dev', 'dez', 'dga', 'dgb', 'dgc', 'dgd', 'dge', 'dgg', 'dgh', 'dgi', 'dgk', 'dgl', 'dgn', 'dgo', 'dgr', 'dgs', 'dgt', 'dgu', 'dgw', 'dgx', 'dgz', 'dha', 'dhd', 'dhg', 'dhi', 'dhl', 'dhm', 'dhn', 'dho', 'dhr', 'dhs', 'dhu', 'dhv', 'dhw', 'dhx', 'dia', 'dib', 'dic', 'did', 'dif', 'dig', 'dih', 'dii', 'dij', 'dik', 'dil', 'dim', 'din', 'dio', 'dip', 'diq', 'dir', 'dis', 'dit', 'diu', 'diw', 'dix', 'diy', 'diz', 'dja', 'djb', 'djc', 'djd', 'dje', 'djf', 'dji', 'djj', 'djk', 'djl', 'djm', 'djn', 'djo', 'djr', 'dju', 'djw', 'dka', 'dkk', 'dkl', 'dkr', 'dks', 'dkx', 'dlg', 'dlk', 'dlm', 'dln', 'dma', 'dmb', 'dmc', 'dmd', 'dme', 'dmg', 'dmk', 'dml', 'dmm', 'dmn', 'dmo', 'dmr', 'dms', 'dmu', 'dmv', 'dmw', 'dmx', 'dmy', 'dna', 'dnd', 'dne', 'dng', 'dni', 'dnj', 'dnk', 'dnn', 'dnr', 'dnt', 'dnu', 'dnv', 'dnw', 'dny', 'doa', 'dob', 'doc', 'doe', 'dof', 'doh', 'doi', 'dok', 'dol', 'don', 'doo', 'dop', 'doq', 'dor', 'dos', 'dot', 'dov', 'dow', 'dox', 'doy', 'doz', 'dpp', 'dra', 'drb', 'drc', 'drd', 'dre', 'drg', 'drh', 'dri', 'drl', 'drn', 'dro', 'drq', 'drr', 'drs', 'drt', 'dru', 'drw', 'dry', 'dsb', 'dse', 'dsh', 'dsi', 'dsl', 'dsn', 'dso', 'dsq', 'dta', 'dtb', 'dtd', 'dth', 'dti', 'dtk', 'dtm', 'dtn', 'dto', 'dtp', 'dtr', 'dts', 'dtt', 'dtu', 'dty', 'dua', 'dub', 'duc', 'dud', 'due', 'duf', 'dug', 'duh', 'dui', 'duj', 'duk', 'dul', 'dum', 'dun', 'duo', 'dup', 'duq', 'dur', 'dus', 'duu', 'duv', 'duw', 'dux', 'duy', 'duz', 'dva', 'dwa', 'dwl', 'dwr', 'dws', 'dwu', 'dww', 'dwy', 'dya', 'dyb', 'dyd', 'dyg', 'dyi', 'dym', 'dyn', 'dyo', 'dyu', 'dyy', 'dza', 'dzd', 'dze', 'dzg', 'dzl', 'dzn', 'eaa', 'ebg', 'ebk', 'ebo', 'ebr', 'ebu', 'ecr', 'ecs', 'ecy', 'eee', 'efa', 'efe', 'efi', 'ega', 'egl', 'ego', 'egx', 'egy', 'ehu', 'eip', 'eit', 'eiv', 'eja', 'eka', 'ekc', 'eke', 'ekg', 'eki', 'ekk', 'ekl', 'ekm', 'eko', 'ekp', 'ekr', 'eky', 'ele', 'elh', 'eli', 'elk', 'elm', 'elo', 'elp', 'elu', 'elx', 'ema', 'emb', 'eme', 'emg', 'emi', 'emk', 'emm', 'emn', 'emo', 'emp', 'ems', 'emu', 'emw', 'emx', 'emy', 'ena', 'enb', 'enc', 'end', 'enf', 'enh', 'enl', 'enm', 'enn', 'eno', 'enq', 'enr', 'enu', 'env', 'enw', 'enx', 'eot', 'epi', 'era', 'erg', 'erh', 'eri', 'erk', 'ero', 'err', 'ers', 'ert', 'erw', 'ese', 'esg', 'esh', 'esi', 'esk', 'esl', 'esm', 'esn', 'eso', 'esq', 'ess', 'esu', 'esx', 'esy', 'etb', 'etc', 'eth', 'etn', 'eto', 'etr', 'ets', 'ett', 'etu', 'etx', 'etz', 'euq', 'eve', 'evh', 'evn', 'ewo', 'ext', 'eya', 'eyo', 'eza', 'eze', 'faa', 'fab', 'fad', 'faf', 'fag', 'fah', 'fai', 'faj', 'fak', 'fal', 'fam', 'fan', 'fap', 'far', 'fat', 'fau', 'fax', 'fay', 'faz', 'fbl', 'fcs', 'fer', 'ffi', 'ffm', 'fgr', 'fia', 'fie', 'fil', 'fip', 'fir', 'fit', 'fiu', 'fiw', 'fkk', 'fkv', 'fla', 'flh', 'fli', 'fll', 'fln', 'flr', 'fly', 'fmp', 'fmu', 'fnb', 'fng', 'fni', 'fod', 'foi', 'fom', 'fon', 'for', 'fos', 'fox', 'fpe', 'fqs', 'frc', 'frd', 'frk', 'frm', 'fro', 'frp', 'frq', 'frr', 'frs', 'frt', 'fse', 'fsl', 'fss', 'fub', 'fuc', 'fud', 'fue', 'fuf', 'fuh', 'fui', 'fuj', 'fum', 'fun', 'fuq', 'fur', 'fut', 'fuu', 'fuv', 'fuy', 'fvr', 'fwa', 'fwe', 'gaa', 'gab', 'gac', 'gad', 'gae', 'gaf', 'gag', 'gah', 'gai', 'gaj', 'gak', 'gal', 'gam', 'gan', 'gao', 'gap', 'gaq', 'gar', 'gas', 'gat', 'gau', 'gav', 'gaw', 'gax', 'gay', 'gaz', 'gba', 'gbb', 'gbc', 'gbd', 'gbe', 'gbf', 'gbg', 'gbh', 'gbi', 'gbj', 'gbk', 'gbl', 'gbm', 'gbn', 'gbo', 'gbp', 'gbq', 'gbr', 'gbs', 'gbu', 'gbv', 'gbw', 'gbx', 'gby', 'gbz', 'gcc', 'gcd', 'gce', 'gcf', 'gcl', 'gcn', 'gcr', 'gct', 'gda', 'gdb', 'gdc', 'gdd', 'gde', 'gdf', 'gdg', 'gdh', 'gdi', 'gdj', 'gdk', 'gdl', 'gdm', 'gdn', 'gdo', 'gdq', 'gdr', 'gds', 'gdt', 'gdu', 'gdx', 'gea', 'geb', 'gec', 'ged', 'geg', 'geh', 'gei', 'gej', 'gek', 'gel', 'gem', 'geq', 'ges', 'gev', 'gew', 'gex', 'gey', 'gez', 'gfk', 'gft', 'gfx', 'gga', 'ggb', 'ggd', 'gge', 'ggg', 'ggk', 'ggl', 'ggn', 'ggo', 'ggr', 'ggt', 'ggu', 'ggw', 'gha', 'ghc', 'ghe', 'ghh', 'ghk', 'ghl', 'ghn', 'gho', 'ghr', 'ghs', 'ght', 'gia', 'gib', 'gic', 'gid', 'gie', 'gig', 'gih', 'gil', 'gim', 'gin', 'gio', 'gip', 'giq', 'gir', 'gis', 'git', 'giu', 'giw', 'gix', 'giy', 'giz', 'gji', 'gjk', 'gjm', 'gjn', 'gjr', 'gju', 'gka', 'gkd', 'gke', 'gkn', 'gko', 'gkp', 'gku', 'glc', 'gld', 'glh', 'gli', 'glj', 'glk', 'gll', 'glo', 'glr', 'glu', 'glw', 'gly', 'gma', 'gmb', 'gmd', 'gme', 'gmg', 'gmh', 'gml', 'gmm', 'gmn', 'gmq', 'gmu', 'gmv', 'gmw', 'gmx', 'gmy', 'gmz', 'gna', 'gnb', 'gnc', 'gnd', 'gne', 'gng', 'gnh', 'gni', 'gnj', 'gnk', 'gnl', 'gnm', 'gnn', 'gno', 'gnq', 'gnr', 'gnt', 'gnu', 'gnw', 'gnz', 'goa', 'gob', 'goc', 'god', 'goe', 'gof', 'gog', 'goh', 'goi', 'goj', 'gok', 'gol', 'gom', 'gon', 'goo', 'gop', 'goq', 'gor', 'gos', 'got', 'gou', 'gow', 'gox', 'goy', 'goz', 'gpa', 'gpe', 'gpn', 'gqa', 'gqi', 'gqn', 'gqr', 'gqu', 'gra', 'grb', 'grc', 'grd', 'grg', 'grh', 'gri', 'grj', 'grk', 'grm', 'gro', 'grq', 'grr', 'grs', 'grt', 'gru', 'grv', 'grw', 'grx', 'gry', 'grz', 'gse', 'gsg', 'gsl', 'gsm', 'gsn', 'gso', 'gsp', 'gss', 'gsw', 'gta', 'gti', 'gtu', 'gua', 'gub', 'guc', 'gud', 'gue', 'guf', 'gug', 'guh', 'gui', 'guk', 'gul', 'gum', 'gun', 'guo', 'gup', 'guq', 'gur', 'gus', 'gut', 'guu', 'guv', 'guw', 'gux', 'guz', 'gva', 'gvc', 'gve', 'gvf', 'gvj', 'gvl', 'gvm', 'gvn', 'gvo', 'gvp', 'gvr', 'gvs', 'gvy', 'gwa', 'gwb', 'gwc', 'gwd', 'gwe', 'gwf', 'gwg', 'gwi', 'gwj', 'gwm', 'gwn', 'gwr', 'gwt', 'gwu', 'gww', 'gwx', 'gxx', 'gya', 'gyb', 'gyd', 'gye', 'gyf', 'gyg', 'gyi', 'gyl', 'gym', 'gyn', 'gyo', 'gyr', 'gyy', 'gza', 'gzi', 'gzn', 'haa', 'hab', 'hac', 'had', 'hae', 'haf', 'hag', 'hah', 'hai', 'haj', 'hak', 'hal', 'ham', 'han', 'hao', 'hap', 'haq', 'har', 'has', 'hav', 'haw', 'hax', 'hay', 'haz', 'hba', 'hbb', 'hbn', 'hbo', 'hbu', 'hca', 'hch', 'hdn', 'hds', 'hdy', 'hea', 'hed', 'heg', 'heh', 'hei', 'hem', 'hgm', 'hgw', 'hhi', 'hhr', 'hhy', 'hia', 'hib', 'hid', 'hif', 'hig', 'hih', 'hii', 'hij', 'hik', 'hil', 'him', 'hio', 'hir', 'hit', 'hiw', 'hix', 'hji', 'hka', 'hke', 'hkk', 'hkn', 'hks', 'hla', 'hlb', 'hld', 'hle', 'hlt', 'hlu', 'hma', 'hmb', 'hmc', 'hmd', 'hme', 'hmf', 'hmg', 'hmh', 'hmi', 'hmj', 'hmk', 'hml', 'hmm', 'hmn', 'hmp', 'hmq', 'hmr', 'hms', 'hmt', 'hmu', 'hmv', 'hmw', 'hmx', 'hmy', 'hmz', 'hna', 'hnd', 'hne', 'hnh', 'hni', 'hnj', 'hnn', 'hno', 'hns', 'hnu', 'hoa', 'hob', 'hoc', 'hod', 'hoe', 'hoh', 'hoi', 'hoj', 'hok', 'hol', 'hom', 'hoo', 'hop', 'hor', 'hos', 'hot', 'hov', 'how', 'hoy', 'hoz', 'hpo', 'hps', 'hra', 'hrc', 'hre', 'hrk', 'hrm', 'hro', 'hrp', 'hrr', 'hrt', 'hru', 'hrw', 'hrx', 'hrz', 'hsb', 'hsh', 'hsl', 'hsn', 'hss', 'hti', 'hto', 'hts', 'htu', 'htx', 'hub', 'huc', 'hud', 'hue', 'huf', 'hug', 'huh', 'hui', 'huj', 'huk', 'hul', 'hum', 'huo', 'hup', 'huq', 'hur', 'hus', 'hut', 'huu', 'huv', 'huw', 'hux', 'huy', 'huz', 'hvc', 'hve', 'hvk', 'hvn', 'hvv', 'hwa', 'hwc', 'hwo', 'hya', 'hyw', 'hyx', 'iai', 'ian', 'iap', 'iar', 'iba', 'ibb', 'ibd', 'ibe', 'ibg', 'ibh', 'ibi', 'ibl', 'ibm', 'ibn', 'ibr', 'ibu', 'iby', 'ica', 'ich', 'icl', 'icr', 'ida', 'idb', 'idc', 'idd', 'ide', 'idi', 'idr', 'ids', 'idt', 'idu', 'ifa', 'ifb', 'ife', 'iff', 'ifk', 'ifm', 'ifu', 'ify', 'igb', 'ige', 'igg', 'igl', 'igm', 'ign', 'igo', 'igs', 'igw', 'ihb', 'ihi', 'ihp', 'ihw', 'iin', 'iir', 'ijc', 'ije', 'ijj', 'ijn', 'ijo', 'ijs', 'ike', 'iki', 'ikk', 'ikl', 'iko', 'ikp', 'ikr', 'iks', 'ikt', 'ikv', 'ikw', 'ikx', 'ikz', 'ila', 'ilb', 'ilg', 'ili', 'ilk', 'ill', 'ilm', 'ilo', 'ilp', 'ils', 'ilu', 'ilv', 'ilw', 'ima', 'ime', 'imi', 'iml', 'imn', 'imo', 'imr', 'ims', 'imy', 'inb', 'inc', 'ine', 'ing', 'inh', 'inj', 'inl', 'inm', 'inn', 'ino', 'inp', 'ins', 'int', 'inz', 'ior', 'iou', 'iow', 'ipi', 'ipo', 'iqu', 'iqw', 'ira', 'ire', 'irh', 'iri', 'irk', 'irn', 'iro', 'irr', 'iru', 'irx', 'iry', 'isa', 'isc', 'isd', 'ise', 'isg', 'ish', 'isi', 'isk', 'ism', 'isn', 'iso', 'isr', 'ist', 'isu', 'itb', 'itc', 'itd', 'ite', 'iti', 'itk', 'itl', 'itm', 'ito', 'itr', 'its', 'itt', 'itv', 'itw', 'itx', 'ity', 'itz', 'ium', 'ivb', 'ivv', 'iwk', 'iwm', 'iwo', 'iws', 'ixc', 'ixl', 'iya', 'iyo', 'iyx', 'izh', 'izi', 'izr', 'izz', 'jaa', 'jab', 'jac', 'jad', 'jae', 'jaf', 'jah', 'jaj', 'jak', 'jal', 'jam', 'jan', 'jao', 'jaq', 'jar', 'jas', 'jat', 'jau', 'jax', 'jay', 'jaz', 'jbe', 'jbi', 'jbj', 'jbk', 'jbn', 'jbo', 'jbr', 'jbt', 'jbu', 'jbw', 'jcs', 'jct', 'jda', 'jdg', 'jdt', 'jeb', 'jee', 'jeg', 'jeh', 'jei', 'jek', 'jel', 'jen', 'jer', 'jet', 'jeu', 'jgb', 'jge', 'jgk', 'jgo', 'jhi', 'jhs', 'jia', 'jib', 'jic', 'jid', 'jie', 'jig', 'jih', 'jii', 'jil', 'jim', 'jio', 'jiq', 'jit', 'jiu', 'jiv', 'jiy', 'jje', 'jjr', 'jka', 'jkm', 'jko', 'jkp', 'jkr', 'jku', 'jle', 'jls', 'jma', 'jmb', 'jmc', 'jmd', 'jmi', 'jml', 'jmn', 'jmr', 'jms', 'jmw', 'jmx', 'jna', 'jnd', 'jng', 'jni', 'jnj', 'jnl', 'jns', 'job', 'jod', 'jog', 'jor', 'jos', 'jow', 'jpa', 'jpr', 'jpx', 'jqr', 'jra', 'jrb', 'jrr', 'jrt', 'jru', 'jsl', 'jua', 'jub', 'juc', 'jud', 'juh', 'jui', 'juk', 'jul', 'jum', 'jun', 'juo', 'jup', 'jur', 'jus', 'jut', 'juu', 'juw', 'juy', 'jvd', 'jvn', 'jwi', 'jya', 'jye', 'jyy', 'kaa', 'kab', 'kac', 'kad', 'kae', 'kaf', 'kag', 'kah', 'kai', 'kaj', 'kak', 'kam', 'kao', 'kap', 'kaq', 'kar', 'kav', 'kaw', 'kax', 'kay', 'kba', 'kbb', 'kbc', 'kbd', 'kbe', 'kbf', 'kbg', 'kbh', 'kbi', 'kbj', 'kbk', 'kbl', 'kbm', 'kbn', 'kbo', 'kbp', 'kbq', 'kbr', 'kbs', 'kbt', 'kbu', 'kbv', 'kbw', 'kbx', 'kby', 'kbz', 'kca', 'kcb', 'kcc', 'kcd', 'kce', 'kcf', 'kcg', 'kch', 'kci', 'kcj', 'kck', 'kcl', 'kcm', 'kcn', 'kco', 'kcp', 'kcq', 'kcr', 'kcs', 'kct', 'kcu', 'kcv', 'kcw', 'kcx', 'kcy', 'kcz', 'kda', 'kdc', 'kdd', 'kde', 'kdf', 'kdg', 'kdh', 'kdi', 'kdj', 'kdk', 'kdl', 'kdm', 'kdn', 'kdo', 'kdp', 'kdq', 'kdr', 'kdt', 'kdu', 'kdv', 'kdw', 'kdx', 'kdy', 'kdz', 'kea', 'keb', 'kec', 'ked', 'kee', 'kef', 'keg', 'keh', 'kei', 'kej', 'kek', 'kel', 'kem', 'ken', 'keo', 'kep', 'keq', 'ker', 'kes', 'ket', 'keu', 'kev', 'kew', 'kex', 'key', 'kez', 'kfa', 'kfb', 'kfc', 'kfd', 'kfe', 'kff', 'kfg', 'kfh', 'kfi', 'kfj', 'kfk', 'kfl', 'kfm', 'kfn', 'kfo', 'kfp', 'kfq', 'kfr', 'kfs', 'kft', 'kfu', 'kfv', 'kfw', 'kfx', 'kfy', 'kfz', 'kga', 'kgb', 'kgc', 'kgd', 'kge', 'kgf', 'kgg', 'kgh', 'kgi', 'kgj', 'kgk', 'kgl', 'kgm', 'kgn', 'kgo', 'kgp', 'kgq', 'kgr', 'kgs', 'kgt', 'kgu', 'kgv', 'kgw', 'kgx', 'kgy', 'kha', 'khb', 'khc', 'khd', 'khe', 'khf', 'khg', 'khh', 'khi', 'khj', 'khk', 'khl', 'khn', 'kho', 'khp', 'khq', 'khr', 'khs', 'kht', 'khu', 'khv', 'khw', 'khx', 'khy', 'khz', 'kia', 'kib', 'kic', 'kid', 'kie', 'kif', 'kig', 'kih', 'kii', 'kij', 'kil', 'kim', 'kio', 'kip', 'kiq', 'kis', 'kit', 'kiu', 'kiv', 'kiw', 'kix', 'kiy', 'kiz', 'kja', 'kjb', 'kjc', 'kjd', 'kje', 'kjf', 'kjg', 'kjh', 'kji', 'kjj', 'kjk', 'kjl', 'kjm', 'kjn', 'kjo', 'kjp', 'kjq', 'kjr', 'kjs', 'kjt', 'kju', 'kjv', 'kjx', 'kjy', 'kjz', 'kka', 'kkb', 'kkc', 'kkd', 'kke', 'kkf', 'kkg', 'kkh', 'kki', 'kkj', 'kkk', 'kkl', 'kkm', 'kkn', 'kko', 'kkp', 'kkq', 'kkr', 'kks', 'kkt', 'kku', 'kkv', 'kkw', 'kkx', 'kky', 'kkz', 'kla', 'klb', 'klc', 'kld', 'kle', 'klf', 'klg', 'klh', 'kli', 'klj', 'klk', 'kll', 'klm', 'kln', 'klo', 'klp', 'klq', 'klr', 'kls', 'klt', 'klu', 'klv', 'klw', 'klx', 'kly', 'klz', 'kma', 'kmb', 'kmc', 'kmd', 'kme', 'kmf', 'kmg', 'kmh', 'kmi', 'kmj', 'kmk', 'kml', 'kmm', 'kmn', 'kmo', 'kmp', 'kmq', 'kmr', 'kms', 'kmt', 'kmu', 'kmv', 'kmw', 'kmx', 'kmy', 'kmz', 'kna', 'knb', 'knc', 'knd', 'kne', 'knf', 'kng', 'kni', 'knj', 'knk', 'knl', 'knm', 'knn', 'kno', 'knp', 'knq', 'knr', 'kns', 'knt', 'knu', 'knv', 'knw', 'knx', 'kny', 'knz', 'koa', 'koc', 'kod', 'koe', 'kof', 'kog', 'koh', 'koi', 'koj', 'kok', 'kol', 'koo', 'kop', 'koq', 'kos', 'kot', 'kou', 'kov', 'kow', 'kox', 'koy', 'koz', 'kpa', 'kpb', 'kpc', 'kpd', 'kpe', 'kpf', 'kpg', 'kph', 'kpi', 'kpj', 'kpk', 'kpl', 'kpm', 'kpn', 'kpo', 'kpp', 'kpq', 'kpr', 'kps', 'kpt', 'kpu', 'kpv', 'kpw', 'kpx', 'kpy', 'kpz', 'kqa', 'kqb', 'kqc', 'kqd', 'kqe', 'kqf', 'kqg', 'kqh', 'kqi', 'kqj', 'kqk', 'kql', 'kqm', 'kqn', 'kqo', 'kqp', 'kqq', 'kqr', 'kqs', 'kqt', 'kqu', 'kqv', 'kqw', 'kqx', 'kqy', 'kqz', 'kra', 'krb', 'krc', 'krd', 'kre', 'krf', 'krh', 'kri', 'krj', 'krk', 'krl', 'krm', 'krn', 'kro', 'krp', 'krr', 'krs', 'krt', 'kru', 'krv', 'krw', 'krx', 'kry', 'krz', 'ksa', 'ksb', 'ksc', 'ksd', 'kse', 'ksf', 'ksg', 'ksh', 'ksi', 'ksj', 'ksk', 'ksl', 'ksm', 'ksn', 'kso', 'ksp', 'ksq', 'ksr', 'kss', 'kst', 'ksu', 'ksv', 'ksw', 'ksx', 'ksy', 'ksz', 'kta', 'ktb', 'ktc', 'ktd', 'kte', 'ktf', 'ktg', 'kth', 'kti', 'ktj', 'ktk', 'ktl', 'ktm', 'ktn', 'kto', 'ktp', 'ktq', 'ktr', 'kts', 'ktt', 'ktu', 'ktv', 'ktw', 'ktx', 'kty', 'ktz', 'kub', 'kuc', 'kud', 'kue', 'kuf', 'kug', 'kuh', 'kui', 'kuj', 'kuk', 'kul', 'kum', 'kun', 'kuo', 'kup', 'kuq', 'kus', 'kut', 'kuu', 'kuv', 'kuw', 'kux', 'kuy', 'kuz', 'kva', 'kvb', 'kvc', 'kvd', 'kve', 'kvf', 'kvg', 'kvh', 'kvi', 'kvj', 'kvk', 'kvl', 'kvm', 'kvn', 'kvo', 'kvp', 'kvq', 'kvr', 'kvs', 'kvt', 'kvu', 'kvv', 'kvw', 'kvx', 'kvy', 'kvz', 'kwa', 'kwb', 'kwc', 'kwd', 'kwe', 'kwf', 'kwg', 'kwh', 'kwi', 'kwj', 'kwk', 'kwl', 'kwm', 'kwn', 'kwo', 'kwp', 'kwq', 'kwr', 'kws', 'kwt', 'kwu', 'kwv', 'kww', 'kwx', 'kwy', 'kwz', 'kxa', 'kxb', 'kxc', 'kxd', 'kxe', 'kxf', 'kxh', 'kxi', 'kxj', 'kxk', 'kxl', 'kxm', 'kxn', 'kxo', 'kxp', 'kxq', 'kxr', 'kxs', 'kxt', 'kxu', 'kxv', 'kxw', 'kxx', 'kxy', 'kxz', 'kya', 'kyb', 'kyc', 'kyd', 'kye', 'kyf', 'kyg', 'kyh', 'kyi', 'kyj', 'kyk', 'kyl', 'kym', 'kyn', 'kyo', 'kyp', 'kyq', 'kyr', 'kys', 'kyt', 'kyu', 'kyv', 'kyw', 'kyx', 'kyy', 'kyz', 'kza', 'kzb', 'kzc', 'kzd', 'kze', 'kzf', 'kzg', 'kzh', 'kzi', 'kzj', 'kzk', 'kzl', 'kzm', 'kzn', 'kzo', 'kzp', 'kzq', 'kzr', 'kzs', 'kzt', 'kzu', 'kzv', 'kzw', 'kzx', 'kzy', 'kzz', 'laa', 'lab', 'lac', 'lad', 'lae', 'laf', 'lag', 'lah', 'lai', 'laj', 'lak', 'lal', 'lam', 'lan', 'lap', 'laq', 'lar', 'las', 'lau', 'law', 'lax', 'lay', 'laz', 'lba', 'lbb', 'lbc', 'lbe', 'lbf', 'lbg', 'lbi', 'lbj', 'lbk', 'lbl', 'lbm', 'lbn', 'lbo', 'lbq', 'lbr', 'lbs', 'lbt', 'lbu', 'lbv', 'lbw', 'lbx', 'lby', 'lbz', 'lcc', 'lcd', 'lce', 'lcf', 'lch', 'lcl', 'lcm', 'lcp', 'lcq', 'lcs', 'lda', 'ldb', 'ldd', 'ldg', 'ldh', 'ldi', 'ldj', 'ldk', 'ldl', 'ldm', 'ldn', 'ldo', 'ldp', 'ldq', 'lea', 'leb', 'lec', 'led', 'lee', 'lef', 'leg', 'leh', 'lei', 'lej', 'lek', 'lel', 'lem', 'len', 'leo', 'lep', 'leq', 'ler', 'les', 'let', 'leu', 'lev', 'lew', 'lex', 'ley', 'lez', 'lfa', 'lfn', 'lga', 'lgb', 'lgg', 'lgh', 'lgi', 'lgk', 'lgl', 'lgm', 'lgn', 'lgq', 'lgr', 'lgt', 'lgu', 'lgz', 'lha', 'lhh', 'lhi', 'lhl', 'lhm', 'lhn', 'lhp', 'lhs', 'lht', 'lhu', 'lia', 'lib', 'lic', 'lid', 'lie', 'lif', 'lig', 'lih', 'lii', 'lij', 'lik', 'lil', 'lio', 'lip', 'liq', 'lir', 'lis', 'liu', 'liv', 'liw', 'lix', 'liy', 'liz', 'lja', 'lje', 'lji', 'ljl', 'ljp', 'ljw', 'ljx', 'lka', 'lkb', 'lkc', 'lkd', 'lke', 'lkh', 'lki', 'lkj', 'lkl', 'lkm', 'lkn', 'lko', 'lkr', 'lks', 'lkt', 'lku', 'lky', 'lla', 'llb', 'llc', 'lld', 'lle', 'llf', 'llg', 'llh', 'lli', 'llj', 'llk', 'lll', 'llm', 'lln', 'llo', 'llp', 'llq', 'lls', 'llu', 'llx', 'lma', 'lmb', 'lmc', 'lmd', 'lme', 'lmf', 'lmg', 'lmh', 'lmi', 'lmj', 'lmk', 'lml', 'lmm', 'lmn', 'lmo', 'lmp', 'lmq', 'lmr', 'lmu', 'lmv', 'lmw', 'lmx', 'lmy', 'lmz', 'lna', 'lnb', 'lnd', 'lng', 'lnh', 'lni', 'lnj', 'lnl', 'lnm', 'lnn', 'lno', 'lns', 'lnu', 'lnw', 'lnz', 'loa', 'lob', 'loc', 'loe', 'lof', 'log', 'loh', 'loi', 'loj', 'lok', 'lol', 'lom', 'lon', 'loo', 'lop', 'loq', 'lor', 'los', 'lot', 'lou', 'lov', 'low', 'lox', 'loy', 'loz', 'lpa', 'lpe', 'lpn', 'lpo', 'lpx', 'lra', 'lrc', 'lre', 'lrg', 'lri', 'lrk', 'lrl', 'lrm', 'lrn', 'lro', 'lrr', 'lrt', 'lrv', 'lrz', 'lsa', 'lsd', 'lse', 'lsg', 'lsh', 'lsi', 'lsl', 'lsm', 'lso', 'lsp', 'lsr', 'lss', 'lst', 'lsy', 'ltc', 'ltg', 'lth', 'lti', 'ltn', 'lto', 'lts', 'ltu', 'lua', 'luc', 'lud', 'lue', 'luf', 'lui', 'luj', 'luk', 'lul', 'lum', 'lun', 'luo', 'lup', 'luq', 'lur', 'lus', 'lut', 'luu', 'luv', 'luw', 'luy', 'luz', 'lva', 'lvk', 'lvs', 'lvu', 'lwa', 'lwe', 'lwg', 'lwh', 'lwl', 'lwm', 'lwo', 'lws', 'lwt', 'lwu', 'lww', 'lya', 'lyg', 'lyn', 'lzh', 'lzl', 'lzn', 'lzz', 'maa', 'mab', 'mad', 'mae', 'maf', 'mag', 'mai', 'maj', 'mak', 'mam', 'man', 'map', 'maq', 'mas', 'mat', 'mau', 'mav', 'maw', 'max', 'maz', 'mba', 'mbb', 'mbc', 'mbd', 'mbe', 'mbf', 'mbh', 'mbi', 'mbj', 'mbk', 'mbl', 'mbm', 'mbn', 'mbo', 'mbp', 'mbq', 'mbr', 'mbs', 'mbt', 'mbu', 'mbv', 'mbw', 'mbx', 'mby', 'mbz', 'mca', 'mcb', 'mcc', 'mcd', 'mce', 'mcf', 'mcg', 'mch', 'mci', 'mcj', 'mck', 'mcl', 'mcm', 'mcn', 'mco', 'mcp', 'mcq', 'mcr', 'mcs', 'mct', 'mcu', 'mcv', 'mcw', 'mcx', 'mcy', 'mcz', 'mda', 'mdb', 'mdc', 'mdd', 'mde', 'mdf', 'mdg', 'mdh', 'mdi', 'mdj', 'mdk', 'mdl', 'mdm', 'mdn', 'mdp', 'mdq', 'mdr', 'mds', 'mdt', 'mdu', 'mdv', 'mdw', 'mdx', 'mdy', 'mdz', 'mea', 'meb', 'mec', 'med', 'mee', 'mef', 'meg', 'meh', 'mei', 'mej', 'mek', 'mel', 'mem', 'men', 'meo', 'mep', 'meq', 'mer', 'mes', 'met', 'meu', 'mev', 'mew', 'mey', 'mez', 'mfa', 'mfb', 'mfc', 'mfd', 'mfe', 'mff', 'mfg', 'mfh', 'mfi', 'mfj', 'mfk', 'mfl', 'mfm', 'mfn', 'mfo', 'mfp', 'mfq', 'mfr', 'mfs', 'mft', 'mfu', 'mfv', 'mfw', 'mfx', 'mfy', 'mfz', 'mga', 'mgb', 'mgc', 'mgd', 'mge', 'mgf', 'mgg', 'mgh', 'mgi', 'mgj', 'mgk', 'mgl', 'mgm', 'mgn', 'mgo', 'mgp', 'mgq', 'mgr', 'mgs', 'mgt', 'mgu', 'mgv', 'mgw', 'mgx', 'mgy', 'mgz', 'mha', 'mhb', 'mhc', 'mhd', 'mhe', 'mhf', 'mhg', 'mhh', 'mhi', 'mhj', 'mhk', 'mhl', 'mhm', 'mhn', 'mho', 'mhp', 'mhq', 'mhr', 'mhs', 'mht', 'mhu', 'mhw', 'mhx', 'mhy', 'mhz', 'mia', 'mib', 'mic', 'mid', 'mie', 'mif', 'mig', 'mih', 'mii', 'mij', 'mik', 'mil', 'mim', 'min', 'mio', 'mip', 'miq', 'mir', 'mis', 'mit', 'miu', 'miw', 'mix', 'miy', 'miz', 'mja', 'mjb', 'mjc', 'mjd', 'mje', 'mjg', 'mjh', 'mji', 'mjj', 'mjk', 'mjl', 'mjm', 'mjn', 'mjo', 'mjp', 'mjq', 'mjr', 'mjs', 'mjt', 'mju', 'mjv', 'mjw', 'mjx', 'mjy', 'mjz', 'mka', 'mkb', 'mkc', 'mke', 'mkf', 'mkg', 'mkh', 'mki', 'mkj', 'mkk', 'mkl', 'mkm', 'mkn', 'mko', 'mkp', 'mkq', 'mkr', 'mks', 'mkt', 'mku', 'mkv', 'mkw', 'mkx', 'mky', 'mkz', 'mla', 'mlb', 'mlc', 'mld', 'mle', 'mlf', 'mlh', 'mli', 'mlj', 'mlk', 'mll', 'mlm', 'mln', 'mlo', 'mlp', 'mlq', 'mlr', 'mls', 'mlu', 'mlv', 'mlw', 'mlx', 'mlz', 'mma', 'mmb', 'mmc', 'mmd', 'mme', 'mmf', 'mmg', 'mmh', 'mmi', 'mmj', 'mmk', 'mml', 'mmm', 'mmn', 'mmo', 'mmp', 'mmq', 'mmr', 'mmt', 'mmu', 'mmv', 'mmw', 'mmx', 'mmy', 'mmz', 'mna', 'mnb', 'mnc', 'mnd', 'mne', 'mnf', 'mng', 'mnh', 'mni', 'mnj', 'mnk', 'mnl', 'mnm', 'mnn', 'mno', 'mnp', 'mnq', 'mnr', 'mns', 'mnt', 'mnu', 'mnv', 'mnw', 'mnx', 'mny', 'mnz', 'moa', 'moc', 'mod', 'moe', 'mof', 'mog', 'moh', 'moi', 'moj', 'mok', 'mom', 'moo', 'mop', 'moq', 'mor', 'mos', 'mot', 'mou', 'mov', 'mow', 'mox', 'moy', 'moz', 'mpa', 'mpb', 'mpc', 'mpd', 'mpe', 'mpg', 'mph', 'mpi', 'mpj', 'mpk', 'mpl', 'mpm', 'mpn', 'mpo', 'mpp', 'mpq', 'mpr', 'mps', 'mpt', 'mpu', 'mpv', 'mpw', 'mpx', 'mpy', 'mpz', 'mqa', 'mqb', 'mqc', 'mqe', 'mqf', 'mqg', 'mqh', 'mqi', 'mqj', 'mqk', 'mql', 'mqm', 'mqn', 'mqo', 'mqp', 'mqq', 'mqr', 'mqs', 'mqt', 'mqu', 'mqv', 'mqw', 'mqx', 'mqy', 'mqz', 'mra', 'mrb', 'mrc', 'mrd', 'mre', 'mrf', 'mrg', 'mrh', 'mrj', 'mrk', 'mrl', 'mrm', 'mrn', 'mro', 'mrp', 'mrq', 'mrr', 'mrs', 'mrt', 'mru', 'mrv', 'mrw', 'mrx', 'mry', 'mrz', 'msb', 'msc', 'msd', 'mse', 'msf', 'msg', 'msh', 'msi', 'msj', 'msk', 'msl', 'msm', 'msn', 'mso', 'msp', 'msq', 'msr', 'mss', 'mst', 'msu', 'msv', 'msw', 'msx', 'msy', 'msz', 'mta', 'mtb', 'mtc', 'mtd', 'mte', 'mtf', 'mtg', 'mth', 'mti', 'mtj', 'mtk', 'mtl', 'mtm', 'mtn', 'mto', 'mtp', 'mtq', 'mtr', 'mts', 'mtt', 'mtu', 'mtv', 'mtw', 'mtx', 'mty', 'mua', 'mub', 'muc', 'mud', 'mue', 'mug', 'muh', 'mui', 'muj', 'muk', 'mul', 'mum', 'mun', 'muo', 'mup', 'muq', 'mur', 'mus', 'mut', 'muu', 'muv', 'mux', 'muy', 'muz', 'mva', 'mvb', 'mvd', 'mve', 'mvf', 'mvg', 'mvh', 'mvi', 'mvk', 'mvl', 'mvm', 'mvn', 'mvo', 'mvp', 'mvq', 'mvr', 'mvs', 'mvt', 'mvu', 'mvv', 'mvw', 'mvx', 'mvy', 'mvz', 'mwa', 'mwb', 'mwc', 'mwd', 'mwe', 'mwf', 'mwg', 'mwh', 'mwi', 'mwj', 'mwk', 'mwl', 'mwm', 'mwn', 'mwo', 'mwp', 'mwq', 'mwr', 'mws', 'mwt', 'mwu', 'mwv', 'mww', 'mwx', 'mwy', 'mwz', 'mxa', 'mxb', 'mxc', 'mxd', 'mxe', 'mxf', 'mxg', 'mxh', 'mxi', 'mxj', 'mxk', 'mxl', 'mxm', 'mxn', 'mxo', 'mxp', 'mxq', 'mxr', 'mxs', 'mxt', 'mxu', 'mxv', 'mxw', 'mxx', 'mxy', 'mxz', 'myb', 'myc', 'myd', 'mye', 'myf', 'myg', 'myh', 'myi', 'myj', 'myk', 'myl', 'mym', 'myn', 'myo', 'myp', 'myq', 'myr', 'mys', 'myt', 'myu', 'myv', 'myw', 'myx', 'myy', 'myz', 'mza', 'mzb', 'mzc', 'mzd', 'mze', 'mzg', 'mzh', 'mzi', 'mzj', 'mzk', 'mzl', 'mzm', 'mzn', 'mzo', 'mzp', 'mzq', 'mzr', 'mzs', 'mzt', 'mzu', 'mzv', 'mzw', 'mzx', 'mzy', 'mzz', 'naa', 'nab', 'nac', 'nad', 'nae', 'naf', 'nag', 'nah', 'nai', 'naj', 'nak', 'nal', 'nam', 'nan', 'nao', 'nap', 'naq', 'nar', 'nas', 'nat', 'naw', 'nax', 'nay', 'naz', 'nba', 'nbb', 'nbc', 'nbd', 'nbe', 'nbf', 'nbg', 'nbh', 'nbi', 'nbj', 'nbk', 'nbm', 'nbn', 'nbo', 'nbp', 'nbq', 'nbr', 'nbs', 'nbt', 'nbu', 'nbv', 'nbw', 'nbx', 'nby', 'nca', 'ncb', 'ncc', 'ncd', 'nce', 'ncf', 'ncg', 'nch', 'nci', 'ncj', 'nck', 'ncl', 'ncm', 'ncn', 'nco', 'ncp', 'ncq', 'ncr', 'ncs', 'nct', 'ncu', 'ncx', 'ncz', 'nda', 'ndb', 'ndc', 'ndd', 'ndf', 'ndg', 'ndh', 'ndi', 'ndj', 'ndk', 'ndl', 'ndm', 'ndn', 'ndp', 'ndq', 'ndr', 'nds', 'ndt', 'ndu', 'ndv', 'ndw', 'ndx', 'ndy', 'ndz', 'nea', 'neb', 'nec', 'ned', 'nee', 'nef', 'neg', 'neh', 'nei', 'nej', 'nek', 'nem', 'nen', 'neo', 'neq', 'ner', 'nes', 'net', 'neu', 'nev', 'new', 'nex', 'ney', 'nez', 'nfa', 'nfd', 'nfl', 'nfr', 'nfu', 'nga', 'ngb', 'ngc', 'ngd', 'nge', 'ngf', 'ngg', 'ngh', 'ngi', 'ngj', 'ngk', 'ngl', 'ngm', 'ngn', 'ngo', 'ngp', 'ngq', 'ngr', 'ngs', 'ngt', 'ngu', 'ngv', 'ngw', 'ngx', 'ngy', 'ngz', 'nha', 'nhb', 'nhc', 'nhd', 'nhe', 'nhf', 'nhg', 'nhh', 'nhi', 'nhk', 'nhm', 'nhn', 'nho', 'nhp', 'nhq', 'nhr', 'nht', 'nhu', 'nhv', 'nhw', 'nhx', 'nhy', 'nhz', 'nia', 'nib', 'nic', 'nid', 'nie', 'nif', 'nig', 'nih', 'nii', 'nij', 'nik', 'nil', 'nim', 'nin', 'nio', 'niq', 'nir', 'nis', 'nit', 'niu', 'niv', 'niw', 'nix', 'niy', 'niz', 'nja', 'njb', 'njd', 'njh', 'nji', 'njj', 'njl', 'njm', 'njn', 'njo', 'njr', 'njs', 'njt', 'nju', 'njx', 'njy', 'njz', 'nka', 'nkb', 'nkc', 'nkd', 'nke', 'nkf', 'nkg', 'nkh', 'nki', 'nkj', 'nkk', 'nkm', 'nkn', 'nko', 'nkp', 'nkq', 'nkr', 'nks', 'nkt', 'nku', 'nkv', 'nkw', 'nkx', 'nkz', 'nla', 'nlc', 'nle', 'nlg', 'nli', 'nlj', 'nlk', 'nll', 'nlm', 'nln', 'nlo', 'nlq', 'nlr', 'nlu', 'nlv', 'nlw', 'nlx', 'nly', 'nlz', 'nma', 'nmb', 'nmc', 'nmd', 'nme', 'nmf', 'nmg', 'nmh', 'nmi', 'nmj', 'nmk', 'nml', 'nmm', 'nmn', 'nmo', 'nmp', 'nmq', 'nmr', 'nms', 'nmt', 'nmu', 'nmv', 'nmw', 'nmx', 'nmy', 'nmz', 'nna', 'nnb', 'nnc', 'nnd', 'nne', 'nnf', 'nng', 'nnh', 'nni', 'nnj', 'nnk', 'nnl', 'nnm', 'nnn', 'nnp', 'nnq', 'nnr', 'nns', 'nnt', 'nnu', 'nnv', 'nnw', 'nnx', 'nny', 'nnz', 'noa', 'noc', 'nod', 'noe', 'nof', 'nog', 'noh', 'noi', 'noj', 'nok', 'nol', 'nom', 'non', 'noo', 'nop', 'noq', 'nos', 'not', 'nou', 'nov', 'now', 'noy', 'noz', 'npa', 'npb', 'npg', 'nph', 'npi', 'npl', 'npn', 'npo', 'nps', 'npu', 'npx', 'npy', 'nqg', 'nqk', 'nql', 'nqm', 'nqn', 'nqo', 'nqq', 'nqy', 'nra', 'nrb', 'nrc', 'nre', 'nrf', 'nrg', 'nri', 'nrk', 'nrl', 'nrm', 'nrn', 'nrp', 'nrr', 'nrt', 'nru', 'nrx', 'nrz', 'nsa', 'nsc', 'nsd', 'nse', 'nsf', 'nsg', 'nsh', 'nsi', 'nsk', 'nsl', 'nsm', 'nsn', 'nso', 'nsp', 'nsq', 'nsr', 'nss', 'nst', 'nsu', 'nsv', 'nsw', 'nsx', 'nsy', 'nsz', 'ntd', 'nte', 'ntg', 'nti', 'ntj', 'ntk', 'ntm', 'nto', 'ntp', 'ntr', 'nts', 'ntu', 'ntw', 'ntx', 'nty', 'ntz', 'nua', 'nub', 'nuc', 'nud', 'nue', 'nuf', 'nug', 'nuh', 'nui', 'nuj', 'nuk', 'nul', 'num', 'nun', 'nuo', 'nup', 'nuq', 'nur', 'nus', 'nut', 'nuu', 'nuv', 'nuw', 'nux', 'nuy', 'nuz', 'nvh', 'nvm', 'nvo', 'nwa', 'nwb', 'nwc', 'nwe', 'nwg', 'nwi', 'nwm', 'nwo', 'nwr', 'nwx', 'nwy', 'nxa', 'nxd', 'nxe', 'nxg', 'nxi', 'nxk', 'nxl', 'nxm', 'nxn', 'nxo', 'nxq', 'nxr', 'nxu', 'nxx', 'nyb', 'nyc', 'nyd', 'nye', 'nyf', 'nyg', 'nyh', 'nyi', 'nyj', 'nyk', 'nyl', 'nym', 'nyn', 'nyo', 'nyp', 'nyq', 'nyr', 'nys', 'nyt', 'nyu', 'nyv', 'nyw', 'nyx', 'nyy', 'nza', 'nzb', 'nzd', 'nzi', 'nzk', 'nzm', 'nzs', 'nzu', 'nzy', 'nzz', 'oaa', 'oac', 'oar', 'oav', 'obi', 'obk', 'obl', 'obm', 'obo', 'obr', 'obt', 'obu', 'oca', 'och', 'oco', 'ocu', 'oda', 'odk', 'odt', 'odu', 'ofo', 'ofs', 'ofu', 'ogb', 'ogc', 'oge', 'ogg', 'ogo', 'ogu', 'oht', 'ohu', 'oia', 'oin', 'ojb', 'ojc', 'ojg', 'ojp', 'ojs', 'ojv', 'ojw', 'oka', 'okb', 'okd', 'oke', 'okg', 'okh', 'oki', 'okj', 'okk', 'okl', 'okm', 'okn', 'oko', 'okr', 'oks', 'oku', 'okv', 'okx', 'ola', 'old', 'ole', 'olk', 'olm', 'olo', 'olr', 'olt', 'olu', 'oma', 'omb', 'omc', 'ome', 'omg', 'omi', 'omk', 'oml', 'omn', 'omo', 'omp', 'omq', 'omr', 'omt', 'omu', 'omv', 'omw', 'omx', 'ona', 'onb', 'one', 'ong', 'oni', 'onj', 'onk', 'onn', 'ono', 'onp', 'onr', 'ons', 'ont', 'onu', 'onw', 'onx', 'ood', 'oog', 'oon', 'oor', 'oos', 'opa', 'opk', 'opm', 'opo', 'opt', 'opy', 'ora', 'orc', 'ore', 'org', 'orh', 'orn', 'oro', 'orr', 'ors', 'ort', 'oru', 'orv', 'orw', 'orx', 'ory', 'orz', 'osa', 'osc', 'osi', 'oso', 'osp', 'ost', 'osu', 'osx', 'ota', 'otb', 'otd', 'ote', 'oti', 'otk', 'otl', 'otm', 'otn', 'oto', 'otq', 'otr', 'ots', 'ott', 'otu', 'otw', 'otx', 'oty', 'otz', 'oua', 'oub', 'oue', 'oui', 'oum', 'oun', 'ovd', 'owi', 'owl', 'oyb', 'oyd', 'oym', 'oyy', 'ozm', 'paa', 'pab', 'pac', 'pad', 'pae', 'paf', 'pag', 'pah', 'pai', 'pak', 'pal', 'pam', 'pao', 'pap', 'paq', 'par', 'pas', 'pat', 'pau', 'pav', 'paw', 'pax', 'pay', 'paz', 'pbb', 'pbc', 'pbe', 'pbf', 'pbg', 'pbh', 'pbi', 'pbl', 'pbm', 'pbn', 'pbo', 'pbp', 'pbr', 'pbs', 'pbt', 'pbu', 'pbv', 'pby', 'pbz', 'pca', 'pcb', 'pcc', 'pcd', 'pce', 'pcf', 'pcg', 'pch', 'pci', 'pcj', 'pck', 'pcl', 'pcm', 'pcn', 'pcp', 'pcr', 'pcw', 'pda', 'pdc', 'pdi', 'pdn', 'pdo', 'pdt', 'pdu', 'pea', 'peb', 'ped', 'pee', 'pef', 'peg', 'peh', 'pei', 'pej', 'pek', 'pel', 'pem', 'peo', 'pep', 'peq', 'pes', 'pev', 'pex', 'pey', 'pez', 'pfa', 'pfe', 'pfl', 'pga', 'pgd', 'pgg', 'pgi', 'pgk', 'pgl', 'pgn', 'pgs', 'pgu', 'pgy', 'pgz', 'pha', 'phd', 'phg', 'phh', 'phi', 'phk', 'phl', 'phm', 'phn', 'pho', 'phq', 'phr', 'pht', 'phu', 'phv', 'phw', 'pia', 'pib', 'pic', 'pid', 'pie', 'pif', 'pig', 'pih', 'pii', 'pij', 'pil', 'pim', 'pin', 'pio', 'pip', 'pir', 'pis', 'pit', 'piu', 'piv', 'piw', 'pix', 'piy', 'piz', 'pjt', 'pka', 'pkb', 'pkc', 'pkg', 'pkh', 'pkn', 'pko', 'pkp', 'pkr', 'pks', 'pkt', 'pku', 'pla', 'plb', 'plc', 'pld', 'ple', 'plf', 'plg', 'plh', 'plj', 'plk', 'pll', 'pln', 'plo', 'plp', 'plq', 'plr', 'pls', 'plt', 'plu', 'plv', 'plw', 'ply', 'plz', 'pma', 'pmb', 'pmc', 'pmd', 'pme', 'pmf', 'pmh', 'pmi', 'pmj', 'pmk', 'pml', 'pmm', 'pmn', 'pmo', 'pmq', 'pmr', 'pms', 'pmt', 'pmu', 'pmw', 'pmx', 'pmy', 'pmz', 'pna', 'pnb', 'pnc', 'pne', 'png', 'pnh', 'pni', 'pnj', 'pnk', 'pnl', 'pnm', 'pnn', 'pno', 'pnp', 'pnq', 'pnr', 'pns', 'pnt', 'pnu', 'pnv', 'pnw', 'pnx', 'pny', 'pnz', 'poc', 'pod', 'poe', 'pof', 'pog', 'poh', 'poi', 'pok', 'pom', 'pon', 'poo', 'pop', 'poq', 'pos', 'pot', 'pov', 'pow', 'pox', 'poy', 'poz', 'ppa', 'ppe', 'ppi', 'ppk', 'ppl', 'ppm', 'ppn', 'ppo', 'ppp', 'ppq', 'ppr', 'pps', 'ppt', 'ppu', 'pqa', 'pqe', 'pqm', 'pqw', 'pra', 'prb', 'prc', 'prd', 'pre', 'prf', 'prg', 'prh', 'pri', 'prk', 'prl', 'prm', 'prn', 'pro', 'prp', 'prq', 'prr', 'prs', 'prt', 'pru', 'prw', 'prx', 'pry', 'prz', 'psa', 'psc', 'psd', 'pse', 'psg', 'psh', 'psi', 'psl', 'psm', 'psn', 'pso', 'psp', 'psq', 'psr', 'pss', 'pst', 'psu', 'psw', 'psy', 'pta', 'pth', 'pti', 'ptn', 'pto', 'ptp', 'ptq', 'ptr', 'ptt', 'ptu', 'ptv', 'ptw', 'pty', 'pua', 'pub', 'puc', 'pud', 'pue', 'puf', 'pug', 'pui', 'puj', 'puk', 'pum', 'puo', 'pup', 'puq', 'pur', 'put', 'puu', 'puw', 'pux', 'puy', 'puz', 'pwa', 'pwb', 'pwg', 'pwi', 'pwm', 'pwn', 'pwo', 'pwr', 'pww', 'pxm', 'pye', 'pym', 'pyn', 'pys', 'pyu', 'pyx', 'pyy', 'pzn', 'qaa..qtz', 'qua', 'qub', 'quc', 'qud', 'quf', 'qug', 'quh', 'qui', 'quk', 'qul', 'qum', 'qun', 'qup', 'quq', 'qur', 'qus', 'quv', 'quw', 'qux', 'quy', 'quz', 'qva', 'qvc', 'qve', 'qvh', 'qvi', 'qvj', 'qvl', 'qvm', 'qvn', 'qvo', 'qvp', 'qvs', 'qvw', 'qvy', 'qvz', 'qwa', 'qwc', 'qwe', 'qwh', 'qwm', 'qws', 'qwt', 'qxa', 'qxc', 'qxh', 'qxl', 'qxn', 'qxo', 'qxp', 'qxq', 'qxr', 'qxs', 'qxt', 'qxu', 'qxw', 'qya', 'qyp', 'raa', 'rab', 'rac', 'rad', 'raf', 'rag', 'rah', 'rai', 'raj', 'rak', 'ral', 'ram', 'ran', 'rao', 'rap', 'raq', 'rar', 'ras', 'rat', 'rau', 'rav', 'raw', 'rax', 'ray', 'raz', 'rbb', 'rbk', 'rbl', 'rbp', 'rcf', 'rdb', 'rea', 'reb', 'ree', 'reg', 'rei', 'rej', 'rel', 'rem', 'ren', 'rer', 'res', 'ret', 'rey', 'rga', 'rge', 'rgk', 'rgn', 'rgr', 'rgs', 'rgu', 'rhg', 'rhp', 'ria', 'rie', 'rif', 'ril', 'rim', 'rin', 'rir', 'rit', 'riu', 'rjg', 'rji', 'rjs', 'rka', 'rkb', 'rkh', 'rki', 'rkm', 'rkt', 'rkw', 'rma', 'rmb', 'rmc', 'rmd', 'rme', 'rmf', 'rmg', 'rmh', 'rmi', 'rmk', 'rml', 'rmm', 'rmn', 'rmo', 'rmp', 'rmq', 'rmr', 'rms', 'rmt', 'rmu', 'rmv', 'rmw', 'rmx', 'rmy', 'rmz', 'rna', 'rnd', 'rng', 'rnl', 'rnn', 'rnp', 'rnr', 'rnw', 'roa', 'rob', 'roc', 'rod', 'roe', 'rof', 'rog', 'rol', 'rom', 'roo', 'rop', 'ror', 'rou', 'row', 'rpn', 'rpt', 'rri', 'rro', 'rrt', 'rsb', 'rsi', 'rsl', 'rsm', 'rtc', 'rth', 'rtm', 'rts', 'rtw', 'rub', 'ruc', 'rue', 'ruf', 'rug', 'ruh', 'rui', 'ruk', 'ruo', 'rup', 'ruq', 'rut', 'ruu', 'ruy', 'ruz', 'rwa', 'rwk', 'rwm', 'rwo', 'rwr', 'rxd', 'rxw', 'ryn', 'rys', 'ryu', 'rzh', 'saa', 'sab', 'sac', 'sad', 'sae', 'saf', 'sah', 'sai', 'saj', 'sak', 'sal', 'sam', 'sao', 'sap', 'saq', 'sar', 'sas', 'sat', 'sau', 'sav', 'saw', 'sax', 'say', 'saz', 'sba', 'sbb', 'sbc', 'sbd', 'sbe', 'sbf', 'sbg', 'sbh', 'sbi', 'sbj', 'sbk', 'sbl', 'sbm', 'sbn', 'sbo', 'sbp', 'sbq', 'sbr', 'sbs', 'sbt', 'sbu', 'sbv', 'sbw', 'sbx', 'sby', 'sbz', 'sca', 'scb', 'sce', 'scf', 'scg', 'sch', 'sci', 'sck', 'scl', 'scn', 'sco', 'scp', 'scq', 'scs', 'sct', 'scu', 'scv', 'scw', 'scx', 'sda', 'sdb', 'sdc', 'sde', 'sdf', 'sdg', 'sdh', 'sdj', 'sdk', 'sdl', 'sdm', 'sdn', 'sdo', 'sdp', 'sdr', 'sds', 'sdt', 'sdu', 'sdv', 'sdx', 'sdz', 'sea', 'seb', 'sec', 'sed', 'see', 'sef', 'seg', 'seh', 'sei', 'sej', 'sek', 'sel', 'sem', 'sen', 'seo', 'sep', 'seq', 'ser', 'ses', 'set', 'seu', 'sev', 'sew', 'sey', 'sez', 'sfb', 'sfe', 'sfm', 'sfs', 'sfw', 'sga', 'sgb', 'sgc', 'sgd', 'sge', 'sgg', 'sgh', 'sgi', 'sgj', 'sgk', 'sgl', 'sgm', 'sgn', 'sgo', 'sgp', 'sgr', 'sgs', 'sgt', 'sgu', 'sgw', 'sgx', 'sgy', 'sgz', 'sha', 'shb', 'shc', 'shd', 'she', 'shg', 'shh', 'shi', 'shj', 'shk', 'shl', 'shm', 'shn', 'sho', 'shp', 'shq', 'shr', 'shs', 'sht', 'shu', 'shv', 'shw', 'shx', 'shy', 'shz', 'sia', 'sib', 'sid', 'sie', 'sif', 'sig', 'sih', 'sii', 'sij', 'sik', 'sil', 'sim', 'sio', 'sip', 'siq', 'sir', 'sis', 'sit', 'siu', 'siv', 'siw', 'six', 'siy', 'siz', 'sja', 'sjb', 'sjd', 'sje', 'sjg', 'sjk', 'sjl', 'sjm', 'sjn', 'sjo', 'sjp', 'sjr', 'sjs', 'sjt', 'sju', 'sjw', 'ska', 'skb', 'skc', 'skd', 'ske', 'skf', 'skg', 'skh', 'ski', 'skj', 'skk', 'skm', 'skn', 'sko', 'skp', 'skq', 'skr', 'sks', 'skt', 'sku', 'skv', 'skw', 'skx', 'sky', 'skz', 'sla', 'slc', 'sld', 'sle', 'slf', 'slg', 'slh', 'sli', 'slj', 'sll', 'slm', 'sln', 'slp', 'slq', 'slr', 'sls', 'slt', 'slu', 'slw', 'slx', 'sly', 'slz', 'sma', 'smb', 'smc', 'smd', 'smf', 'smg', 'smh', 'smi', 'smj', 'smk', 'sml', 'smm', 'smn', 'smp', 'smq', 'smr', 'sms', 'smt', 'smu', 'smv', 'smw', 'smx', 'smy', 'smz', 'snb', 'snc', 'sne', 'snf', 'sng', 'snh', 'sni', 'snj', 'snk', 'snl', 'snm', 'snn', 'sno', 'snp', 'snq', 'snr', 'sns', 'snu', 'snv', 'snw', 'snx', 'sny', 'snz', 'soa', 'sob', 'soc', 'sod', 'soe', 'sog', 'soh', 'soi', 'soj', 'sok', 'sol', 'son', 'soo', 'sop', 'soq', 'sor', 'sos', 'sou', 'sov', 'sow', 'sox', 'soy', 'soz', 'spb', 'spc', 'spd', 'spe', 'spg', 'spi', 'spk', 'spl', 'spm', 'spn', 'spo', 'spp', 'spq', 'spr', 'sps', 'spt', 'spu', 'spv', 'spx', 'spy', 'sqa', 'sqh', 'sqj', 'sqk', 'sqm', 'sqn', 'sqo', 'sqq', 'sqr', 'sqs', 'sqt', 'squ', 'sra', 'srb', 'src', 'sre', 'srf', 'srg', 'srh', 'sri', 'srk', 'srl', 'srm', 'srn', 'sro', 'srq', 'srr', 'srs', 'srt', 'sru', 'srv', 'srw', 'srx', 'sry', 'srz', 'ssa', 'ssb', 'ssc', 'ssd', 'sse', 'ssf', 'ssg', 'ssh', 'ssi', 'ssj', 'ssk', 'ssl', 'ssm', 'ssn', 'sso', 'ssp', 'ssq', 'ssr', 'sss', 'sst', 'ssu', 'ssv', 'ssx', 'ssy', 'ssz', 'sta', 'stb', 'std', 'ste', 'stf', 'stg', 'sth', 'sti', 'stj', 'stk', 'stl', 'stm', 'stn', 'sto', 'stp', 'stq', 'str', 'sts', 'stt', 'stu', 'stv', 'stw', 'sty', 'sua', 'sub', 'suc', 'sue', 'sug', 'sui', 'suj', 'suk', 'sul', 'sum', 'suq', 'sur', 'sus', 'sut', 'suv', 'suw', 'sux', 'suy', 'suz', 'sva', 'svb', 'svc', 'sve', 'svk', 'svm', 'svr', 'svs', 'svx', 'swb', 'swc', 'swf', 'swg', 'swh', 'swi', 'swj', 'swk', 'swl', 'swm', 'swn', 'swo', 'swp', 'swq', 'swr', 'sws', 'swt', 'swu', 'swv', 'sww', 'swx', 'swy', 'sxb', 'sxc', 'sxe', 'sxg', 'sxk', 'sxl', 'sxm', 'sxn', 'sxo', 'sxr', 'sxs', 'sxu', 'sxw', 'sya', 'syb', 'syc', 'syd', 'syi', 'syk', 'syl', 'sym', 'syn', 'syo', 'syr', 'sys', 'syw', 'syx', 'syy', 'sza', 'szb', 'szc', 'szd', 'sze', 'szg', 'szl', 'szn', 'szp', 'szs', 'szv', 'szw', 'taa', 'tab', 'tac', 'tad', 'tae', 'taf', 'tag', 'tai', 'taj', 'tak', 'tal', 'tan', 'tao', 'tap', 'taq', 'tar', 'tas', 'tau', 'tav', 'taw', 'tax', 'tay', 'taz', 'tba', 'tbb', 'tbc', 'tbd', 'tbe', 'tbf', 'tbg', 'tbh', 'tbi', 'tbj', 'tbk', 'tbl', 'tbm', 'tbn', 'tbo', 'tbp', 'tbq', 'tbr', 'tbs', 'tbt', 'tbu', 'tbv', 'tbw', 'tbx', 'tby', 'tbz', 'tca', 'tcb', 'tcc', 'tcd', 'tce', 'tcf', 'tcg', 'tch', 'tci', 'tck', 'tcl', 'tcm', 'tcn', 'tco', 'tcp', 'tcq', 'tcs', 'tct', 'tcu', 'tcw', 'tcx', 'tcy', 'tcz', 'tda', 'tdb', 'tdc', 'tdd', 'tde', 'tdf', 'tdg', 'tdh', 'tdi', 'tdj', 'tdk', 'tdl', 'tdm', 'tdn', 'tdo', 'tdq', 'tdr', 'tds', 'tdt', 'tdu', 'tdv', 'tdx', 'tdy', 'tea', 'teb', 'tec', 'ted', 'tee', 'tef', 'teg', 'teh', 'tei', 'tek', 'tem', 'ten', 'teo', 'tep', 'teq', 'ter', 'tes', 'tet', 'teu', 'tev', 'tew', 'tex', 'tey', 'tez', 'tfi', 'tfn', 'tfo', 'tfr', 'tft', 'tga', 'tgb', 'tgc', 'tgd', 'tge', 'tgf', 'tgg', 'tgh', 'tgi', 'tgj', 'tgn', 'tgo', 'tgp', 'tgq', 'tgr', 'tgs', 'tgt', 'tgu', 'tgv', 'tgw', 'tgx', 'tgy', 'tgz', 'thc', 'thd', 'the', 'thf', 'thh', 'thi', 'thk', 'thl', 'thm', 'thn', 'thp', 'thq', 'thr', 'ths', 'tht', 'thu', 'thv', 'thw', 'thx', 'thy', 'thz', 'tia', 'tic', 'tid', 'tie', 'tif', 'tig', 'tih', 'tii', 'tij', 'tik', 'til', 'tim', 'tin', 'tio', 'tip', 'tiq', 'tis', 'tit', 'tiu', 'tiv', 'tiw', 'tix', 'tiy', 'tiz', 'tja', 'tjg', 'tji', 'tjl', 'tjm', 'tjn', 'tjo', 'tjs', 'tju', 'tjw', 'tka', 'tkb', 'tkd', 'tke', 'tkf', 'tkg', 'tkk', 'tkl', 'tkm', 'tkn', 'tkp', 'tkq', 'tkr', 'tks', 'tkt', 'tku', 'tkv', 'tkw', 'tkx', 'tkz', 'tla', 'tlb', 'tlc', 'tld', 'tlf', 'tlg', 'tlh', 'tli', 'tlj', 'tlk', 'tll', 'tlm', 'tln', 'tlo', 'tlp', 'tlq', 'tlr', 'tls', 'tlt', 'tlu', 'tlv', 'tlw', 'tlx', 'tly', 'tma', 'tmb', 'tmc', 'tmd', 'tme', 'tmf', 'tmg', 'tmh', 'tmi', 'tmj', 'tmk', 'tml', 'tmm', 'tmn', 'tmo', 'tmp', 'tmq', 'tmr', 'tms', 'tmt', 'tmu', 'tmv', 'tmw', 'tmy', 'tmz', 'tna', 'tnb', 'tnc', 'tnd', 'tne', 'tnf', 'tng', 'tnh', 'tni', 'tnk', 'tnl', 'tnm', 'tnn', 'tno', 'tnp', 'tnq', 'tnr', 'tns', 'tnt', 'tnu', 'tnv', 'tnw', 'tnx', 'tny', 'tnz', 'tob', 'toc', 'tod', 'toe', 'tof', 'tog', 'toh', 'toi', 'toj', 'tol', 'tom', 'too', 'top', 'toq', 'tor', 'tos', 'tou', 'tov', 'tow', 'tox', 'toy', 'toz', 'tpa', 'tpc', 'tpe', 'tpf', 'tpg', 'tpi', 'tpj', 'tpk', 'tpl', 'tpm', 'tpn', 'tpo', 'tpp', 'tpq', 'tpr', 'tpt', 'tpu', 'tpv', 'tpw', 'tpx', 'tpy', 'tpz', 'tqb', 'tql', 'tqm', 'tqn', 'tqo', 'tqp', 'tqq', 'tqr', 'tqt', 'tqu', 'tqw', 'tra', 'trb', 'trc', 'trd', 'tre', 'trf', 'trg', 'trh', 'tri', 'trj', 'trk', 'trl', 'trm', 'trn', 'tro', 'trp', 'trq', 'trr', 'trs', 'trt', 'tru', 'trv', 'trw', 'trx', 'try', 'trz', 'tsa', 'tsb', 'tsc', 'tsd', 'tse', 'tsf', 'tsg', 'tsh', 'tsi', 'tsj', 'tsk', 'tsl', 'tsm', 'tsp', 'tsq', 'tsr', 'tss', 'tst', 'tsu', 'tsv', 'tsw', 'tsx', 'tsy', 'tsz', 'tta', 'ttb', 'ttc', 'ttd', 'tte', 'ttf', 'ttg', 'tth', 'tti', 'ttj', 'ttk', 'ttl', 'ttm', 'ttn', 'tto', 'ttp', 'ttq', 'ttr', 'tts', 'ttt', 'ttu', 'ttv', 'ttw', 'tty', 'ttz', 'tua', 'tub', 'tuc', 'tud', 'tue', 'tuf', 'tug', 'tuh', 'tui', 'tuj', 'tul', 'tum', 'tun', 'tuo', 'tup', 'tuq', 'tus', 'tut', 'tuu', 'tuv', 'tuw', 'tux', 'tuy', 'tuz', 'tva', 'tvd', 'tve', 'tvk', 'tvl', 'tvm', 'tvn', 'tvo', 'tvs', 'tvt', 'tvu', 'tvw', 'tvy', 'twa', 'twb', 'twc', 'twd', 'twe', 'twf', 'twg', 'twh', 'twl', 'twm', 'twn', 'two', 'twp', 'twq', 'twr', 'twt', 'twu', 'tww', 'twx', 'twy', 'txa', 'txb', 'txc', 'txe', 'txg', 'txh', 'txi', 'txj', 'txm', 'txn', 'txo', 'txq', 'txr', 'txs', 'txt', 'txu', 'txx', 'txy', 'tya', 'tye', 'tyh', 'tyi', 'tyj', 'tyl', 'tyn', 'typ', 'tyr', 'tys', 'tyt', 'tyu', 'tyv', 'tyx', 'tyz', 'tza', 'tzh', 'tzj', 'tzl', 'tzm', 'tzn', 'tzo', 'tzx', 'uam', 'uan', 'uar', 'uba', 'ubi', 'ubl', 'ubr', 'ubu', 'uby', 'uda', 'ude', 'udg', 'udi', 'udj', 'udl', 'udm', 'udu', 'ues', 'ufi', 'uga', 'ugb', 'uge', 'ugn', 'ugo', 'ugy', 'uha', 'uhn', 'uis', 'uiv', 'uji', 'uka', 'ukg', 'ukh', 'ukk', 'ukl', 'ukp', 'ukq', 'uks', 'uku', 'ukw', 'uky', 'ula', 'ulb', 'ulc', 'ule', 'ulf', 'uli', 'ulk', 'ull', 'ulm', 'uln', 'ulu', 'ulw', 'uma', 'umb', 'umc', 'umd', 'umg', 'umi', 'umm', 'umn', 'umo', 'ump', 'umr', 'ums', 'umu', 'una', 'und', 'une', 'ung', 'unk', 'unm', 'unn', 'unp', 'unr', 'unu', 'unx', 'unz', 'uok', 'upi', 'upv', 'ura', 'urb', 'urc', 'ure', 'urf', 'urg', 'urh', 'uri', 'urj', 'urk', 'url', 'urm', 'urn', 'uro', 'urp', 'urr', 'urt', 'uru', 'urv', 'urw', 'urx', 'ury', 'urz', 'usa', 'ush', 'usi', 'usk', 'usp', 'usu', 'uta', 'ute', 'utp', 'utr', 'utu', 'uum', 'uun', 'uur', 'uuu', 'uve', 'uvh', 'uvl', 'uwa', 'uya', 'uzn', 'uzs', 'vaa', 'vae', 'vaf', 'vag', 'vah', 'vai', 'vaj', 'val', 'vam', 'van', 'vao', 'vap', 'var', 'vas', 'vau', 'vav', 'vay', 'vbb', 'vbk', 'vec', 'ved', 'vel', 'vem', 'veo', 'vep', 'ver', 'vgr', 'vgt', 'vic', 'vid', 'vif', 'vig', 'vil', 'vin', 'vis', 'vit', 'viv', 'vka', 'vki', 'vkj', 'vkk', 'vkl', 'vkm', 'vko', 'vkp', 'vkt', 'vku', 'vlp', 'vls', 'vma', 'vmb', 'vmc', 'vmd', 'vme', 'vmf', 'vmg', 'vmh', 'vmi', 'vmj', 'vmk', 'vml', 'vmm', 'vmp', 'vmq', 'vmr', 'vms', 'vmu', 'vmv', 'vmw', 'vmx', 'vmy', 'vmz', 'vnk', 'vnm', 'vnp', 'vor', 'vot', 'vra', 'vro', 'vrs', 'vrt', 'vsi', 'vsl', 'vsv', 'vto', 'vum', 'vun', 'vut', 'vwa', 'waa', 'wab', 'wac', 'wad', 'wae', 'waf', 'wag', 'wah', 'wai', 'waj', 'wak', 'wal', 'wam', 'wan', 'wao', 'wap', 'waq', 'war', 'was', 'wat', 'wau', 'wav', 'waw', 'wax', 'way', 'waz', 'wba', 'wbb', 'wbe', 'wbf', 'wbh', 'wbi', 'wbj', 'wbk', 'wbl', 'wbm', 'wbp', 'wbq', 'wbr', 'wbs', 'wbt', 'wbv', 'wbw', 'wca', 'wci', 'wdd', 'wdg', 'wdj', 'wdk', 'wdu', 'wdy', 'wea', 'wec', 'wed', 'weg', 'weh', 'wei', 'wem', 'wen', 'weo', 'wep', 'wer', 'wes', 'wet', 'weu', 'wew', 'wfg', 'wga', 'wgb', 'wgg', 'wgi', 'wgo', 'wgu', 'wgw', 'wgy', 'wha', 'whg', 'whk', 'whu', 'wib', 'wic', 'wie', 'wif', 'wig', 'wih', 'wii', 'wij', 'wik', 'wil', 'wim', 'win', 'wir', 'wit', 'wiu', 'wiv', 'wiw', 'wiy', 'wja', 'wji', 'wka', 'wkb', 'wkd', 'wkl', 'wku', 'wkw', 'wky', 'wla', 'wlc', 'wle', 'wlg', 'wli', 'wlk', 'wll', 'wlm', 'wlo', 'wlr', 'wls', 'wlu', 'wlv', 'wlw', 'wlx', 'wly', 'wma', 'wmb', 'wmc', 'wmd', 'wme', 'wmh', 'wmi', 'wmm', 'wmn', 'wmo', 'wms', 'wmt', 'wmw', 'wmx', 'wnb', 'wnc', 'wnd', 'wne', 'wng', 'wni', 'wnk', 'wnm', 'wnn', 'wno', 'wnp', 'wnu', 'wnw', 'wny', 'woa', 'wob', 'woc', 'wod', 'woe', 'wof', 'wog', 'woi', 'wok', 'wom', 'won', 'woo', 'wor', 'wos', 'wow', 'woy', 'wpc', 'wra', 'wrb', 'wrd', 'wrg', 'wrh', 'wri', 'wrk', 'wrl', 'wrm', 'wrn', 'wro', 'wrp', 'wrr', 'wrs', 'wru', 'wrv', 'wrw', 'wrx', 'wry', 'wrz', 'wsa', 'wsg', 'wsi', 'wsk', 'wsr', 'wss', 'wsu', 'wsv', 'wtf', 'wth', 'wti', 'wtk', 'wtm', 'wtw', 'wua', 'wub', 'wud', 'wuh', 'wul', 'wum', 'wun', 'wur', 'wut', 'wuu', 'wuv', 'wux', 'wuy', 'wwa', 'wwb', 'wwo', 'wwr', 'www', 'wxa', 'wxw', 'wya', 'wyb', 'wyi', 'wym', 'wyr', 'wyy', 'xaa', 'xab', 'xac', 'xad', 'xae', 'xag', 'xai', 'xaj', 'xak', 'xal', 'xam', 'xan', 'xao', 'xap', 'xaq', 'xar', 'xas', 'xat', 'xau', 'xav', 'xaw', 'xay', 'xba', 'xbb', 'xbc', 'xbd', 'xbe', 'xbg', 'xbi', 'xbj', 'xbm', 'xbn', 'xbo', 'xbp', 'xbr', 'xbw', 'xbx', 'xby', 'xcb', 'xcc', 'xce', 'xcg', 'xch', 'xcl', 'xcm', 'xcn', 'xco', 'xcr', 'xct', 'xcu', 'xcv', 'xcw', 'xcy', 'xda', 'xdc', 'xdk', 'xdm', 'xdo', 'xdy', 'xeb', 'xed', 'xeg', 'xel', 'xem', 'xep', 'xer', 'xes', 'xet', 'xeu', 'xfa', 'xga', 'xgb', 'xgd', 'xgf', 'xgg', 'xgi', 'xgl', 'xgm', 'xgn', 'xgr', 'xgu', 'xgw', 'xha', 'xhc', 'xhd', 'xhe', 'xhr', 'xht', 'xhu', 'xhv', 'xia', 'xib', 'xii', 'xil', 'xin', 'xip', 'xir', 'xis', 'xiv', 'xiy', 'xjb', 'xjt', 'xka', 'xkb', 'xkc', 'xkd', 'xke', 'xkf', 'xkg', 'xkh', 'xki', 'xkj', 'xkk', 'xkl', 'xkn', 'xko', 'xkp', 'xkq', 'xkr', 'xks', 'xkt', 'xku', 'xkv', 'xkw', 'xkx', 'xky', 'xkz', 'xla', 'xlb', 'xlc', 'xld', 'xle', 'xlg', 'xli', 'xln', 'xlo', 'xlp', 'xls', 'xlu', 'xly', 'xma', 'xmb', 'xmc', 'xmd', 'xme', 'xmf', 'xmg', 'xmh', 'xmj', 'xmk', 'xml', 'xmm', 'xmn', 'xmo', 'xmp', 'xmq', 'xmr', 'xms', 'xmt', 'xmu', 'xmv', 'xmw', 'xmx', 'xmy', 'xmz', 'xna', 'xnb', 'xnd', 'xng', 'xnh', 'xni', 'xnk', 'xnn', 'xno', 'xnr', 'xns', 'xnt', 'xnu', 'xny', 'xnz', 'xoc', 'xod', 'xog', 'xoi', 'xok', 'xom', 'xon', 'xoo', 'xop', 'xor', 'xow', 'xpa', 'xpc', 'xpe', 'xpg', 'xpi', 'xpj', 'xpk', 'xpm', 'xpn', 'xpo', 'xpp', 'xpq', 'xpr', 'xps', 'xpt', 'xpu', 'xpy', 'xqa', 'xqt', 'xra', 'xrb', 'xrd', 'xre', 'xrg', 'xri', 'xrm', 'xrn', 'xrq', 'xrr', 'xrt', 'xru', 'xrw', 'xsa', 'xsb', 'xsc', 'xsd', 'xse', 'xsh', 'xsi', 'xsj', 'xsl', 'xsm', 'xsn', 'xso', 'xsp', 'xsq', 'xsr', 'xss', 'xsu', 'xsv', 'xsy', 'xta', 'xtb', 'xtc', 'xtd', 'xte', 'xtg', 'xth', 'xti', 'xtj', 'xtl', 'xtm', 'xtn', 'xto', 'xtp', 'xtq', 'xtr', 'xts', 'xtt', 'xtu', 'xtv', 'xtw', 'xty', 'xtz', 'xua', 'xub', 'xud', 'xug', 'xuj', 'xul', 'xum', 'xun', 'xuo', 'xup', 'xur', 'xut', 'xuu', 'xve', 'xvi', 'xvn', 'xvo', 'xvs', 'xwa', 'xwc', 'xwd', 'xwe', 'xwg', 'xwj', 'xwk', 'xwl', 'xwo', 'xwr', 'xwt', 'xww', 'xxb', 'xxk', 'xxm', 'xxr', 'xxt', 'xya', 'xyb', 'xyj', 'xyk', 'xyl', 'xyt', 'xyy', 'xzh', 'xzm', 'xzp', 'yaa', 'yab', 'yac', 'yad', 'yae', 'yaf', 'yag', 'yah', 'yai', 'yaj', 'yak', 'yal', 'yam', 'yan', 'yao', 'yap', 'yaq', 'yar', 'yas', 'yat', 'yau', 'yav', 'yaw', 'yax', 'yay', 'yaz', 'yba', 'ybb', 'ybd', 'ybe', 'ybh', 'ybi', 'ybj', 'ybk', 'ybl', 'ybm', 'ybn', 'ybo', 'ybx', 'yby', 'ych', 'ycl', 'ycn', 'ycp', 'yda', 'ydd', 'yde', 'ydg', 'ydk', 'yds', 'yea', 'yec', 'yee', 'yei', 'yej', 'yel', 'yen', 'yer', 'yes', 'yet', 'yeu', 'yev', 'yey', 'yga', 'ygi', 'ygl', 'ygm', 'ygp', 'ygr', 'ygs', 'ygu', 'ygw', 'yha', 'yhd', 'yhl', 'yhs', 'yia', 'yif', 'yig', 'yih', 'yii', 'yij', 'yik', 'yil', 'yim', 'yin', 'yip', 'yiq', 'yir', 'yis', 'yit', 'yiu', 'yiv', 'yix', 'yiy', 'yiz', 'yka', 'ykg', 'yki', 'ykk', 'ykl', 'ykm', 'ykn', 'yko', 'ykr', 'ykt', 'yku', 'yky', 'yla', 'ylb', 'yle', 'ylg', 'yli', 'yll', 'ylm', 'yln', 'ylo', 'ylr', 'ylu', 'yly', 'yma', 'ymb', 'ymc', 'ymd', 'yme', 'ymg', 'ymh', 'ymi', 'ymk', 'yml', 'ymm', 'ymn', 'ymo', 'ymp', 'ymq', 'ymr', 'yms', 'ymt', 'ymx', 'ymz', 'yna', 'ynd', 'yne', 'yng', 'ynh', 'ynk', 'ynl', 'ynn', 'yno', 'ynq', 'yns', 'ynu', 'yob', 'yog', 'yoi', 'yok', 'yol', 'yom', 'yon', 'yos', 'yot', 'yox', 'yoy', 'ypa', 'ypb', 'ypg', 'yph', 'ypk', 'ypm', 'ypn', 'ypo', 'ypp', 'ypz', 'yra', 'yrb', 'yre', 'yri', 'yrk', 'yrl', 'yrm', 'yrn', 'yro', 'yrs', 'yrw', 'yry', 'ysc', 'ysd', 'ysg', 'ysl', 'ysn', 'yso', 'ysp', 'ysr', 'yss', 'ysy', 'yta', 'ytl', 'ytp', 'ytw', 'yty', 'yua', 'yub', 'yuc', 'yud', 'yue', 'yuf', 'yug', 'yui', 'yuj', 'yuk', 'yul', 'yum', 'yun', 'yup', 'yuq', 'yur', 'yut', 'yuu', 'yuw', 'yux', 'yuy', 'yuz', 'yva', 'yvt', 'ywa', 'ywg', 'ywl', 'ywn', 'ywq', 'ywr', 'ywt', 'ywu', 'yww', 'yxa', 'yxg', 'yxl', 'yxm', 'yxu', 'yxy', 'yyr', 'yyu', 'yyz', 'yzg', 'yzk', 'zaa', 'zab', 'zac', 'zad', 'zae', 'zaf', 'zag', 'zah', 'zai', 'zaj', 'zak', 'zal', 'zam', 'zao', 'zap', 'zaq', 'zar', 'zas', 'zat', 'zau', 'zav', 'zaw', 'zax', 'zay', 'zaz', 'zbc', 'zbe', 'zbl', 'zbt', 'zbw', 'zca', 'zch', 'zdj', 'zea', 'zeg', 'zeh', 'zen', 'zga', 'zgb', 'zgh', 'zgm', 'zgn', 'zgr', 'zhb', 'zhd', 'zhi', 'zhn', 'zhw', 'zhx', 'zia', 'zib', 'zik', 'zil', 'zim', 'zin', 'zir', 'ziw', 'ziz', 'zka', 'zkb', 'zkd', 'zkg', 'zkh', 'zkk', 'zkn', 'zko', 'zkp', 'zkr', 'zkt', 'zku', 'zkv', 'zkz', 'zle', 'zlj', 'zlm', 'zln', 'zlq', 'zls', 'zlw', 'zma', 'zmb', 'zmc', 'zmd', 'zme', 'zmf', 'zmg', 'zmh', 'zmi', 'zmj', 'zmk', 'zml', 'zmm', 'zmn', 'zmo', 'zmp', 'zmq', 'zmr', 'zms', 'zmt', 'zmu', 'zmv', 'zmw', 'zmx', 'zmy', 'zmz', 'zna', 'znd', 'zne', 'zng', 'znk', 'zns', 'zoc', 'zoh', 'zom', 'zoo', 'zoq', 'zor', 'zos', 'zpa', 'zpb', 'zpc', 'zpd', 'zpe', 'zpf', 'zpg', 'zph', 'zpi', 'zpj', 'zpk', 'zpl', 'zpm', 'zpn', 'zpo', 'zpp', 'zpq', 'zpr', 'zps', 'zpt', 'zpu', 'zpv', 'zpw', 'zpx', 'zpy', 'zpz', 'zqe', 'zra', 'zrg', 'zrn', 'zro', 'zrp', 'zrs', 'zsa', 'zsk', 'zsl', 'zsm', 'zsr', 'zsu', 'zte', 'ztg', 'ztl', 'ztm', 'ztn', 'ztp', 'ztq', 'zts', 'ztt', 'ztu', 'ztx', 'zty', 'zua', 'zuh', 'zum', 'zun', 'zuy', 'zwa', 'zxx', 'zyb', 'zyg', 'zyj', 'zyn', 'zyp', 'zza', 'zzj' ];\n  axe.utils.validLangs = function() {\n    'use strict';\n    return langs;\n  };\n  'use strict';\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n  function _nonIterableSpread() {\n    throw new TypeError('Invalid attempt to spread non-iterable instance');\n  }\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') {\n      return Array.from(iter);\n    }\n  }\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n      return arr2;\n    }\n  }\n  function _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n  }\n  function _nonIterableRest() {\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  }\n  function _iterableToArrayLimit(arr, i) {\n    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === '[object Arguments]')) {\n      return;\n    }\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) {\n          break;\n        }\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return'] != null) {\n          _i['return']();\n        }\n      } finally {\n        if (_d) {\n          throw _e;\n        }\n      }\n    }\n    return _arr;\n  }\n  function _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) {\n      return arr;\n    }\n  }\n  function _typeof(obj) {\n    '@babel/helpers - typeof';\n    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n      _typeof = function _typeof(obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function _typeof(obj) {\n        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;\n      };\n    }\n    return _typeof(obj);\n  }\n  axe._load({\n    lang: 'en',\n    data: {\n      rules: {\n        accesskeys: {\n          description: 'Ensures every accesskey attribute value is unique',\n          help: 'accesskey attribute value must be unique'\n        },\n        'area-alt': {\n          description: 'Ensures <area> elements of image maps have alternate text',\n          help: 'Active <area> elements must have alternate text'\n        },\n        'aria-allowed-attr': {\n          description: 'Ensures ARIA attributes are allowed for an element\\'s role',\n          help: 'Elements must only use allowed ARIA attributes'\n        },\n        'aria-allowed-role': {\n          description: 'Ensures role attribute has an appropriate value for the element',\n          help: 'ARIA role must be appropriate for the element'\n        },\n        'aria-dpub-role-fallback': {\n          description: 'Ensures unsupported DPUB roles are only used on elements with implicit fallback roles',\n          help: 'Unsupported DPUB ARIA roles should be used on elements with implicit fallback roles'\n        },\n        'aria-hidden-body': {\n          description: 'Ensures aria-hidden=\\'true\\' is not present on the document body.',\n          help: 'aria-hidden=\\'true\\' must not be present on the document body'\n        },\n        'aria-hidden-focus': {\n          description: 'Ensures aria-hidden elements do not contain focusable elements',\n          help: 'ARIA hidden element must not contain focusable elements'\n        },\n        'aria-input-field-name': {\n          description: 'Ensures every ARIA input field has an accessible name',\n          help: 'ARIA input fields must have an accessible name'\n        },\n        'aria-required-attr': {\n          description: 'Ensures elements with ARIA roles have all required ARIA attributes',\n          help: 'Required ARIA attributes must be provided'\n        },\n        'aria-required-children': {\n          description: 'Ensures elements with an ARIA role that require child roles contain them',\n          help: 'Certain ARIA roles must contain particular children'\n        },\n        'aria-required-parent': {\n          description: 'Ensures elements with an ARIA role that require parent roles are contained by them',\n          help: 'Certain ARIA roles must be contained by particular parents'\n        },\n        'aria-roledescription': {\n          description: 'Ensure aria-roledescription is only used on elements with an implicit or explicit role',\n          help: 'Use aria-roledescription on elements with a semantic role'\n        },\n        'aria-roles': {\n          description: 'Ensures all elements with a role attribute use a valid value',\n          help: 'ARIA roles used must conform to valid values'\n        },\n        'aria-toggle-field-name': {\n          description: 'Ensures every ARIA toggle field has an accessible name',\n          help: 'ARIA toggle fields have an accessible name'\n        },\n        'aria-valid-attr-value': {\n          description: 'Ensures all ARIA attributes have valid values',\n          help: 'ARIA attributes must conform to valid values'\n        },\n        'aria-valid-attr': {\n          description: 'Ensures attributes that begin with aria- are valid ARIA attributes',\n          help: 'ARIA attributes must conform to valid names'\n        },\n        'audio-caption': {\n          description: 'Ensures <audio> elements have captions',\n          help: '<audio> elements must have a captions track'\n        },\n        'autocomplete-valid': {\n          description: 'Ensure the autocomplete attribute is correct and suitable for the form field',\n          help: 'autocomplete attribute must be used correctly'\n        },\n        'avoid-inline-spacing': {\n          description: 'Ensure that text spacing set through style attributes can be adjusted with custom stylesheets',\n          help: 'Inline text spacing must be adjustable with custom stylesheets'\n        },\n        blink: {\n          description: 'Ensures <blink> elements are not used',\n          help: '<blink> elements are deprecated and must not be used'\n        },\n        'button-name': {\n          description: 'Ensures buttons have discernible text',\n          help: 'Buttons must have discernible text'\n        },\n        bypass: {\n          description: 'Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content',\n          help: 'Page must have means to bypass repeated blocks'\n        },\n        checkboxgroup: {\n          description: 'Ensures related <input type=\"checkbox\"> elements have a group and that the group designation is consistent',\n          help: 'Checkbox inputs with the same name attribute value must be part of a group'\n        },\n        'color-contrast': {\n          description: 'Ensures the contrast between foreground and background colors meets WCAG 2 AA contrast ratio thresholds',\n          help: 'Elements must have sufficient color contrast'\n        },\n        'css-orientation-lock': {\n          description: 'Ensures content is not locked to any specific display orientation, and the content is operable in all display orientations',\n          help: 'CSS Media queries are not used to lock display orientation'\n        },\n        'definition-list': {\n          description: 'Ensures <dl> elements are structured correctly',\n          help: '<dl> elements must only directly contain properly-ordered <dt> and <dd> groups, <script>, <template> or <div> elements'\n        },\n        dlitem: {\n          description: 'Ensures <dt> and <dd> elements are contained by a <dl>',\n          help: '<dt> and <dd> elements must be contained by a <dl>'\n        },\n        'document-title': {\n          description: 'Ensures each HTML document contains a non-empty <title> element',\n          help: 'Documents must have <title> element to aid in navigation'\n        },\n        'duplicate-id-active': {\n          description: 'Ensures every id attribute value of active elements is unique',\n          help: 'IDs of active elements must be unique'\n        },\n        'duplicate-id-aria': {\n          description: 'Ensures every id attribute value used in ARIA and in labels is unique',\n          help: 'IDs used in ARIA and labels must be unique'\n        },\n        'duplicate-id': {\n          description: 'Ensures every id attribute value is unique',\n          help: 'id attribute value must be unique'\n        },\n        'empty-heading': {\n          description: 'Ensures headings have discernible text',\n          help: 'Headings must not be empty'\n        },\n        'focus-order-semantics': {\n          description: 'Ensures elements in the focus order have an appropriate role',\n          help: 'Elements in the focus order need a role appropriate for interactive content'\n        },\n        'form-field-multiple-labels': {\n          description: 'Ensures form field does not have multiple label elements',\n          help: 'Form field should not have multiple label elements'\n        },\n        'frame-tested': {\n          description: 'Ensures <iframe> and <frame> elements contain the axe-core script',\n          help: 'Frames must be tested with axe-core'\n        },\n        'frame-title-unique': {\n          description: 'Ensures <iframe> and <frame> elements contain a unique title attribute',\n          help: 'Frames must have a unique title attribute'\n        },\n        'frame-title': {\n          description: 'Ensures <iframe> and <frame> elements contain a non-empty title attribute',\n          help: 'Frames must have title attribute'\n        },\n        'heading-order': {\n          description: 'Ensures the order of headings is semantically correct',\n          help: 'Heading levels should only increase by one'\n        },\n        'hidden-content': {\n          description: 'Informs users about hidden content.',\n          help: 'Hidden content on the page cannot be analyzed'\n        },\n        'html-has-lang': {\n          description: 'Ensures every HTML document has a lang attribute',\n          help: '<html> element must have a lang attribute'\n        },\n        'html-lang-valid': {\n          description: 'Ensures the lang attribute of the <html> element has a valid value',\n          help: '<html> element must have a valid value for the lang attribute'\n        },\n        'html-xml-lang-mismatch': {\n          description: 'Ensure that HTML elements with both valid lang and xml:lang attributes agree on the base language of the page',\n          help: 'HTML elements with lang and xml:lang must have the same base language'\n        },\n        'identical-links-same-purpose': {\n          description: 'Ensure that links with the same accessible name serve a similar purpose',\n          help: 'Links with the same name have a similar purpose'\n        },\n        'image-alt': {\n          description: 'Ensures <img> elements have alternate text or a role of none or presentation',\n          help: 'Images must have alternate text'\n        },\n        'image-redundant-alt': {\n          description: 'Ensure image alternative is not repeated as text',\n          help: 'Alternative text of images should not be repeated as text'\n        },\n        'input-button-name': {\n          description: 'Ensures input buttons have discernible text',\n          help: 'Input buttons must have discernible text'\n        },\n        'input-image-alt': {\n          description: 'Ensures <input type=\"image\"> elements have alternate text',\n          help: 'Image buttons must have alternate text'\n        },\n        'label-content-name-mismatch': {\n          description: 'Ensures that elements labelled through their content must have their visible text as part of their accessible name',\n          help: 'Elements must have their visible text as part of their accessible name'\n        },\n        'label-title-only': {\n          description: 'Ensures that every form element is not solely labeled using the title or aria-describedby attributes',\n          help: 'Form elements should have a visible label'\n        },\n        label: {\n          description: 'Ensures every form element has a label',\n          help: 'Form elements must have labels'\n        },\n        'landmark-banner-is-top-level': {\n          description: 'Ensures the banner landmark is at top level',\n          help: 'Banner landmark must not be contained in another landmark'\n        },\n        'landmark-complementary-is-top-level': {\n          description: 'Ensures the complementary landmark or aside is at top level',\n          help: 'Aside must not be contained in another landmark'\n        },\n        'landmark-contentinfo-is-top-level': {\n          description: 'Ensures the contentinfo landmark is at top level',\n          help: 'Contentinfo landmark must not be contained in another landmark'\n        },\n        'landmark-main-is-top-level': {\n          description: 'Ensures the main landmark is at top level',\n          help: 'Main landmark must not be contained in another landmark'\n        },\n        'landmark-no-duplicate-banner': {\n          description: 'Ensures the document has at most one banner landmark',\n          help: 'Document must not have more than one banner landmark'\n        },\n        'landmark-no-duplicate-contentinfo': {\n          description: 'Ensures the document has at most one contentinfo landmark',\n          help: 'Document must not have more than one contentinfo landmark'\n        },\n        'landmark-no-duplicate-main': {\n          description: 'Ensures the document has at most one main landmark',\n          help: 'Document must not have more than one main landmark'\n        },\n        'landmark-one-main': {\n          description: 'Ensures the document has a main landmark',\n          help: 'Document must have one main landmark'\n        },\n        'landmark-unique': {\n          help: 'Ensures landmarks are unique',\n          description: 'Landmarks must have a unique role or role/label/title (i.e. accessible name) combination'\n        },\n        'layout-table': {\n          description: 'Ensures presentational <table> elements do not use <th>, <caption> elements or the summary attribute',\n          help: 'Layout tables must not use data table elements'\n        },\n        'link-in-text-block': {\n          description: 'Links can be distinguished without relying on color',\n          help: 'Links must be distinguished from surrounding text in a way that does not rely on color'\n        },\n        'link-name': {\n          description: 'Ensures links have discernible text',\n          help: 'Links must have discernible text'\n        },\n        list: {\n          description: 'Ensures that lists are structured correctly',\n          help: '<ul> and <ol> must only directly contain <li>, <script> or <template> elements'\n        },\n        listitem: {\n          description: 'Ensures <li> elements are used semantically',\n          help: '<li> elements must be contained in a <ul> or <ol>'\n        },\n        marquee: {\n          description: 'Ensures <marquee> elements are not used',\n          help: '<marquee> elements are deprecated and must not be used'\n        },\n        'meta-refresh': {\n          description: 'Ensures <meta http-equiv=\"refresh\"> is not used',\n          help: 'Timed refresh must not exist'\n        },\n        'meta-viewport-large': {\n          description: 'Ensures <meta name=\"viewport\"> can scale a significant amount',\n          help: 'Users should be able to zoom and scale the text up to 500%'\n        },\n        'meta-viewport': {\n          description: 'Ensures <meta name=\"viewport\"> does not disable text scaling and zooming',\n          help: 'Zooming and scaling must not be disabled'\n        },\n        'no-autoplay-audio': {\n          description: 'Ensures <video> or <audio> elements do not autoplay audio for more than 3 seconds without a control mechanism to stop or mute the audio',\n          help: '<video> or <audio> elements do not autoplay audio'\n        },\n        'object-alt': {\n          description: 'Ensures <object> elements have alternate text',\n          help: '<object> elements must have alternate text'\n        },\n        'p-as-heading': {\n          description: 'Ensure p elements are not used to style headings',\n          help: 'Bold, italic text and font-size are not used to style p elements as a heading'\n        },\n        'page-has-heading-one': {\n          description: 'Ensure that the page, or at least one of its frames contains a level-one heading',\n          help: 'Page must contain a level-one heading'\n        },\n        radiogroup: {\n          description: 'Ensures related <input type=\"radio\"> elements have a group and that the group designation is consistent',\n          help: 'Radio inputs with the same name attribute value must be part of a group'\n        },\n        region: {\n          description: 'Ensures all page content is contained by landmarks',\n          help: 'All page content must be contained by landmarks'\n        },\n        'role-img-alt': {\n          description: 'Ensures [role=\\'img\\'] elements have alternate text',\n          help: '[role=\\'img\\'] elements have an alternative text'\n        },\n        'scope-attr-valid': {\n          description: 'Ensures the scope attribute is used correctly on tables',\n          help: 'scope attribute should be used correctly'\n        },\n        'scrollable-region-focusable': {\n          description: 'Elements that have scrollable content should be accessible by keyboard',\n          help: 'Ensure that scrollable region has keyboard access'\n        },\n        'server-side-image-map': {\n          description: 'Ensures that server-side image maps are not used',\n          help: 'Server-side image maps must not be used'\n        },\n        'skip-link': {\n          description: 'Ensure all skip links have a focusable target',\n          help: 'The skip-link target should exist and be focusable'\n        },\n        'svg-img-alt': {\n          description: 'Ensures svg elements with an img, graphics-document or graphics-symbol role have an accessible text',\n          help: 'svg elements with an img role have an alternative text'\n        },\n        tabindex: {\n          description: 'Ensures tabindex attribute values are not greater than 0',\n          help: 'Elements should not have tabindex greater than zero'\n        },\n        'table-duplicate-name': {\n          description: 'Ensure that tables do not have the same summary and caption',\n          help: 'The <caption> element should not contain the same text as the summary attribute'\n        },\n        'table-fake-caption': {\n          description: 'Ensure that tables with a caption use the <caption> element.',\n          help: 'Data or header cells should not be used to give caption to a data table.'\n        },\n        'td-has-header': {\n          description: 'Ensure that each non-empty data cell in a large table has one or more table headers',\n          help: 'All non-empty td element in table larger than 3 by 3 must have an associated table header'\n        },\n        'td-headers-attr': {\n          description: 'Ensure that each cell in a table using the headers refers to another cell in that table',\n          help: 'All cells in a table element that use the headers attribute must only refer to other cells of that same table'\n        },\n        'th-has-data-cells': {\n          description: 'Ensure that each table header in a data table refers to data cells',\n          help: 'All th elements and elements with role=columnheader/rowheader must have data cells they describe'\n        },\n        'valid-lang': {\n          description: 'Ensures lang attributes have valid values',\n          help: 'lang attribute must have a valid value'\n        },\n        'video-caption': {\n          description: 'Ensures <video> elements have captions',\n          help: '<video> elements must have captions'\n        },\n        'video-description': {\n          description: 'Ensures <video> elements have audio descriptions',\n          help: '<video> elements must have an audio description track'\n        }\n      },\n      checks: {\n        accesskeys: {\n          impact: 'serious',\n          messages: {\n            pass: 'Accesskey attribute value is unique',\n            fail: 'Document has multiple elements with the same accesskey'\n          }\n        },\n        'non-empty-alt': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a non-empty alt attribute',\n            fail: 'Element has no alt attribute or the alt attribute is empty'\n          }\n        },\n        'non-empty-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has a title attribute',\n            fail: 'Element has no title attribute or the title attribute is empty'\n          }\n        },\n        'aria-label': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-label attribute exists and is not empty',\n            fail: 'aria-label attribute does not exist or is empty'\n          }\n        },\n        'aria-labelledby': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-labelledby attribute exists and references elements that are visible to screen readers',\n            fail: 'aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty'\n          }\n        },\n        'aria-allowed-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attributes are used correctly for the defined role',\n            fail: {\n              singular: 'ARIA attribute is not allowed: ${data.values}',\n              plural: 'ARIA attributes are not allowed: ${data.values}'\n            }\n          }\n        },\n        'aria-unsupported-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute is supported',\n            fail: 'ARIA attribute is not widely supported in screen readers and assistive technologies: ${data.values}'\n          }\n        },\n        'aria-allowed-role': {\n          impact: 'minor',\n          messages: {\n            pass: 'ARIA role is allowed for given element',\n            fail: {\n              singular: 'ARIA role ${data.values} is not allowed for given element',\n              plural: 'ARIA roles ${data.values} are not allowed for given element'\n            },\n            incomplete: {\n              singular: 'ARIA role ${data.values} must be removed when the element is made visible, as it is not allowed for the element',\n              plural: 'ARIA roles ${data.values} must be removed when the element is made visible, as they are not allowed for the element'\n            }\n          }\n        },\n        'implicit-role-fallback': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Element\\u2019s implicit ARIA role is an appropriate fallback',\n            fail: 'Element\\u2019s implicit ARIA role is not a good fallback for the (unsupported) role'\n          }\n        },\n        'aria-hidden-body': {\n          impact: 'critical',\n          messages: {\n            pass: 'No aria-hidden attribute is present on document body',\n            fail: 'aria-hidden=true should not be present on the document body'\n          }\n        },\n        'focusable-modal-open': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements while a modal is open',\n            incomplete: 'Check that focusable elements are not tabbable in the current state'\n          }\n        },\n        'focusable-disabled': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements contained within element',\n            fail: 'Focusable content should be disabled or be removed from the DOM'\n          }\n        },\n        'focusable-not-tabbable': {\n          impact: 'serious',\n          messages: {\n            pass: 'No focusable elements contained within element',\n            fail: 'Focusable content should have tabindex=\\'-1\\' or be removed from the DOM'\n          }\n        },\n        'no-implicit-explicit-label': {\n          impact: 'moderate',\n          messages: {\n            pass: 'There is no mismatch between a <label> and accessible name',\n            incomplete: 'Check that the <label> does not need be part of the ARIA ${data} field\\'s name'\n          }\n        },\n        'aria-required-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'All required ARIA attributes are present',\n            fail: {\n              singular: 'Required ARIA attribute not present: ${data.values}',\n              plural: 'Required ARIA attributes not present: ${data.values}'\n            }\n          }\n        },\n        'aria-required-children': {\n          impact: 'critical',\n          messages: {\n            pass: 'Required ARIA children are present',\n            fail: {\n              singular: 'Required ARIA child role not present: ${data.values}',\n              plural: 'Required ARIA children role not present: ${data.values}'\n            },\n            incomplete: {\n              singular: 'Expecting ARIA child role to be added: ${data.values}',\n              plural: 'Expecting ARIA children role to be added: ${data.values}'\n            }\n          }\n        },\n        'aria-required-parent': {\n          impact: 'critical',\n          messages: {\n            pass: 'Required ARIA parent role present',\n            fail: {\n              singular: 'Required ARIA parent role not present: ${data.values}',\n              plural: 'Required ARIA parents role not present: ${data.values}'\n            }\n          }\n        },\n        'aria-roledescription': {\n          impact: 'serious',\n          messages: {\n            pass: 'aria-roledescription used on a supported semantic role',\n            incomplete: 'Check that the aria-roledescription is announced by supported screen readers',\n            fail: 'Give the element a role that supports aria-roledescription'\n          }\n        },\n        fallbackrole: {\n          impact: 'serious',\n          messages: {\n            pass: 'Only one role value used',\n            fail: 'Use only one role value, since fallback roles are not supported in older browsers'\n          }\n        },\n        invalidrole: {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA role is valid',\n            fail: {\n              singular: 'Role must be one of the valid ARIA roles: ${data.values}',\n              plural: 'Roles must be one of the valid ARIA roles: ${data.values}'\n            }\n          }\n        },\n        abstractrole: {\n          impact: 'serious',\n          messages: {\n            pass: 'Abstract roles are not used',\n            fail: {\n              singular: 'Abstract role cannot be directly used: ${data.values}',\n              plural: 'Abstract roles cannot be directly used: ${data.values}'\n            }\n          }\n        },\n        unsupportedrole: {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA role is supported',\n            fail: 'The role used is not widely supported in screen readers and assistive technologies: ${data.values}'\n          }\n        },\n        'has-visible-text': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has text that is visible to screen readers',\n            fail: 'Element does not have text that is visible to screen readers'\n          }\n        },\n        'aria-valid-attr-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute values are valid',\n            fail: {\n              singular: 'Invalid ARIA attribute value: ${data.values}',\n              plural: 'Invalid ARIA attribute values: ${data.values}'\n            },\n            incomplete: {\n              noId: 'ARIA attribute element ID does not exist on the page: ${data.needsReview}',\n              ariaCurrent: 'ARIA attribute value is invalid and will be treated as \"aria-current=true\": ${data.needsReview}'\n            }\n          }\n        },\n        'aria-errormessage': {\n          impact: 'critical',\n          messages: {\n            pass: 'Uses a supported aria-errormessage technique',\n            fail: {\n              singular: 'aria-errormessage value `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)',\n              plural: 'aria-errormessage values `${data.values}` must use a technique to announce the message (e.g., aria-live, aria-describedby, role=alert, etc.)'\n            }\n          }\n        },\n        'aria-valid-attr': {\n          impact: 'critical',\n          messages: {\n            pass: 'ARIA attribute name is valid',\n            fail: {\n              singular: 'Invalid ARIA attribute name: ${data.values}',\n              plural: 'Invalid ARIA attribute names: ${data.values}'\n            }\n          }\n        },\n        caption: {\n          impact: 'critical',\n          messages: {\n            pass: 'The multimedia element has a captions track',\n            incomplete: 'Check that captions is available for the element'\n          }\n        },\n        'autocomplete-valid': {\n          impact: 'serious',\n          messages: {\n            pass: 'the autocomplete attribute is correctly formatted',\n            fail: 'the autocomplete attribute is incorrectly formatted'\n          }\n        },\n        'autocomplete-appropriate': {\n          impact: 'serious',\n          messages: {\n            pass: 'the autocomplete value is on an appropriate element',\n            fail: 'the autocomplete value is inappropriate for this type of input'\n          }\n        },\n        'avoid-inline-spacing': {\n          impact: 'serious',\n          messages: {\n            pass: 'No inline styles with \\'!important\\' that affect text spacing has been specified',\n            fail: {\n              singular: 'Remove \\'!important\\' from inline style ${data.values}, as overriding this is not supported by most browsers',\n              plural: 'Remove \\'!important\\' from inline styles ${data.values}, as overriding this is not supported by most browsers'\n            }\n          }\n        },\n        'is-on-screen': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element is not visible',\n            fail: 'Element is visible'\n          }\n        },\n        'button-has-visible-text': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has inner text that is visible to screen readers',\n            fail: 'Element does not have inner text that is visible to screen readers'\n          }\n        },\n        'role-presentation': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element\\'s default semantics were overriden with role=\"presentation\"',\n            fail: 'Element\\'s default semantics were not overridden with role=\"presentation\"'\n          }\n        },\n        'role-none': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element\\'s default semantics were overriden with role=\"none\"',\n            fail: 'Element\\'s default semantics were not overridden with role=\"none\"'\n          }\n        },\n        'internal-link-present': {\n          impact: 'serious',\n          messages: {\n            pass: 'Valid skip link found',\n            fail: 'No valid skip link found'\n          }\n        },\n        'header-present': {\n          impact: 'serious',\n          messages: {\n            pass: 'Page has a heading',\n            fail: 'Page does not have a heading'\n          }\n        },\n        landmark: {\n          impact: 'serious',\n          messages: {\n            pass: 'Page has a landmark region',\n            fail: 'Page does not have a landmark region'\n          }\n        },\n        'group-labelledby': {\n          impact: 'critical',\n          messages: {\n            pass: 'Elements with the name \"${data.name}\" have both a shared label, and a unique label, referenced through aria-labelledby',\n            fail: {\n              default: 'Elements with the name \"${data.name}\" do not all have both a shared label, and a unique label referenced through aria-labelledby',\n              'no-shared-label': 'Elements with the name \"${data.name}\" do not all have a shared label referenced through aria-labelledby',\n              'no-unique-label': 'Elements with the name \"${data.name}\" do not all have a unique label referenced through aria-labelledby'\n            }\n          }\n        },\n        fieldset: {\n          impact: 'critical',\n          messages: {\n            pass: 'Element is contained in a fieldset',\n            fail: {\n              default: 'Element does not have a containing fieldset or ARIA group',\n              'no-legend': 'Fieldset does not have a legend as its first child',\n              'empty-legend': 'Legend does not have text that is visible to screen readers',\n              'mixed-inputs': 'Fieldset contains unrelated inputs',\n              'no-group-label': 'ARIA group does not have aria-label or aria-labelledby',\n              'group-mixed-inputs': 'ARIA group contains unrelated inputs'\n            }\n          }\n        },\n        'color-contrast': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element has sufficient color contrast of ${data.contrastRatio}',\n            fail: 'Element has insufficient color contrast of ${data.contrastRatio} (foreground color: ${data.fgColor}, background color: ${data.bgColor}, font size: ${data.fontSize}, font weight: ${data.fontWeight}). Expected contrast ratio of ${data.expectedContrastRatio}',\n            incomplete: {\n              default: 'Unable to determine contrast ratio',\n              bgImage: 'Element\\'s background color could not be determined due to a background image',\n              bgGradient: 'Element\\'s background color could not be determined due to a background gradient',\n              imgNode: 'Element\\'s background color could not be determined because element contains an image node',\n              bgOverlap: 'Element\\'s background color could not be determined because it is overlapped by another element',\n              fgAlpha: 'Element\\'s foreground color could not be determined because of alpha transparency',\n              elmPartiallyObscured: 'Element\\'s background color could not be determined because it\\'s partially obscured by another element',\n              elmPartiallyObscuring: 'Element\\'s background color could not be determined because it partially overlaps other elements',\n              outsideViewport: 'Element\\'s background color could not be determined because it\\'s outside the viewport',\n              equalRatio: 'Element has a 1:1 contrast ratio with the background',\n              shortTextContent: 'Element content is too short to determine if it is actual text content',\n              nonBmp: 'Element content contains only non-text characters'\n            }\n          }\n        },\n        'css-orientation-lock': {\n          impact: 'serious',\n          messages: {\n            pass: 'Display is operable, and orientation lock does not exist',\n            fail: 'CSS Orientation lock is applied, and makes display inoperable',\n            incomplete: 'CSS Orientation lock cannot be determined'\n          }\n        },\n        'structured-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'When not empty, element has both <dt> and <dd> elements',\n            fail: 'When not empty, element does not have at least one <dt> element followed by at least one <dd> element'\n          }\n        },\n        'only-dlitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'List element only has direct children that are allowed inside <dt> or <dd> elements',\n            fail: 'List element has direct children that are not allowed inside <dt> or <dd> elements'\n          }\n        },\n        dlitem: {\n          impact: 'serious',\n          messages: {\n            pass: 'Description list item has a <dl> parent element',\n            fail: 'Description list item does not have a <dl> parent element'\n          }\n        },\n        'doc-has-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Document has a non-empty <title> element',\n            fail: 'Document does not have a non-empty <title> element'\n          }\n        },\n        'duplicate-id-active': {\n          impact: 'serious',\n          messages: {\n            pass: 'Document has no active elements that share the same id attribute',\n            fail: 'Document has active elements with the same id attribute: ${data}'\n          }\n        },\n        'duplicate-id-aria': {\n          impact: 'critical',\n          messages: {\n            pass: 'Document has no elements referenced with ARIA or labels that share the same id attribute',\n            fail: 'Document has multiple elements referenced with ARIA with the same id attribute: ${data}'\n          }\n        },\n        'duplicate-id': {\n          impact: 'minor',\n          messages: {\n            pass: 'Document has no static elements that share the same id attribute',\n            fail: 'Document has multiple static elements with the same id attribute'\n          }\n        },\n        'has-widget-role': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has a widget role.',\n            fail: 'Element does not have a widget role.'\n          }\n        },\n        'valid-scrollable-semantics': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element has valid semantics for an element in the focus order.',\n            fail: 'Element has invalid semantics for an element in the focus order.'\n          }\n        },\n        'multiple-label': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Form field does not have multiple label elements',\n            incomplete: 'Multiple label elements is not widely supported in assistive technologies. Ensure the first label contains all necessary information.'\n          }\n        },\n        'frame-tested': {\n          impact: 'critical',\n          messages: {\n            pass: 'The iframe was tested with axe-core',\n            fail: 'The iframe could not be tested with axe-core',\n            incomplete: 'The iframe still has to be tested with axe-core'\n          }\n        },\n        'unique-frame-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element\\'s title attribute is unique',\n            fail: 'Element\\'s title attribute is not unique'\n          }\n        },\n        'heading-order': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Heading order valid',\n            fail: 'Heading order invalid'\n          }\n        },\n        'hidden-content': {\n          impact: 'minor',\n          messages: {\n            pass: 'All content on the page has been analyzed.',\n            fail: 'There were problems analyzing the content on this page.',\n            incomplete: 'There is hidden content on the page that was not analyzed. You will need to trigger the display of this content in order to analyze it.'\n          }\n        },\n        'has-lang': {\n          impact: 'serious',\n          messages: {\n            pass: 'The <html> element has a lang attribute',\n            fail: {\n              noXHTML: 'The xml:lang attribute is not valid on HTML pages, use the lang attribute.',\n              noLang: 'The <html> element does not have a lang attribute'\n            }\n          }\n        },\n        'valid-lang': {\n          impact: 'serious',\n          messages: {\n            pass: 'Value of lang attribute is included in the list of valid languages',\n            fail: 'Value of lang attribute not included in the list of valid languages'\n          }\n        },\n        'xml-lang-mismatch': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Lang and xml:lang attributes have the same base language',\n            fail: 'Lang and xml:lang attributes do not have the same base language'\n          }\n        },\n        'identical-links-same-purpose': {\n          impact: 'minor',\n          messages: {\n            pass: 'There are no other links with the same name, that go to a different URL',\n            incomplete: 'Check that links have the same purpose, or are intentionally ambiguous.'\n          }\n        },\n        'has-alt': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has an alt attribute',\n            fail: 'Element does not have an alt attribute'\n          }\n        },\n        'alt-space-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a valid alt attribute value',\n            fail: 'Element has an alt attribute containing only a space character, which is not ignored by all screen readers'\n          }\n        },\n        'duplicate-img-label': {\n          impact: 'minor',\n          messages: {\n            pass: 'Element does not duplicate existing text in <img> alt text',\n            fail: 'Element contains <img> element with alt text that duplicates existing text'\n          }\n        },\n        'non-empty-if-present': {\n          impact: 'critical',\n          messages: {\n            pass: {\n              default: 'Element does not have a value attribute',\n              'has-label': 'Element has a non-empty value attribute'\n            },\n            fail: 'Element has a value attribute and the value attribute is empty'\n          }\n        },\n        'non-empty-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Element has a non-empty value attribute',\n            fail: 'Element has no value attribute or the value attribute is empty'\n          }\n        },\n        'label-content-name-mismatch': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element contains visible text as part of it\\'s accessible name',\n            fail: 'Text inside the element is not included in the accessible name'\n          }\n        },\n        'title-only': {\n          impact: 'serious',\n          messages: {\n            pass: 'Form element does not solely use title attribute for its label',\n            fail: 'Only title used to generate label for form element'\n          }\n        },\n        'implicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Form element has an implicit (wrapped) <label>',\n            fail: 'Form element does not have an implicit (wrapped) <label>'\n          }\n        },\n        'explicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Form element has an explicit <label>',\n            fail: 'Form element does not have an explicit <label>'\n          }\n        },\n        'help-same-as-label': {\n          impact: 'minor',\n          messages: {\n            pass: 'Help text (title or aria-describedby) does not duplicate label text',\n            fail: 'Help text (title or aria-describedby) text is the same as the label text'\n          }\n        },\n        'hidden-explicit-label': {\n          impact: 'critical',\n          messages: {\n            pass: 'Form element has a visible explicit <label>',\n            fail: 'Form element has explicit <label> that is hidden'\n          }\n        },\n        'landmark-is-top-level': {\n          impact: 'moderate',\n          messages: {\n            pass: 'The ${data.role} landmark is at the top level.',\n            fail: 'The ${data.role} landmark is contained in another landmark.'\n          }\n        },\n        'page-no-duplicate-banner': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one banner landmark',\n            fail: 'Document has more than one banner landmark'\n          }\n        },\n        'page-no-duplicate-contentinfo': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one contentinfo landmark',\n            fail: 'Document has more than one contentinfo landmark'\n          }\n        },\n        'page-no-duplicate-main': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document does not have more than one main landmark',\n            fail: 'Document has more than one main landmark'\n          }\n        },\n        'page-has-main': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Document has at least one main landmark',\n            fail: 'Document does not have a main landmark'\n          }\n        },\n        'landmark-is-unique': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Landmarks must have a unique role or role/label/title (i.e. accessible name) combination',\n            fail: 'The landmark must have a unique aria-label, aria-labelledby, or title to make landmarks distinguishable'\n          }\n        },\n        'has-th': {\n          impact: 'serious',\n          messages: {\n            pass: 'Layout table does not use <th> elements',\n            fail: 'Layout table uses <th> elements'\n          }\n        },\n        'has-caption': {\n          impact: 'serious',\n          messages: {\n            pass: 'Layout table does not use <caption> element',\n            fail: 'Layout table uses <caption> element'\n          }\n        },\n        'has-summary': {\n          impact: 'serious',\n          messages: {\n            pass: 'Layout table does not use summary attribute',\n            fail: 'Layout table uses summary attribute'\n          }\n        },\n        'link-in-text-block': {\n          impact: 'serious',\n          messages: {\n            pass: 'Links can be distinguished from surrounding text in some way other than by color',\n            fail: 'Links need to be distinguished from surrounding text in some way other than by color',\n            incomplete: {\n              default: 'Unable to determine contrast ratio',\n              bgContrast: 'Element\\'s contrast ratio could not be determined. Check for a distinct hover/focus style',\n              bgImage: 'Element\\'s contrast ratio could not be determined due to a background image',\n              bgGradient: 'Element\\'s contrast ratio could not be determined due to a background gradient',\n              imgNode: 'Element\\'s contrast ratio could not be determined because element contains an image node',\n              bgOverlap: 'Element\\'s contrast ratio could not be determined because of element overlap'\n            }\n          }\n        },\n        'focusable-no-name': {\n          impact: 'serious',\n          messages: {\n            pass: 'Element is not in tab order or has accessible text',\n            fail: 'Element is in tab order and does not have accessible text'\n          }\n        },\n        'only-listitems': {\n          impact: 'serious',\n          messages: {\n            pass: 'List element only has direct children that are allowed inside <li> elements',\n            fail: {\n              default: 'List element has direct children that are not allowed inside <li> elements',\n              roleNotValid: 'List element has direct children with a role that is not allowed: ${data.roles}'\n            }\n          }\n        },\n        listitem: {\n          impact: 'serious',\n          messages: {\n            pass: 'List item has a <ul>, <ol> or role=\"list\" parent element',\n            fail: {\n              default: 'List item does not have a <ul>, <ol> parent element',\n              roleNotValid: 'List item does not have a <ul>, <ol> parent element without a role, or a role=\"list\"'\n            }\n          }\n        },\n        'meta-refresh': {\n          impact: 'critical',\n          messages: {\n            pass: '<meta> tag does not immediately refresh the page',\n            fail: '<meta> tag forces timed refresh of page'\n          }\n        },\n        'meta-viewport-large': {\n          impact: 'minor',\n          messages: {\n            pass: '<meta> tag does not prevent significant zooming on mobile devices',\n            fail: '<meta> tag limits zooming on mobile devices'\n          }\n        },\n        'meta-viewport': {\n          impact: 'critical',\n          messages: {\n            pass: '<meta> tag does not disable zooming on mobile devices',\n            fail: '${data} on <meta> tag disables zooming on mobile devices'\n          }\n        },\n        'no-autoplay-audio': {\n          impact: 'moderate',\n          messages: {\n            pass: '<video> or <audio> does not output audio for more than allowed duration or has controls mechanism',\n            fail: '<video> or <audio> outputs audio for more than allowed duration and does not have a controls mechanism',\n            incomplete: 'Check that the <video> or <audio> does not output audio for more than allowed duration or provides a controls mechanism'\n          }\n        },\n        'p-as-heading': {\n          impact: 'serious',\n          messages: {\n            pass: '<p> elements are not styled as headings',\n            fail: 'Heading elements should be used instead of styled p elements'\n          }\n        },\n        'page-has-heading-one': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Page has at least one level-one heading',\n            fail: 'Page must have a level-one heading'\n          }\n        },\n        region: {\n          impact: 'moderate',\n          messages: {\n            pass: 'All page content is contained by landmarks',\n            fail: 'Some page content is not contained by landmarks'\n          }\n        },\n        'html5-scope': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Scope attribute is only used on table header elements (<th>)',\n            fail: 'In HTML 5, scope attributes may only be used on table header elements (<th>)'\n          }\n        },\n        'scope-value': {\n          impact: 'critical',\n          messages: {\n            pass: 'Scope attribute is used correctly',\n            fail: 'The value of the scope attribute may only be \\'row\\' or \\'col\\''\n          }\n        },\n        'focusable-content': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Element contains focusable elements',\n            fail: 'Element should have focusable content'\n          }\n        },\n        'focusable-element': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Element is focusable',\n            fail: 'Element should be focusable'\n          }\n        },\n        exists: {\n          impact: 'minor',\n          messages: {\n            pass: 'Element does not exist',\n            incomplete: 'Element exists'\n          }\n        },\n        'skip-link': {\n          impact: 'moderate',\n          messages: {\n            pass: 'Skip link target exists',\n            incomplete: 'Skip link target should become visible on activation',\n            fail: 'No skip link target'\n          }\n        },\n        'svg-non-empty-title': {\n          impact: 'serious',\n          messages: {\n            pass: 'element has a child that is a title',\n            fail: 'element has no child that is a title'\n          }\n        },\n        tabindex: {\n          impact: 'serious',\n          messages: {\n            pass: 'Element does not have a tabindex greater than 0',\n            fail: 'Element has a tabindex greater than 0'\n          }\n        },\n        'same-caption-summary': {\n          impact: 'minor',\n          messages: {\n            pass: 'Content of summary attribute and <caption> are not duplicated',\n            fail: 'Content of summary attribute and <caption> element are identical'\n          }\n        },\n        'caption-faked': {\n          impact: 'serious',\n          messages: {\n            pass: 'The first row of a table is not used as a caption',\n            fail: 'The first child of the table should be a caption instead of a table cell'\n          }\n        },\n        'td-has-header': {\n          impact: 'critical',\n          messages: {\n            pass: 'All non-empty data cells have table headers',\n            fail: 'Some non-empty data cells do not have table headers'\n          }\n        },\n        'td-headers-attr': {\n          impact: 'serious',\n          messages: {\n            pass: 'The headers attribute is exclusively used to refer to other cells in the table',\n            incomplete: 'The headers attribute is empty',\n            fail: 'The headers attribute is not exclusively used to refer to other cells in the table'\n          }\n        },\n        'th-has-data-cells': {\n          impact: 'serious',\n          messages: {\n            pass: 'All table header cells refer to data cells',\n            fail: 'Not all table header cells refer to data cells',\n            incomplete: 'Table data cells are missing or empty'\n          }\n        },\n        description: {\n          impact: 'critical',\n          messages: {\n            pass: 'The multimedia element has an audio description track',\n            incomplete: 'Check that audio description is available for the element'\n          }\n        }\n      },\n      failureSummaries: {\n        any: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix any of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        },\n        none: {\n          failureMessage: function anonymous(it) {\n            var out = 'Fix all of the following:';\n            var arr1 = it;\n            if (arr1) {\n              var value, i1 = -1, l1 = arr1.length - 1;\n              while (i1 < l1) {\n                value = arr1[i1 += 1];\n                out += '\\n  ' + value.split('\\n').join('\\n  ');\n              }\n            }\n            return out;\n          }\n        }\n      },\n      incompleteFallbackMessage: {}\n    },\n    rules: [ {\n      id: 'accesskeys',\n      selector: '[accesskey]',\n      excludeHidden: false,\n      tags: [ 'best-practice', 'cat.keyboard' ],\n      all: [],\n      any: [],\n      none: [ 'accesskeys' ]\n    }, {\n      id: 'area-alt',\n      selector: 'map area[href]',\n      excludeHidden: false,\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'wcag244', 'wcag412', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-alt', 'non-empty-title', 'aria-label', 'aria-labelledby' ],\n      none: []\n    }, {\n      id: 'aria-allowed-attr',\n      matches: function matches(node, virtualNode, context) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = axe.utils.getNodeAttributes(node);\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ 'aria-allowed-attr' ],\n      none: [ 'aria-unsupported-attr' ]\n    }, {\n      id: 'aria-allowed-role',\n      excludeHidden: false,\n      selector: '[role]',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.aria.getRole(node, {\n          noImplicit: true,\n          dpub: true,\n          fallback: true\n        }) !== null;\n      },\n      tags: [ 'cat.aria', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          allowImplicit: true,\n          ignoredTags: []\n        },\n        id: 'aria-allowed-role'\n      } ],\n      none: []\n    }, {\n      id: 'aria-dpub-role-fallback',\n      selector: '[role]',\n      matches: function matches(node, virtualNode, context) {\n        var role = node.getAttribute('role');\n        return [ 'doc-backlink', 'doc-biblioentry', 'doc-biblioref', 'doc-cover', 'doc-endnote', 'doc-glossref', 'doc-noteref' ].includes(role);\n      },\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131', 'deprecated' ],\n      enabled: false,\n      all: [ 'implicit-role-fallback' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-hidden-body',\n      selector: 'body',\n      excludeHidden: false,\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ 'aria-hidden-body' ],\n      none: []\n    }, {\n      id: 'aria-hidden-focus',\n      selector: '[aria-hidden=\"true\"]',\n      matches: function matches(node, virtualNode, context) {\n        var getComposedParent = axe.commons.dom.getComposedParent;\n        function shouldMatchElement(el) {\n          if (!el) {\n            return true;\n          }\n          if (el.getAttribute('aria-hidden') === 'true') {\n            return false;\n          }\n          return shouldMatchElement(getComposedParent(el));\n        }\n        return shouldMatchElement(getComposedParent(node));\n      },\n      excludeHidden: false,\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'wcag131' ],\n      all: [ 'focusable-modal-open', 'focusable-disabled', 'focusable-not-tabbable' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-input-field-name',\n      selector: '[role=\"combobox\"], [role=\"listbox\"], [role=\"searchbox\"], [role=\"slider\"], [role=\"spinbutton\"], [role=\"textbox\"]',\n      matches: function matches(node, virtualNode, context) {\n        var aria = axe.commons.aria;\n        var nodeName = node.nodeName.toUpperCase();\n        var role = aria.getRole(node, {\n          noImplicit: true\n        });\n        if (nodeName === 'AREA' && !!node.getAttribute('href')) {\n          return false;\n        }\n        if ([ 'INPUT', 'SELECT', 'TEXTAREA' ].includes(nodeName)) {\n          return false;\n        }\n        if (nodeName === 'IMG' || role === 'img' && nodeName !== 'SVG') {\n          return false;\n        }\n        if (nodeName === 'BUTTON' || role === 'button') {\n          return false;\n        }\n        if (role === 'combobox' && axe.utils.querySelectorAll(virtualNode, 'input:not([type=\"hidden\"])').length) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: [ 'no-implicit-explicit-label' ]\n    }, {\n      id: 'aria-required-attr',\n      selector: '[role]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ 'aria-required-attr' ],\n      none: []\n    }, {\n      id: 'aria-required-children',\n      selector: '[role]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ {\n        options: {\n          reviewEmpty: [ 'doc-bibliography', 'doc-endnotes', 'grid', 'list', 'listbox', 'table', 'tablist', 'tree', 'treegrid', 'rowgroup' ]\n        },\n        id: 'aria-required-children'\n      } ],\n      none: []\n    }, {\n      id: 'aria-required-parent',\n      selector: '[role]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'aria-required-parent' ],\n      none: []\n    }, {\n      id: 'aria-roledescription',\n      selector: '[aria-roledescription]',\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ {\n        options: {\n          supportedRoles: [ 'button', 'img', 'checkbox', 'radio', 'combobox', 'menuitemcheckbox', 'menuitemradio' ]\n        },\n        id: 'aria-roledescription'\n      } ],\n      none: []\n    }, {\n      id: 'aria-roles',\n      selector: '[role]',\n      matches: function matches(node, virtualNode, context) {\n        if (!virtualNode.hasAttr('role')) {\n          return false;\n        }\n        if (!virtualNode.attr('role').trim()) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [],\n      none: [ 'fallbackrole', 'invalidrole', 'abstractrole', 'unsupportedrole' ]\n    }, {\n      id: 'aria-toggle-field-name',\n      selector: '[role=\"checkbox\"], [role=\"menuitemcheckbox\"], [role=\"menuitemradio\"], [role=\"radio\"], [role=\"switch\"]',\n      matches: function matches(node, virtualNode, context) {\n        var aria = axe.commons.aria;\n        var nodeName = node.nodeName.toUpperCase();\n        var role = aria.getRole(node, {\n          noImplicit: true\n        });\n        if (nodeName === 'AREA' && !!node.getAttribute('href')) {\n          return false;\n        }\n        if ([ 'INPUT', 'SELECT', 'TEXTAREA' ].includes(nodeName)) {\n          return false;\n        }\n        if (nodeName === 'IMG' || role === 'img' && nodeName !== 'SVG') {\n          return false;\n        }\n        if (nodeName === 'BUTTON' || role === 'button') {\n          return false;\n        }\n        if (role === 'combobox' && axe.utils.querySelectorAll(virtualNode, 'input:not([type=\"hidden\"])').length) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'non-empty-title', 'has-visible-text' ],\n      none: [ 'no-implicit-explicit-label' ]\n    }, {\n      id: 'aria-valid-attr-value',\n      matches: function matches(node, virtualNode, context) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = axe.utils.getNodeAttributes(node);\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [ {\n        options: [],\n        id: 'aria-valid-attr-value'\n      }, 'aria-errormessage' ],\n      any: [],\n      none: []\n    }, {\n      id: 'aria-valid-attr',\n      matches: function matches(node, virtualNode, context) {\n        var aria = /^aria-/;\n        if (node.hasAttributes()) {\n          var attrs = axe.utils.getNodeAttributes(node);\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            if (aria.test(attrs[i].name)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      },\n      tags: [ 'cat.aria', 'wcag2a', 'wcag412' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'aria-valid-attr'\n      } ],\n      none: []\n    }, {\n      id: 'audio-caption',\n      selector: 'audio',\n      enabled: false,\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag121', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    }, {\n      id: 'autocomplete-valid',\n      matches: function matches(node, virtualNode, context) {\n        var _axe$commons = axe.commons, text = _axe$commons.text, aria = _axe$commons.aria, dom = _axe$commons.dom;\n        var autocomplete = virtualNode.attr('autocomplete');\n        if (!autocomplete || text.sanitize(autocomplete) === '') {\n          return false;\n        }\n        var nodeName = virtualNode.props.nodeName;\n        if ([ 'textarea', 'input', 'select' ].includes(nodeName) === false) {\n          return false;\n        }\n        var excludedInputTypes = [ 'submit', 'reset', 'button', 'hidden' ];\n        if (nodeName === 'input' && excludedInputTypes.includes(virtualNode.props.type)) {\n          return false;\n        }\n        var ariaDisabled = virtualNode.attr('aria-disabled') || 'false';\n        if (virtualNode.hasAttr('disabled') || ariaDisabled.toLowerCase() === 'true') {\n          return false;\n        }\n        var role = virtualNode.attr('role');\n        var tabIndex = virtualNode.attr('tabindex');\n        if (tabIndex === '-1' && role) {\n          var roleDef = aria.lookupTable.role[role];\n          if (roleDef === undefined || roleDef.type !== 'widget') {\n            return false;\n          }\n        }\n        if (tabIndex === '-1' && virtualNode.actualNode && !dom.isVisible(virtualNode.actualNode, false) && !dom.isVisible(virtualNode.actualNode, true)) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'cat.forms', 'wcag21aa', 'wcag135' ],\n      all: [ 'autocomplete-valid', 'autocomplete-appropriate' ],\n      any: [],\n      none: []\n    }, {\n      id: 'avoid-inline-spacing',\n      selector: '[style]',\n      tags: [ 'wcag21aa', 'wcag1412' ],\n      all: [ 'avoid-inline-spacing' ],\n      any: [],\n      none: []\n    }, {\n      id: 'blink',\n      selector: 'blink',\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag222', 'section508', 'section508.22.j' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'button-name',\n      selector: 'button, [role=\"button\"]:not(input)',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'button-has-visible-text', 'aria-label', 'aria-labelledby', 'role-presentation', 'role-none', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'bypass',\n      selector: 'html',\n      pageLevel: true,\n      matches: function matches(node, virtualNode, context) {\n        return !!node.querySelector('a[href]');\n      },\n      tags: [ 'cat.keyboard', 'wcag2a', 'wcag241', 'section508', 'section508.22.o' ],\n      all: [],\n      any: [ 'internal-link-present', 'header-present', 'landmark' ],\n      none: []\n    }, {\n      id: 'checkboxgroup',\n      selector: 'input[type=checkbox][name]',\n      tags: [ 'cat.forms', 'best-practice', 'deprecated' ],\n      enabled: false,\n      all: [],\n      any: [ 'group-labelledby', 'fieldset' ],\n      none: []\n    }, {\n      id: 'color-contrast',\n      matches: function matches(node, virtualNode, context) {\n        var nodeName = node.nodeName.toUpperCase();\n        var nodeType = node.type;\n        if (node.getAttribute('aria-disabled') === 'true' || axe.commons.dom.findUpVirtual(virtualNode, '[aria-disabled=\"true\"]')) {\n          return false;\n        }\n        var formElements = [ 'INPUT', 'SELECT', 'TEXTAREA' ];\n        if (formElements.includes(nodeName)) {\n          var style = window.getComputedStyle(node);\n          var textIndent = parseInt(style.getPropertyValue('text-indent'), 10);\n          if (textIndent) {\n            var rect = node.getBoundingClientRect();\n            rect = {\n              top: rect.top,\n              bottom: rect.bottom,\n              left: rect.left + textIndent,\n              right: rect.right + textIndent\n            };\n            if (!axe.commons.dom.visuallyOverlaps(rect, node)) {\n              return false;\n            }\n          }\n        }\n        if (nodeName === 'INPUT') {\n          return [ 'hidden', 'range', 'color', 'checkbox', 'radio', 'image' ].indexOf(nodeType) === -1 && !node.disabled;\n        }\n        if (nodeName === 'SELECT') {\n          return !!node.options.length && !node.disabled;\n        }\n        if (nodeName === 'TEXTAREA') {\n          return !node.disabled;\n        }\n        if (nodeName === 'OPTION') {\n          return false;\n        }\n        if (nodeName === 'BUTTON' && node.disabled || axe.commons.dom.findUpVirtual(virtualNode, 'button[disabled]')) {\n          return false;\n        }\n        if (nodeName === 'FIELDSET' && node.disabled || axe.commons.dom.findUpVirtual(virtualNode, 'fieldset[disabled]')) {\n          return false;\n        }\n        var nodeParentLabel = axe.commons.dom.findUpVirtual(virtualNode, 'label');\n        if (nodeName === 'LABEL' || nodeParentLabel) {\n          var relevantNode = node;\n          var relevantVirtualNode = virtualNode;\n          if (nodeParentLabel) {\n            relevantNode = nodeParentLabel;\n            relevantVirtualNode = axe.utils.getNodeFromTree(nodeParentLabel);\n          }\n          var doc = axe.commons.dom.getRootNode(relevantNode);\n          var candidate = relevantNode.htmlFor && doc.getElementById(relevantNode.htmlFor);\n          var candidateVirtualNode = axe.utils.getNodeFromTree(candidate);\n          if (candidate && (candidate.disabled || candidate.getAttribute('aria-disabled') === 'true' || axe.commons.dom.findUpVirtual(candidateVirtualNode, '[aria-disabled=\"true\"]'))) {\n            return false;\n          }\n          candidate = axe.utils.querySelectorAll(relevantVirtualNode, 'input:not([type=\"hidden\"]):not([type=\"image\"])' + ':not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');\n          if (candidate.length && candidate[0].actualNode.disabled) {\n            return false;\n          }\n        }\n        if (node.getAttribute('id')) {\n          var id = axe.utils.escapeSelector(node.getAttribute('id'));\n          var _doc = axe.commons.dom.getRootNode(node);\n          var _candidate = _doc.querySelector('[aria-labelledby~=' + id + ']');\n          if (_candidate && _candidate.disabled) {\n            return false;\n          }\n        }\n        var visibleText = axe.commons.text.visibleVirtual(virtualNode, false, true);\n        if (visibleText === '' || axe.commons.text.removeUnicode(visibleText, {\n          emoji: true,\n          nonBmp: false,\n          punctuations: true\n        }) === '') {\n          return false;\n        }\n        var range = document.createRange();\n        var childNodes = virtualNode.children;\n        var length = childNodes.length;\n        var child = null;\n        var index = 0;\n        for (index = 0; index < length; index++) {\n          child = childNodes[index];\n          if (child.actualNode.nodeType === 3 && axe.commons.text.sanitize(child.actualNode.nodeValue) !== '') {\n            range.selectNodeContents(child.actualNode);\n          }\n        }\n        var rects = range.getClientRects();\n        length = rects.length;\n        for (index = 0; index < length; index++) {\n          if (axe.commons.dom.visuallyOverlaps(rects[index], node)) {\n            return true;\n          }\n        }\n        return false;\n      },\n      excludeHidden: false,\n      tags: [ 'cat.color', 'wcag2aa', 'wcag143' ],\n      all: [],\n      any: [ {\n        options: {\n          noScroll: false,\n          ignoreUnicode: true,\n          ignoreLength: false\n        },\n        id: 'color-contrast'\n      } ],\n      none: []\n    }, {\n      id: 'css-orientation-lock',\n      selector: 'html',\n      tags: [ 'cat.structure', 'wcag134', 'wcag21aa', 'experimental' ],\n      all: [ {\n        options: {\n          degreeThreshold: 2\n        },\n        id: 'css-orientation-lock'\n      } ],\n      any: [],\n      none: [],\n      preload: true\n    }, {\n      id: 'definition-list',\n      selector: 'dl',\n      matches: function matches(node, virtualNode, context) {\n        return !node.getAttribute('role');\n      },\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [],\n      none: [ 'structured-dlitems', 'only-dlitems' ]\n    }, {\n      id: 'dlitem',\n      selector: 'dd, dt',\n      matches: function matches(node, virtualNode, context) {\n        return !node.getAttribute('role');\n      },\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'dlitem' ],\n      none: []\n    }, {\n      id: 'document-title',\n      selector: 'html',\n      matches: function matches(node, virtualNode, context) {\n        return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;\n      },\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag242' ],\n      all: [],\n      any: [ 'doc-has-title' ],\n      none: []\n    }, {\n      id: 'duplicate-id-active',\n      selector: '[id]',\n      matches: function matches(node, virtualNode, context) {\n        var _axe$commons2 = axe.commons, dom = _axe$commons2.dom, aria = _axe$commons2.aria;\n        var id = node.getAttribute('id').trim();\n        var idSelector = '*[id=\"'.concat(axe.utils.escapeSelector(id), '\"]');\n        var idMatchingElms = Array.from(dom.getRootNode(node).querySelectorAll(idSelector));\n        return !aria.isAccessibleRef(node) && idMatchingElms.some(dom.isFocusable);\n      },\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag411' ],\n      all: [],\n      any: [ 'duplicate-id-active' ],\n      none: []\n    }, {\n      id: 'duplicate-id-aria',\n      selector: '[id]',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.aria.isAccessibleRef(node);\n      },\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag411' ],\n      all: [],\n      any: [ 'duplicate-id-aria' ],\n      none: []\n    }, {\n      id: 'duplicate-id',\n      selector: '[id]',\n      matches: function matches(node, virtualNode, context) {\n        var _axe$commons3 = axe.commons, dom = _axe$commons3.dom, aria = _axe$commons3.aria;\n        var id = node.getAttribute('id').trim();\n        var idSelector = '*[id=\"'.concat(axe.utils.escapeSelector(id), '\"]');\n        var idMatchingElms = Array.from(dom.getRootNode(node).querySelectorAll(idSelector));\n        return !aria.isAccessibleRef(node) && idMatchingElms.every(function(elm) {\n          return !dom.isFocusable(elm);\n        });\n      },\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag411' ],\n      all: [],\n      any: [ 'duplicate-id' ],\n      none: []\n    }, {\n      id: 'empty-heading',\n      selector: 'h1, h2, h3, h4, h5, h6, [role=\"heading\"]',\n      matches: function matches(node, virtualNode, context) {\n        var explicitRoles;\n        if (node.hasAttribute('role')) {\n          explicitRoles = node.getAttribute('role').split(/\\s+/i).filter(axe.commons.aria.isValidRole);\n        }\n        if (explicitRoles && explicitRoles.length > 0) {\n          return explicitRoles.includes('heading');\n        } else {\n          return axe.commons.aria.implicitRole(node) === 'heading';\n        }\n      },\n      tags: [ 'cat.name-role-value', 'best-practice' ],\n      all: [],\n      any: [ 'has-visible-text' ],\n      none: []\n    }, {\n      id: 'focus-order-semantics',\n      selector: 'div, h1, h2, h3, h4, h5, h6, [role=heading], p, span',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.dom.insertedIntoFocusOrder(node);\n      },\n      tags: [ 'cat.keyboard', 'best-practice', 'experimental' ],\n      all: [],\n      any: [ {\n        options: [],\n        id: 'has-widget-role'\n      }, {\n        options: [],\n        id: 'valid-scrollable-semantics'\n      } ],\n      none: []\n    }, {\n      id: 'form-field-multiple-labels',\n      selector: 'input, select, textarea',\n      matches: function matches(node, virtualNode, context) {\n        if (node.nodeName.toLowerCase() !== 'input' || node.hasAttribute('type') === false) {\n          return true;\n        }\n        var type = node.getAttribute('type').toLowerCase();\n        return [ 'hidden', 'image', 'button', 'submit', 'reset' ].includes(type) === false;\n      },\n      tags: [ 'cat.forms', 'wcag2a', 'wcag332' ],\n      all: [],\n      any: [],\n      none: [ 'multiple-label' ]\n    }, {\n      id: 'frame-tested',\n      selector: 'frame, iframe',\n      tags: [ 'cat.structure', 'review-item', 'best-practice' ],\n      all: [ {\n        options: {\n          isViolation: false\n        },\n        id: 'frame-tested'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'frame-title-unique',\n      selector: 'frame[title], iframe[title]',\n      matches: function matches(node, virtualNode, context) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      },\n      tags: [ 'cat.text-alternatives', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'unique-frame-title' ]\n    }, {\n      id: 'frame-title',\n      selector: 'frame, iframe',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag241', 'wcag412', 'section508', 'section508.22.i' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'non-empty-title', 'role-presentation', 'role-none' ],\n      none: []\n    }, {\n      id: 'heading-order',\n      selector: 'h1, h2, h3, h4, h5, h6, [role=heading]',\n      matches: function matches(node, virtualNode, context) {\n        var explicitRoles;\n        if (node.hasAttribute('role')) {\n          explicitRoles = node.getAttribute('role').split(/\\s+/i).filter(axe.commons.aria.isValidRole);\n        }\n        if (explicitRoles && explicitRoles.length > 0) {\n          return explicitRoles.includes('heading');\n        } else {\n          return axe.commons.aria.implicitRole(node) === 'heading';\n        }\n      },\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'heading-order' ],\n      none: []\n    }, {\n      id: 'hidden-content',\n      selector: '*',\n      excludeHidden: false,\n      tags: [ 'cat.structure', 'experimental', 'review-item', 'best-practice' ],\n      all: [],\n      any: [ 'hidden-content' ],\n      none: []\n    }, {\n      id: 'html-has-lang',\n      selector: 'html',\n      matches: function matches(node, virtualNode, context) {\n        return node.ownerDocument.defaultView.self === node.ownerDocument.defaultView.top;\n      },\n      tags: [ 'cat.language', 'wcag2a', 'wcag311' ],\n      all: [],\n      any: [ 'has-lang' ],\n      none: []\n    }, {\n      id: 'html-lang-valid',\n      selector: 'html[lang], html[xml\\\\:lang]',\n      tags: [ 'cat.language', 'wcag2a', 'wcag311' ],\n      all: [],\n      any: [],\n      none: [ 'valid-lang' ]\n    }, {\n      id: 'html-xml-lang-mismatch',\n      selector: 'html[lang][xml\\\\:lang]',\n      matches: function matches(node, virtualNode, context) {\n        var getBaseLang = axe.utils.getBaseLang;\n        var primaryLangValue = getBaseLang(node.getAttribute('lang'));\n        var primaryXmlLangValue = getBaseLang(node.getAttribute('xml:lang'));\n        return axe.utils.validLangs().includes(primaryLangValue) && axe.utils.validLangs().includes(primaryXmlLangValue);\n      },\n      tags: [ 'cat.language', 'wcag2a', 'wcag311' ],\n      all: [ 'xml-lang-mismatch' ],\n      any: [],\n      none: []\n    }, {\n      id: 'identical-links-same-purpose',\n      selector: 'a[href], area[href], [role=\"link\"]',\n      excludeHidden: false,\n      matches: function matches(node, virtualNode, context) {\n        var _axe$commons4 = axe.commons, aria = _axe$commons4.aria, text = _axe$commons4.text;\n        var hasAccName = !!text.accessibleTextVirtual(virtualNode);\n        if (!hasAccName) {\n          return false;\n        }\n        var role = aria.getRole(node);\n        if (role && role !== 'link') {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag2aaa', 'wcag249', 'best-practice' ],\n      all: [ 'identical-links-same-purpose' ],\n      any: [],\n      none: []\n    }, {\n      id: 'image-alt',\n      selector: 'img',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-alt', 'aria-label', 'aria-labelledby', 'non-empty-title', 'role-presentation', 'role-none' ],\n      none: [ 'alt-space-value' ]\n    }, {\n      id: 'image-redundant-alt',\n      selector: 'img',\n      tags: [ 'cat.text-alternatives', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'duplicate-img-label' ]\n    }, {\n      id: 'input-button-name',\n      selector: 'input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-if-present', 'non-empty-value', 'aria-label', 'aria-labelledby', 'role-presentation', 'role-none', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'input-image-alt',\n      selector: 'input[type=\"image\"]',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'non-empty-alt', 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'label-content-name-mismatch',\n      matches: function matches(node, virtualNode, context) {\n        var _axe$commons5 = axe.commons, aria = _axe$commons5.aria, text = _axe$commons5.text;\n        var role = aria.getRole(node);\n        if (!role) {\n          return false;\n        }\n        var widgetRoles = Object.keys(aria.lookupTable.role).filter(function(key) {\n          return aria.lookupTable.role[key].type === 'widget';\n        });\n        var isWidgetType = widgetRoles.includes(role);\n        if (!isWidgetType) {\n          return false;\n        }\n        var rolesWithNameFromContents = aria.getRolesWithNameFromContents();\n        if (!rolesWithNameFromContents.includes(role)) {\n          return false;\n        }\n        if (!text.sanitize(aria.arialabelText(virtualNode)) && !text.sanitize(aria.arialabelledbyText(node))) {\n          return false;\n        }\n        if (!text.sanitize(text.visibleVirtual(virtualNode))) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag21a', 'wcag253', 'experimental' ],\n      all: [],\n      any: [ {\n        options: {\n          pixelThreshold: .1,\n          occuranceThreshold: 3\n        },\n        id: 'label-content-name-mismatch'\n      } ],\n      none: []\n    }, {\n      id: 'label-title-only',\n      selector: 'input, select, textarea',\n      matches: function matches(node, virtualNode, context) {\n        if (node.nodeName.toLowerCase() !== 'input' || node.hasAttribute('type') === false) {\n          return true;\n        }\n        var type = node.getAttribute('type').toLowerCase();\n        return [ 'hidden', 'image', 'button', 'submit', 'reset' ].includes(type) === false;\n      },\n      tags: [ 'cat.forms', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'title-only' ]\n    }, {\n      id: 'label',\n      selector: 'input, select, textarea',\n      matches: function matches(node, virtualNode, context) {\n        if (node.nodeName.toLowerCase() !== 'input' || node.hasAttribute('type') === false) {\n          return true;\n        }\n        var type = node.getAttribute('type').toLowerCase();\n        return [ 'hidden', 'image', 'button', 'submit', 'reset' ].includes(type) === false;\n      },\n      tags: [ 'cat.forms', 'wcag2a', 'wcag412', 'wcag131', 'section508', 'section508.22.n' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'implicit-label', 'explicit-label', 'non-empty-title' ],\n      none: [ 'help-same-as-label', 'hidden-explicit-label' ]\n    }, {\n      id: 'landmark-banner-is-top-level',\n      selector: 'header:not([role]), [role=banner]',\n      matches: function matches(node, virtualNode, context) {\n        var nativeScopeFilter = 'article, aside, main, nav, section';\n        return node.hasAttribute('role') || !axe.commons.dom.findUpVirtual(virtualNode, nativeScopeFilter);\n      },\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-complementary-is-top-level',\n      selector: 'aside:not([role]), [role=complementary]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-contentinfo-is-top-level',\n      selector: 'footer:not([role]), [role=contentinfo]',\n      matches: function matches(node, virtualNode, context) {\n        var nativeScopeFilter = 'article, aside, main, nav, section';\n        return node.hasAttribute('role') || !axe.commons.dom.findUpVirtual(virtualNode, nativeScopeFilter);\n      },\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-main-is-top-level',\n      selector: 'main:not([role]), [role=main]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ 'landmark-is-top-level' ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-banner',\n      selector: 'header:not([role]), [role=banner]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'header:not([role]), [role=banner]',\n          nativeScopeFilter: 'article, aside, main, nav, section'\n        },\n        id: 'page-no-duplicate-banner'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-contentinfo',\n      selector: 'footer:not([role]), [role=contentinfo]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'footer:not([role]), [role=contentinfo]',\n          nativeScopeFilter: 'article, aside, main, nav, section'\n        },\n        id: 'page-no-duplicate-contentinfo'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-no-duplicate-main',\n      selector: 'main:not([role]), [role=main]',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          selector: 'main:not([role]), [role=\\'main\\']'\n        },\n        id: 'page-no-duplicate-main'\n      } ],\n      none: []\n    }, {\n      id: 'landmark-one-main',\n      selector: 'html',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [ {\n        options: {\n          selector: 'main:not([role]), [role=\\'main\\']'\n        },\n        id: 'page-has-main'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'landmark-unique',\n      selector: '[role=banner], [role=complementary], [role=contentinfo], [role=main], [role=navigation], [role=region], [role=search], [role=form], form, footer, header, aside, main, nav, section',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      matches: function matches(node, virtualNode, context) {\n        var excludedParentsForHeaderFooterLandmarks = [ 'article', 'aside', 'main', 'nav', 'section' ].join(',');\n        function isHeaderFooterLandmark(headerFooterElement) {\n          return !axe.commons.dom.findUpVirtual(headerFooterElement, excludedParentsForHeaderFooterLandmarks);\n        }\n        function isLandmarkVirtual(virtualNode) {\n          var actualNode = virtualNode.actualNode;\n          var landmarkRoles = axe.commons.aria.getRolesByType('landmark');\n          var role = axe.commons.aria.getRole(actualNode);\n          if (!role) {\n            return false;\n          }\n          var nodeName = actualNode.nodeName.toUpperCase();\n          if (nodeName === 'HEADER' || nodeName === 'FOOTER') {\n            return isHeaderFooterLandmark(virtualNode);\n          }\n          if (nodeName === 'SECTION' || nodeName === 'FORM') {\n            var accessibleText = axe.commons.text.accessibleTextVirtual(virtualNode);\n            return !!accessibleText;\n          }\n          return landmarkRoles.indexOf(role) >= 0 || role === 'region';\n        }\n        return isLandmarkVirtual(virtualNode) && axe.commons.dom.isVisible(node, true);\n      },\n      all: [],\n      any: [ 'landmark-is-unique' ],\n      none: []\n    }, {\n      id: 'layout-table',\n      selector: 'table',\n      matches: function matches(node, virtualNode, context) {\n        var role = (node.getAttribute('role') || '').toLowerCase();\n        return !((role === 'presentation' || role === 'none') && !axe.commons.dom.isFocusable(node)) && !axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'cat.semantics', 'wcag2a', 'wcag131', 'deprecated' ],\n      enabled: false,\n      all: [],\n      any: [],\n      none: [ 'has-th', 'has-caption', 'has-summary' ]\n    }, {\n      id: 'link-in-text-block',\n      selector: 'a[href], [role=link]',\n      matches: function matches(node, virtualNode, context) {\n        var text = axe.commons.text.sanitize(node.textContent);\n        var role = node.getAttribute('role');\n        if (role && role !== 'link') {\n          return false;\n        }\n        if (!text) {\n          return false;\n        }\n        if (!axe.commons.dom.isVisible(node, false)) {\n          return false;\n        }\n        return axe.commons.dom.isInTextBlock(node);\n      },\n      excludeHidden: false,\n      tags: [ 'cat.color', 'experimental', 'wcag2a', 'wcag141' ],\n      all: [ 'link-in-text-block' ],\n      any: [],\n      none: []\n    }, {\n      id: 'link-name',\n      selector: 'a[href]:not([role=button]), [role=link]',\n      tags: [ 'cat.name-role-value', 'wcag2a', 'wcag412', 'wcag244', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', 'role-presentation', 'role-none' ],\n      none: [ 'focusable-no-name' ]\n    }, {\n      id: 'list',\n      selector: 'ul, ol',\n      matches: function matches(node, virtualNode, context) {\n        return !node.getAttribute('role');\n      },\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [],\n      none: [ 'only-listitems' ]\n    }, {\n      id: 'listitem',\n      selector: 'li',\n      matches: function matches(node, virtualNode, context) {\n        return !node.getAttribute('role');\n      },\n      tags: [ 'cat.structure', 'wcag2a', 'wcag131' ],\n      all: [],\n      any: [ 'listitem' ],\n      none: []\n    }, {\n      id: 'marquee',\n      selector: 'marquee',\n      excludeHidden: false,\n      tags: [ 'cat.parsing', 'wcag2a', 'wcag222' ],\n      all: [],\n      any: [],\n      none: [ 'is-on-screen' ]\n    }, {\n      id: 'meta-refresh',\n      selector: 'meta[http-equiv=\"refresh\"]',\n      excludeHidden: false,\n      tags: [ 'cat.time-and-media', 'wcag2a', 'wcag2aaa', 'wcag221', 'wcag224', 'wcag325' ],\n      all: [],\n      any: [ 'meta-refresh' ],\n      none: []\n    }, {\n      id: 'meta-viewport-large',\n      selector: 'meta[name=\"viewport\"]',\n      excludeHidden: false,\n      tags: [ 'cat.sensory-and-visual-cues', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 5,\n          lowerBound: 2\n        },\n        id: 'meta-viewport-large'\n      } ],\n      none: []\n    }, {\n      id: 'meta-viewport',\n      selector: 'meta[name=\"viewport\"]',\n      excludeHidden: false,\n      tags: [ 'cat.sensory-and-visual-cues', 'best-practice' ],\n      all: [],\n      any: [ {\n        options: {\n          scaleMinimum: 2\n        },\n        id: 'meta-viewport'\n      } ],\n      none: []\n    }, {\n      id: 'no-autoplay-audio',\n      excludeHidden: false,\n      selector: 'audio[autoplay], video[autoplay]',\n      matches: function matches(node, virtualNode, context) {\n        if (!node.currentSrc) {\n          return false;\n        }\n        if (node.hasAttribute('paused') || node.hasAttribute('muted')) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag2a', 'wcag142', 'experimental' ],\n      preload: true,\n      all: [ {\n        options: {\n          allowedDuration: 3\n        },\n        id: 'no-autoplay-audio'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'object-alt',\n      selector: 'object',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'has-visible-text', 'aria-label', 'aria-labelledby', 'non-empty-title', 'role-presentation', 'role-none' ],\n      none: []\n    }, {\n      id: 'p-as-heading',\n      selector: 'p',\n      matches: function matches(node, virtualNode, context) {\n        var children = Array.from(node.parentNode.childNodes);\n        var nodeText = node.textContent.trim();\n        var isSentence = /[.!?:;](?![.!?:;])/g;\n        if (nodeText.length === 0 || (nodeText.match(isSentence) || []).length >= 2) {\n          return false;\n        }\n        var siblingsAfter = children.slice(children.indexOf(node) + 1).filter(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P' && elm.textContent.trim() !== '';\n        });\n        return siblingsAfter.length !== 0;\n      },\n      tags: [ 'cat.semantics', 'wcag2a', 'wcag131', 'experimental' ],\n      all: [ {\n        options: {\n          margins: [ {\n            weight: 150,\n            italic: true\n          }, {\n            weight: 150,\n            size: 1.15\n          }, {\n            italic: true,\n            size: 1.15\n          }, {\n            size: 1.4\n          } ]\n        },\n        id: 'p-as-heading'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'page-has-heading-one',\n      selector: 'html',\n      tags: [ 'cat.semantics', 'best-practice' ],\n      all: [ {\n        options: {\n          selector: 'h1:not([role]), [role=\"heading\"][aria-level=\"1\"]'\n        },\n        id: 'page-has-heading-one'\n      } ],\n      any: [],\n      none: []\n    }, {\n      id: 'radiogroup',\n      selector: 'input[type=radio][name]',\n      tags: [ 'cat.forms', 'best-practice', 'deprecated' ],\n      enabled: false,\n      all: [],\n      any: [ 'group-labelledby', 'fieldset' ],\n      none: []\n    }, {\n      id: 'region',\n      selector: 'body *',\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ 'region' ],\n      none: []\n    }, {\n      id: 'role-img-alt',\n      selector: '[role=\\'img\\']:not(img):not(area):not(input):not(object)',\n      matches: function matches(node, virtualNode, context) {\n        return node.namespaceURI === 'http://www.w3.org/1999/xhtml';\n      },\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'scope-attr-valid',\n      selector: 'td[scope], th[scope]',\n      tags: [ 'cat.tables', 'best-practice' ],\n      all: [ 'html5-scope', 'scope-value' ],\n      any: [],\n      none: []\n    }, {\n      id: 'scrollable-region-focusable',\n      matches: function matches(node, virtualNode, context) {\n        var querySelectorAll = axe.utils.querySelectorAll;\n        var hasContentVirtual = axe.commons.dom.hasContentVirtual;\n        if (!!axe.utils.getScroll(node, 13) === false) {\n          return false;\n        }\n        var nodeAndDescendents = querySelectorAll(virtualNode, '*');\n        var hasVisibleChildren = nodeAndDescendents.some(function(elm) {\n          return hasContentVirtual(elm, true, true);\n        });\n        if (!hasVisibleChildren) {\n          return false;\n        }\n        return true;\n      },\n      tags: [ 'wcag2a', 'wcag211' ],\n      all: [],\n      any: [ 'focusable-content', 'focusable-element' ],\n      none: []\n    }, {\n      id: 'server-side-image-map',\n      selector: 'img[ismap]',\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag211', 'section508', 'section508.22.f' ],\n      all: [],\n      any: [],\n      none: [ 'exists' ]\n    }, {\n      id: 'skip-link',\n      selector: 'a[href^=\"#\"], a[href^=\"/#\"]',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.dom.isSkipLink(node) && axe.commons.dom.isOffscreen(node);\n      },\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ 'skip-link' ],\n      none: []\n    }, {\n      id: 'svg-img-alt',\n      selector: '[role=\"img\"], [role=\"graphics-symbol\"], svg[role=\"graphics-document\"]',\n      matches: function matches(node, virtualNode, context) {\n        return node.namespaceURI === 'http://www.w3.org/2000/svg';\n      },\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag111', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [ 'svg-non-empty-title', 'aria-label', 'aria-labelledby', 'non-empty-title' ],\n      none: []\n    }, {\n      id: 'tabindex',\n      selector: '[tabindex]',\n      tags: [ 'cat.keyboard', 'best-practice' ],\n      all: [],\n      any: [ 'tabindex' ],\n      none: []\n    }, {\n      id: 'table-duplicate-name',\n      selector: 'table',\n      tags: [ 'cat.tables', 'best-practice' ],\n      all: [],\n      any: [],\n      none: [ 'same-caption-summary' ]\n    }, {\n      id: 'table-fake-caption',\n      selector: 'table',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'cat.tables', 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'caption-faked' ],\n      any: [],\n      none: []\n    }, {\n      id: 'td-has-header',\n      selector: 'table',\n      matches: function matches(node, virtualNode, context) {\n        if (axe.commons.table.isDataTable(node)) {\n          var tableArray = axe.commons.table.toArray(node);\n          return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n        }\n        return false;\n      },\n      tags: [ 'cat.tables', 'experimental', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'td-has-header' ],\n      any: [],\n      none: []\n    }, {\n      id: 'td-headers-attr',\n      selector: 'table',\n      tags: [ 'cat.tables', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'td-headers-attr' ],\n      any: [],\n      none: []\n    }, {\n      id: 'th-has-data-cells',\n      selector: 'table',\n      matches: function matches(node, virtualNode, context) {\n        return axe.commons.table.isDataTable(node);\n      },\n      tags: [ 'cat.tables', 'wcag2a', 'wcag131', 'section508', 'section508.22.g' ],\n      all: [ 'th-has-data-cells' ],\n      any: [],\n      none: []\n    }, {\n      id: 'valid-lang',\n      selector: '[lang], [xml\\\\:lang]',\n      matches: function matches(node, virtualNode, context) {\n        return node.nodeName.toLowerCase() !== 'html';\n      },\n      tags: [ 'cat.language', 'wcag2aa', 'wcag312' ],\n      all: [],\n      any: [],\n      none: [ 'valid-lang' ]\n    }, {\n      id: 'video-caption',\n      selector: 'video',\n      excludeHidden: false,\n      tags: [ 'cat.text-alternatives', 'wcag2a', 'wcag122', 'section508', 'section508.22.a' ],\n      all: [],\n      any: [],\n      none: [ 'caption' ]\n    }, {\n      id: 'video-description',\n      selector: 'video',\n      excludeHidden: false,\n      tags: [ 'cat.text-alternatives', 'wcag2aa', 'wcag125', 'section508', 'section508.22.b', 'deprecated' ],\n      enabled: false,\n      all: [],\n      any: [],\n      none: [ 'description' ]\n    } ],\n    checks: [ {\n      id: 'abstractrole',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var abstractRoles = axe.utils.tokenList(virtualNode.attr('role')).filter(function(role) {\n          return axe.commons.aria.getRoleType(role) === 'abstract';\n        });\n        if (abstractRoles.length > 0) {\n          this.data(abstractRoles);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'aria-allowed-attr',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = options || {};\n        var invalid = [];\n        var attr, attrName, allowed, role = node.getAttribute('role'), attrs = axe.utils.getNodeAttributes(node);\n        if (!role) {\n          role = axe.commons.aria.implicitRole(node);\n        }\n        allowed = axe.commons.aria.allowedAttr(role);\n        if (Array.isArray(options[role])) {\n          allowed = axe.utils.uniqueArray(options[role].concat(allowed));\n        }\n        if (role && allowed) {\n          for (var i = 0, l = attrs.length; i < l; i++) {\n            attr = attrs[i];\n            attrName = attr.name;\n            if (axe.commons.aria.validateAttr(attrName) && !allowed.includes(attrName)) {\n              invalid.push(attrName + '=\"' + attr.nodeValue + '\"');\n            }\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'aria-allowed-role',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var dom = axe.commons.dom;\n        var _ref = options || {}, _ref$allowImplicit = _ref.allowImplicit, allowImplicit = _ref$allowImplicit === void 0 ? true : _ref$allowImplicit, _ref$ignoredTags = _ref.ignoredTags, ignoredTags = _ref$ignoredTags === void 0 ? [] : _ref$ignoredTags;\n        var tagName = node.nodeName.toUpperCase();\n        if (ignoredTags.map(function(t) {\n          return t.toUpperCase();\n        }).includes(tagName)) {\n          return true;\n        }\n        var unallowedRoles = axe.commons.aria.getElementUnallowedRoles(node, allowImplicit);\n        if (unallowedRoles.length) {\n          this.data(unallowedRoles);\n          if (!dom.isVisible(node, true)) {\n            return undefined;\n          }\n          return false;\n        }\n        return true;\n      },\n      options: {\n        allowImplicit: true,\n        ignoredTags: []\n      }\n    }, {\n      id: 'aria-hidden-body',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return node.getAttribute('aria-hidden') !== 'true';\n      }\n    }, {\n      id: 'aria-roledescription',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = options || {};\n        var role = axe.commons.aria.getRole(node);\n        var supportedRoles = options.supportedRoles || [];\n        if (supportedRoles.includes(role)) {\n          return true;\n        }\n        if (role && role !== 'presentation' && role !== 'none') {\n          return undefined;\n        }\n        return false;\n      },\n      options: {\n        supportedRoles: [ 'button', 'img', 'checkbox', 'radio', 'combobox', 'menuitemcheckbox', 'menuitemradio' ]\n      }\n    }, {\n      id: 'aria-errormessage',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons6 = axe.commons, aria = _axe$commons6.aria, dom = _axe$commons6.dom;\n        options = Array.isArray(options) ? options : [];\n        var attr = node.getAttribute('aria-errormessage');\n        var hasAttr = node.hasAttribute('aria-errormessage');\n        var doc = dom.getRootNode(node);\n        function validateAttrValue(attr) {\n          if (attr.trim() === '') {\n            return aria.lookupTable.attributes['aria-errormessage'].allowEmpty;\n          }\n          var idref = attr && doc.getElementById(attr);\n          if (idref) {\n            return idref.getAttribute('role') === 'alert' || idref.getAttribute('aria-live') === 'assertive' || axe.utils.tokenList(node.getAttribute('aria-describedby') || '').indexOf(attr) > -1;\n          }\n        }\n        if (options.indexOf(attr) === -1 && hasAttr) {\n          if (!validateAttrValue(attr)) {\n            this.data(axe.utils.tokenList(attr));\n            return false;\n          }\n        }\n        return true;\n      }\n    }, {\n      id: 'fallbackrole',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return axe.utils.tokenList(virtualNode.attr('role')).length > 1;\n      }\n    }, {\n      id: 'has-widget-role',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var role = node.getAttribute('role');\n        if (role === null) {\n          return false;\n        }\n        var roleType = axe.commons.aria.getRoleType(role);\n        return roleType === 'widget' || roleType === 'composite';\n      },\n      options: []\n    }, {\n      id: 'implicit-role-fallback',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var role = node.getAttribute('role');\n        if (role === null || !axe.commons.aria.isValidRole(role)) {\n          return true;\n        }\n        var roleType = axe.commons.aria.getRoleType(role);\n        return axe.commons.aria.implicitRole(node) === roleType;\n      },\n      deprecated: true\n    }, {\n      id: 'invalidrole',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tokenList = axe.utils.tokenList;\n        var aria = axe.commons.aria;\n        var allRoles = tokenList(virtualNode.attr('role'));\n        var allInvalid = allRoles.every(function(role) {\n          return !aria.isValidRole(role, {\n            allowAbstract: true\n          });\n        });\n        if (allInvalid) {\n          this.data(allRoles);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'no-implicit-explicit-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons7 = axe.commons, aria = _axe$commons7.aria, text = _axe$commons7.text;\n        var role = aria.getRole(node, {\n          noImplicit: true\n        });\n        this.data(role);\n        var labelText = text.sanitize(text.labelText(virtualNode)).toLowerCase();\n        var accText = text.sanitize(text.accessibleText(node)).toLowerCase();\n        if (!accText && !labelText) {\n          return false;\n        }\n        if (!accText && labelText) {\n          return undefined;\n        }\n        if (!accText.includes(labelText)) {\n          return undefined;\n        }\n        return false;\n      }\n    }, {\n      id: 'aria-required-attr',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = options || {};\n        var missing = [];\n        var _axe$commons$forms = axe.commons.forms, isNativeTextbox = _axe$commons$forms.isNativeTextbox, isNativeSelect = _axe$commons$forms.isNativeSelect, isAriaTextbox = _axe$commons$forms.isAriaTextbox, isAriaListbox = _axe$commons$forms.isAriaListbox, isAriaCombobox = _axe$commons$forms.isAriaCombobox, isAriaRange = _axe$commons$forms.isAriaRange;\n        var preChecks = {\n          'aria-valuenow': function ariaValuenow() {\n            return !(isNativeTextbox(node) || isNativeSelect(node) || isAriaTextbox(node) || isAriaListbox(node) || isAriaCombobox(node) || isAriaRange(node) && node.hasAttribute('aria-valuenow'));\n          }\n        };\n        if (node.hasAttributes()) {\n          var role = node.getAttribute('role');\n          var required = axe.commons.aria.requiredAttr(role);\n          if (Array.isArray(options[role])) {\n            required = axe.utils.uniqueArray(options[role], required);\n          }\n          if (role && required) {\n            for (var i = 0, l = required.length; i < l; i++) {\n              var attr = required[i];\n              if (!node.getAttribute(attr) && (preChecks[attr] ? preChecks[attr]() : true)) {\n                missing.push(attr);\n              }\n            }\n          }\n        }\n        if (missing.length) {\n          this.data(missing);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'aria-required-children',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var requiredOwned = axe.commons.aria.requiredOwned;\n        var implicitNodes = axe.commons.aria.implicitNodes;\n        var matchesSelector = axe.utils.matchesSelector;\n        var idrefs = axe.commons.dom.idrefs;\n        var hasContentVirtual = axe.commons.dom.hasContentVirtual;\n        var reviewEmpty = options && Array.isArray(options.reviewEmpty) ? options.reviewEmpty : [];\n        function owns(node, virtualTree, role, ariaOwned) {\n          if (node === null) {\n            return false;\n          }\n          var implicit = implicitNodes(role);\n          var selector = [ '[role=\"' + role + '\"]' ];\n          if (implicit) {\n            selector = selector.concat(implicit.map(function(implicitSelector) {\n              return implicitSelector + ':not([role])';\n            }));\n          }\n          selector = selector.join(',');\n          return ariaOwned ? matchesSelector(node, selector) || !!axe.utils.querySelectorAll(virtualTree, selector)[0] : !!axe.utils.querySelectorAll(virtualTree, selector)[0];\n        }\n        function ariaOwns(nodes, role) {\n          for (var index = 0; index < nodes.length; index++) {\n            var _node = nodes[index];\n            if (_node === null) {\n              continue;\n            }\n            var virtualTree = axe.utils.getNodeFromTree(_node);\n            if (owns(_node, virtualTree, role, true)) {\n              return true;\n            }\n          }\n          return false;\n        }\n        function missingRequiredChildren(node, childRoles, all, role) {\n          var missing = [], ownedElements = idrefs(node, 'aria-owns');\n          for (var index = 0; index < childRoles.length; index++) {\n            var childRole = childRoles[index];\n            if (owns(node, virtualNode, childRole) || ariaOwns(ownedElements, childRole)) {\n              if (!all) {\n                return null;\n              }\n            } else {\n              if (all) {\n                missing.push(childRole);\n              }\n            }\n          }\n          if (role === 'combobox') {\n            var textboxIndex = missing.indexOf('textbox');\n            var textTypeInputs = [ 'text', 'search', 'email', 'url', 'tel' ];\n            if (textboxIndex >= 0 && node.nodeName.toUpperCase() === 'INPUT' && textTypeInputs.includes(node.type) || owns(node, virtualNode, 'searchbox') || ariaOwns(ownedElements, 'searchbox')) {\n              missing.splice(textboxIndex, 1);\n            }\n            var expandedChildRoles = [ 'listbox', 'tree', 'grid', 'dialog' ];\n            var expandedValue = node.getAttribute('aria-expanded');\n            var expanded = expandedValue && expandedValue !== 'false';\n            var popupRole = (node.getAttribute('aria-haspopup') || 'listbox').toLowerCase();\n            for (var _index = 0; _index < expandedChildRoles.length; _index++) {\n              var expandedChildRole = expandedChildRoles[_index];\n              if (expanded && expandedChildRole === popupRole) {\n                continue;\n              }\n              var missingIndex = missing.indexOf(expandedChildRole);\n              if (missingIndex >= 0) {\n                missing.splice(missingIndex, 1);\n              }\n            }\n          }\n          if (missing.length) {\n            return missing;\n          }\n          if (!all && childRoles.length) {\n            return childRoles;\n          }\n          return null;\n        }\n        function hasDecendantWithRole(node) {\n          return node.children && node.children.some(function(child) {\n            var role = axe.commons.aria.getRole(child);\n            return ![ 'presentation', 'none', null ].includes(role) || hasDecendantWithRole(child);\n          });\n        }\n        var role = node.getAttribute('role');\n        var required = requiredOwned(role);\n        if (!required) {\n          return true;\n        }\n        var all = false;\n        var childRoles = required.one;\n        if (!childRoles) {\n          all = true;\n          childRoles = required.all;\n        }\n        var missing = missingRequiredChildren(node, childRoles, all, role);\n        if (!missing) {\n          return true;\n        }\n        this.data(missing);\n        if (reviewEmpty.includes(role) && !hasContentVirtual(virtualNode, false, true) && !hasDecendantWithRole(virtualNode) && idrefs(node, 'aria-owns').length === 0) {\n          return undefined;\n        } else {\n          return false;\n        }\n      },\n      options: {\n        reviewEmpty: [ 'doc-bibliography', 'doc-endnotes', 'grid', 'list', 'listbox', 'table', 'tablist', 'tree', 'treegrid', 'rowgroup' ]\n      }\n    }, {\n      id: 'aria-required-parent',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        function getSelector(role) {\n          var impliedNative = axe.commons.aria.implicitNodes(role) || [];\n          return impliedNative.concat('[role=\"' + role + '\"]').join(',');\n        }\n        function getMissingContext(virtualNode, requiredContext, includeElement) {\n          var index, length, role = virtualNode.actualNode.getAttribute('role'), missing = [];\n          if (!requiredContext) {\n            requiredContext = axe.commons.aria.requiredContext(role);\n          }\n          if (!requiredContext) {\n            return null;\n          }\n          for (index = 0, length = requiredContext.length; index < length; index++) {\n            if (includeElement && axe.utils.matchesSelector(virtualNode.actualNode, getSelector(requiredContext[index]))) {\n              return null;\n            }\n            if (axe.commons.dom.findUpVirtual(virtualNode, getSelector(requiredContext[index]))) {\n              return null;\n            } else {\n              missing.push(requiredContext[index]);\n            }\n          }\n          return missing;\n        }\n        function getAriaOwners(element) {\n          var owners = [], o = null;\n          while (element) {\n            if (element.getAttribute('id')) {\n              var id = axe.utils.escapeSelector(element.getAttribute('id'));\n              var doc = axe.commons.dom.getRootNode(element);\n              o = doc.querySelector('[aria-owns~='.concat(id, ']'));\n              if (o) {\n                owners.push(o);\n              }\n            }\n            element = element.parentElement;\n          }\n          return owners.length ? owners : null;\n        }\n        var missingParents = getMissingContext(virtualNode);\n        if (!missingParents) {\n          return true;\n        }\n        var owners = getAriaOwners(node);\n        if (owners) {\n          for (var i = 0, l = owners.length; i < l; i++) {\n            missingParents = getMissingContext(axe.utils.getNodeFromTree(owners[i]), missingParents, true);\n            if (!missingParents) {\n              return true;\n            }\n          }\n        }\n        this.data(missingParents);\n        return false;\n      }\n    }, {\n      id: 'aria-unsupported-attr',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var nodeName = node.nodeName.toUpperCase();\n        var lookupTable = axe.commons.aria.lookupTable;\n        var role = axe.commons.aria.getRole(node);\n        var unsupportedAttrs = Array.from(axe.utils.getNodeAttributes(node)).filter(function(_ref2) {\n          var name = _ref2.name;\n          var attribute = lookupTable.attributes[name];\n          if (!axe.commons.aria.validateAttr(name)) {\n            return false;\n          }\n          var unsupported = attribute.unsupported;\n          if (_typeof(unsupported) !== 'object') {\n            return !!unsupported;\n          }\n          var isException = axe.commons.matches(node, unsupported.exceptions);\n          if (!Object.keys(lookupTable.evaluateRoleForElement).includes(nodeName)) {\n            return !isException;\n          }\n          return !lookupTable.evaluateRoleForElement[nodeName]({\n            node: node,\n            role: role,\n            out: isException\n          });\n        }).map(function(candidate) {\n          return candidate.name.toString();\n        });\n        if (unsupportedAttrs.length) {\n          this.data(unsupportedAttrs);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'unsupportedrole',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return axe.commons.aria.isUnsupportedRole(axe.commons.aria.getRole(node));\n      }\n    }, {\n      id: 'aria-valid-attr-value',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = Array.isArray(options) ? options : [];\n        var needsReview = '';\n        var messageKey = '';\n        var invalid = [];\n        var aria = /^aria-/;\n        var attrs = axe.utils.getNodeAttributes(node);\n        var skipAttrs = [ 'aria-errormessage' ];\n        var preChecks = {\n          'aria-controls': function ariaControls() {\n            return node.getAttribute('aria-expanded') !== 'false' && node.getAttribute('aria-selected') !== 'false';\n          },\n          'aria-current': function ariaCurrent() {\n            if (!axe.commons.aria.validateAttrValue(node, 'aria-current')) {\n              needsReview = 'aria-current=\"'.concat(node.getAttribute('aria-current'), '\"');\n              messageKey = 'ariaCurrent';\n            }\n            return;\n          },\n          'aria-owns': function ariaOwns() {\n            return node.getAttribute('aria-expanded') !== 'false';\n          },\n          'aria-describedby': function ariaDescribedby() {\n            if (!axe.commons.aria.validateAttrValue(node, 'aria-describedby')) {\n              needsReview = 'aria-describedby=\"'.concat(node.getAttribute('aria-describedby'), '\"');\n              messageKey = 'noId';\n            }\n            return;\n          }\n        };\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          var attr = attrs[i];\n          var attrName = attr.name;\n          if (!skipAttrs.includes(attrName) && options.indexOf(attrName) === -1 && aria.test(attrName) && (preChecks[attrName] ? preChecks[attrName]() : true) && !axe.commons.aria.validateAttrValue(node, attrName)) {\n            invalid.push(''.concat(attrName, '=\"').concat(attr.nodeValue, '\"'));\n          }\n        }\n        if (needsReview) {\n          this.data({\n            messageKey: messageKey,\n            needsReview: needsReview\n          });\n          return undefined;\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      },\n      options: []\n    }, {\n      id: 'aria-valid-attr',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = Array.isArray(options) ? options : [];\n        var invalid = [], aria = /^aria-/;\n        var attr, attrs = axe.utils.getNodeAttributes(node);\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          attr = attrs[i].name;\n          if (options.indexOf(attr) === -1 && aria.test(attr) && !axe.commons.aria.validateAttr(attr)) {\n            invalid.push(attr);\n          }\n        }\n        if (invalid.length) {\n          this.data(invalid);\n          return false;\n        }\n        return true;\n      },\n      options: []\n    }, {\n      id: 'valid-scrollable-semantics',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS = {\n          ARTICLE: true,\n          ASIDE: true,\n          NAV: true,\n          SECTION: true\n        };\n        var VALID_ROLES_FOR_SCROLLABLE_REGIONS = {\n          application: true,\n          banner: false,\n          complementary: true,\n          contentinfo: true,\n          form: true,\n          main: true,\n          navigation: true,\n          region: true,\n          search: false\n        };\n        function validScrollableTagName(node) {\n          var nodeName = node.nodeName.toUpperCase();\n          return VALID_TAG_NAMES_FOR_SCROLLABLE_REGIONS[nodeName] || false;\n        }\n        function validScrollableRole(node) {\n          var role = node.getAttribute('role');\n          if (!role) {\n            return false;\n          }\n          return VALID_ROLES_FOR_SCROLLABLE_REGIONS[role.toLowerCase()] || false;\n        }\n        function validScrollableSemantics(node) {\n          return validScrollableRole(node) || validScrollableTagName(node);\n        }\n        return validScrollableSemantics(node);\n      },\n      options: []\n    }, {\n      id: 'color-contrast',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons8 = axe.commons, dom = _axe$commons8.dom, color = _axe$commons8.color, text = _axe$commons8.text;\n        if (!dom.isVisible(node, false)) {\n          return true;\n        }\n        var visibleText = text.visibleVirtual(virtualNode, false, true);\n        var ignoreUnicode = !!(options || {}).ignoreUnicode;\n        var textContainsOnlyUnicode = text.hasUnicode(visibleText, {\n          nonBmp: true\n        }) && text.sanitize(text.removeUnicode(visibleText, {\n          nonBmp: true\n        })) === '';\n        if (textContainsOnlyUnicode && ignoreUnicode) {\n          this.data({\n            messageKey: 'nonBmp'\n          });\n          return undefined;\n        }\n        var noScroll = !!(options || {}).noScroll;\n        var bgNodes = [];\n        var bgColor = color.getBackgroundColor(node, bgNodes, noScroll);\n        var fgColor = color.getForegroundColor(node, noScroll, bgColor);\n        var nodeStyle = window.getComputedStyle(node);\n        var fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\n        var fontWeight = nodeStyle.getPropertyValue('font-weight');\n        var bold = parseFloat(fontWeight) >= 700 || fontWeight === 'bold';\n        var cr = color.hasValidContrastRatio(bgColor, fgColor, fontSize, bold);\n        var truncatedResult = Math.floor(cr.contrastRatio * 100) / 100;\n        var missing;\n        if (bgColor === null) {\n          missing = color.incompleteData.get('bgColor');\n        }\n        var equalRatio = truncatedResult === 1;\n        var shortTextContent = visibleText.length === 1;\n        var ignoreLength = !!(options || {}).ignoreLength;\n        if (equalRatio) {\n          missing = color.incompleteData.set('bgColor', 'equalRatio');\n        } else if (shortTextContent && !ignoreLength) {\n          missing = 'shortTextContent';\n        }\n        var data = {\n          fgColor: fgColor ? fgColor.toHexString() : undefined,\n          bgColor: bgColor ? bgColor.toHexString() : undefined,\n          contrastRatio: cr ? truncatedResult : undefined,\n          fontSize: ''.concat((fontSize * 72 / 96).toFixed(1), 'pt (').concat(fontSize, 'px)'),\n          fontWeight: bold ? 'bold' : 'normal',\n          messageKey: missing,\n          expectedContrastRatio: cr.expectedContrastRatio + ':1'\n        };\n        this.data(data);\n        if (fgColor === null || bgColor === null || equalRatio || shortTextContent && !ignoreLength && !cr.isValid) {\n          missing = null;\n          color.incompleteData.clear();\n          this.relatedNodes(bgNodes);\n          return undefined;\n        }\n        if (!cr.isValid) {\n          this.relatedNodes(bgNodes);\n        }\n        return cr.isValid;\n      },\n      options: {\n        noScroll: false,\n        ignoreUnicode: true,\n        ignoreLength: false\n      }\n    }, {\n      id: 'link-in-text-block',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons9 = axe.commons, color = _axe$commons9.color, dom = _axe$commons9.dom;\n        function getContrast(color1, color2) {\n          var c1lum = color1.getRelativeLuminance();\n          var c2lum = color2.getRelativeLuminance();\n          return (Math.max(c1lum, c2lum) + .05) / (Math.min(c1lum, c2lum) + .05);\n        }\n        var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n        function isBlock(elm) {\n          var display = window.getComputedStyle(elm).getPropertyValue('display');\n          return blockLike.indexOf(display) !== -1 || display.substr(0, 6) === 'table-';\n        }\n        if (isBlock(node)) {\n          return false;\n        }\n        var parentBlock = dom.getComposedParent(node);\n        while (parentBlock.nodeType === 1 && !isBlock(parentBlock)) {\n          parentBlock = dom.getComposedParent(parentBlock);\n        }\n        this.relatedNodes([ parentBlock ]);\n        if (color.elementIsDistinct(node, parentBlock)) {\n          return true;\n        } else {\n          var nodeColor, parentColor;\n          nodeColor = color.getForegroundColor(node);\n          parentColor = color.getForegroundColor(parentBlock);\n          if (!nodeColor || !parentColor) {\n            return undefined;\n          }\n          var contrast = getContrast(nodeColor, parentColor);\n          if (contrast === 1) {\n            return true;\n          } else if (contrast >= 3) {\n            axe.commons.color.incompleteData.set('fgColor', 'bgContrast');\n            this.data({\n              messageKey: axe.commons.color.incompleteData.get('fgColor')\n            });\n            axe.commons.color.incompleteData.clear();\n            return undefined;\n          }\n          nodeColor = color.getBackgroundColor(node);\n          parentColor = color.getBackgroundColor(parentBlock);\n          if (!nodeColor || !parentColor || getContrast(nodeColor, parentColor) >= 3) {\n            var reason;\n            if (!nodeColor || !parentColor) {\n              reason = axe.commons.color.incompleteData.get('bgColor');\n            } else {\n              reason = 'bgContrast';\n            }\n            axe.commons.color.incompleteData.set('fgColor', reason);\n            this.data({\n              messageKey: axe.commons.color.incompleteData.get('fgColor')\n            });\n            axe.commons.color.incompleteData.clear();\n            return undefined;\n          }\n        }\n        return false;\n      }\n    }, {\n      id: 'autocomplete-appropriate',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (virtualNode.props.nodeName !== 'input') {\n          return true;\n        }\n        var number = [ 'text', 'search', 'number' ];\n        var url = [ 'text', 'search', 'url' ];\n        var allowedTypesMap = {\n          bday: [ 'text', 'search', 'date' ],\n          email: [ 'text', 'search', 'email' ],\n          'cc-exp': [ 'text', 'search', 'month' ],\n          'street-address': [ 'text' ],\n          tel: [ 'text', 'search', 'tel' ],\n          'cc-exp-month': number,\n          'cc-exp-year': number,\n          'transaction-amount': number,\n          'bday-day': number,\n          'bday-month': number,\n          'bday-year': number,\n          'new-password': [ 'text', 'search', 'password' ],\n          'current-password': [ 'text', 'search', 'password' ],\n          url: url,\n          photo: url,\n          impp: url\n        };\n        if (_typeof(options) === 'object') {\n          Object.keys(options).forEach(function(key) {\n            if (!allowedTypesMap[key]) {\n              allowedTypesMap[key] = [];\n            }\n            allowedTypesMap[key] = allowedTypesMap[key].concat(options[key]);\n          });\n        }\n        var autocomplete = virtualNode.attr('autocomplete');\n        var autocompleteTerms = autocomplete.split(/\\s+/g).map(function(term) {\n          return term.toLowerCase();\n        });\n        var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];\n        if (axe.commons.text.autocomplete.stateTerms.includes(purposeTerm)) {\n          return true;\n        }\n        var allowedTypes = allowedTypesMap[purposeTerm];\n        var type = virtualNode.hasAttr('type') ? axe.commons.text.sanitize(virtualNode.attr('type')).toLowerCase() : 'text';\n        type = axe.utils.validInputTypes().includes(type) ? type : 'text';\n        if (typeof allowedTypes === 'undefined') {\n          return type === 'text';\n        }\n        return allowedTypes.includes(type);\n      }\n    }, {\n      id: 'autocomplete-valid',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var autocomplete = virtualNode.attr('autocomplete') || '';\n        return axe.commons.text.isValidAutocomplete(autocomplete, options);\n      }\n    }, {\n      id: 'fieldset',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var failureCode, self = this;\n        function getUnrelatedElements(parent, name) {\n          return axe.utils.toArray(parent.querySelectorAll('select,textarea,button,input:not([name=\"' + name + '\"]):not([type=\"hidden\"])'));\n        }\n        function checkFieldset(group, name) {\n          var firstNode = group.firstElementChild;\n          if (!firstNode || firstNode.nodeName.toUpperCase() !== 'LEGEND') {\n            self.relatedNodes([ group ]);\n            failureCode = 'no-legend';\n            return false;\n          }\n          if (!axe.commons.text.accessibleText(firstNode)) {\n            self.relatedNodes([ firstNode ]);\n            failureCode = 'empty-legend';\n            return false;\n          }\n          var otherElements = getUnrelatedElements(group, name);\n          if (otherElements.length) {\n            self.relatedNodes(otherElements);\n            failureCode = 'mixed-inputs';\n            return false;\n          }\n          return true;\n        }\n        function checkARIAGroup(group, name) {\n          var hasLabelledByText = axe.commons.dom.idrefs(group, 'aria-labelledby').some(function(element) {\n            return element && axe.commons.text.accessibleText(element);\n          });\n          var ariaLabel = group.getAttribute('aria-label');\n          if (!hasLabelledByText && !(ariaLabel && axe.commons.text.sanitize(ariaLabel))) {\n            self.relatedNodes(group);\n            failureCode = 'no-group-label';\n            return false;\n          }\n          var otherElements = getUnrelatedElements(group, name);\n          if (otherElements.length) {\n            self.relatedNodes(otherElements);\n            failureCode = 'group-mixed-inputs';\n            return false;\n          }\n          return true;\n        }\n        function spliceCurrentNode(nodes, current) {\n          return axe.utils.toArray(nodes).filter(function(candidate) {\n            return candidate !== current;\n          });\n        }\n        function runCheck(virtualNode) {\n          var name = axe.utils.escapeSelector(virtualNode.actualNode.name);\n          var root = axe.commons.dom.getRootNode(virtualNode.actualNode);\n          var matchingNodes = root.querySelectorAll('input[type=\"' + axe.utils.escapeSelector(virtualNode.actualNode.type) + '\"][name=\"' + name + '\"]');\n          if (matchingNodes.length < 2) {\n            return true;\n          }\n          var fieldset = axe.commons.dom.findUpVirtual(virtualNode, 'fieldset');\n          var group = axe.commons.dom.findUpVirtual(virtualNode, '[role=\"group\"]' + (virtualNode.actualNode.type === 'radio' ? ',[role=\"radiogroup\"]' : ''));\n          if (!group && !fieldset) {\n            failureCode = 'no-group';\n            self.relatedNodes(spliceCurrentNode(matchingNodes, virtualNode.actualNode));\n            return false;\n          } else if (fieldset) {\n            return checkFieldset(fieldset, name);\n          } else {\n            return checkARIAGroup(group, name);\n          }\n        }\n        var data = {\n          name: node.getAttribute('name'),\n          type: node.getAttribute('type')\n        };\n        var result = runCheck(virtualNode);\n        if (!result) {\n          data.messageKey = failureCode;\n        }\n        this.data(data);\n        return result;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(result) {\n          if (result.result) {\n            return true;\n          }\n          var data = result.data;\n          if (data) {\n            seen[data.type] = seen[data.type] || {};\n            if (!seen[data.type][data.name]) {\n              seen[data.type][data.name] = [ data ];\n              return true;\n            }\n            var hasBeenSeen = seen[data.type][data.name].some(function(candidate) {\n              return candidate.failureCode === data.failureCode;\n            });\n            if (!hasBeenSeen) {\n              seen[data.type][data.name].push(data);\n            }\n            return !hasBeenSeen;\n          }\n          return false;\n        });\n      },\n      deprecated: true\n    }, {\n      id: 'group-labelledby',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons10 = axe.commons, dom = _axe$commons10.dom, text = _axe$commons10.text;\n        var type = axe.utils.escapeSelector(node.type);\n        var name = axe.utils.escapeSelector(node.name);\n        var doc = dom.getRootNode(node);\n        var data = {\n          name: node.name,\n          type: node.type\n        };\n        var matchingNodes = Array.from(doc.querySelectorAll('input[type=\"'.concat(type, '\"][name=\"').concat(name, '\"]')));\n        if (matchingNodes.length <= 1) {\n          this.data(data);\n          return true;\n        }\n        var sharedLabels = dom.idrefs(node, 'aria-labelledby').filter(function(label) {\n          return !!label;\n        });\n        var uniqueLabels = sharedLabels.slice();\n        matchingNodes.forEach(function(groupItem) {\n          if (groupItem === node) {\n            return;\n          }\n          var labels = dom.idrefs(groupItem, 'aria-labelledby').filter(function(newLabel) {\n            return newLabel;\n          });\n          sharedLabels = sharedLabels.filter(function(sharedLabel) {\n            return labels.includes(sharedLabel);\n          });\n          uniqueLabels = uniqueLabels.filter(function(uniqueLabel) {\n            return !labels.includes(uniqueLabel);\n          });\n        });\n        var accessibleTextOptions = {\n          inLabelledByContext: true\n        };\n        uniqueLabels = uniqueLabels.filter(function(labelNode) {\n          return text.accessibleText(labelNode, accessibleTextOptions);\n        });\n        sharedLabels = sharedLabels.filter(function(labelNode) {\n          return text.accessibleText(labelNode, accessibleTextOptions);\n        });\n        if (uniqueLabels.length > 0 && sharedLabels.length > 0) {\n          this.data(data);\n          return true;\n        }\n        if (uniqueLabels.length > 0 && sharedLabels.length === 0) {\n          data.messageKey = 'no-shared-label';\n        } else if (uniqueLabels.length === 0 && sharedLabels.length > 0) {\n          data.messageKey = 'no-unique-label';\n        }\n        this.data(data);\n        return false;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(result) {\n          var data = result.data;\n          if (data) {\n            seen[data.type] = seen[data.type] || {};\n            if (!seen[data.type][data.name]) {\n              seen[data.type][data.name] = true;\n              return true;\n            }\n          }\n          return false;\n        });\n      },\n      deprecated: true\n    }, {\n      id: 'accesskeys',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (axe.commons.dom.isVisible(node, false)) {\n          this.data(node.getAttribute('accesskey'));\n          this.relatedNodes([ node ]);\n        }\n        return true;\n      },\n      after: function after(results, options) {\n        var seen = {};\n        return results.filter(function(r) {\n          if (!r.data) {\n            return false;\n          }\n          var key = r.data.toUpperCase();\n          if (!seen[key]) {\n            seen[key] = r;\n            r.relatedNodes = [];\n            return true;\n          }\n          seen[key].relatedNodes.push(r.relatedNodes[0]);\n          return false;\n        }).map(function(r) {\n          r.result = !!r.relatedNodes.length;\n          return r;\n        });\n      }\n    }, {\n      id: 'focusable-content',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tabbableElements = virtualNode.tabbableElements;\n        if (!tabbableElements) {\n          return false;\n        }\n        var tabbableContentElements = tabbableElements.filter(function(el) {\n          return el !== virtualNode;\n        });\n        return tabbableContentElements.length > 0;\n      }\n    }, {\n      id: 'focusable-disabled',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var elementsThatCanBeDisabled = [ 'BUTTON', 'FIELDSET', 'INPUT', 'SELECT', 'TEXTAREA' ];\n        var tabbableElements = virtualNode.tabbableElements;\n        if (!tabbableElements || !tabbableElements.length) {\n          return true;\n        }\n        var relatedNodes = tabbableElements.reduce(function(out, _ref3) {\n          var el = _ref3.actualNode;\n          var nodeName = el.nodeName.toUpperCase();\n          if (elementsThatCanBeDisabled.includes(nodeName)) {\n            out.push(el);\n          }\n          return out;\n        }, []);\n        this.relatedNodes(relatedNodes);\n        if (relatedNodes.length && axe.commons.dom.isModalOpen()) {\n          return true;\n        }\n        return relatedNodes.length === 0;\n      }\n    }, {\n      id: 'focusable-element',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var isFocusable = virtualNode.isFocusable;\n        var tabIndex = parseInt(virtualNode.actualNode.getAttribute('tabindex'), 10);\n        tabIndex = !isNaN(tabIndex) ? tabIndex : null;\n        return tabIndex ? isFocusable && tabIndex >= 0 : isFocusable;\n      }\n    }, {\n      id: 'focusable-modal-open',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tabbableElements = virtualNode.tabbableElements.map(function(_ref4) {\n          var actualNode = _ref4.actualNode;\n          return actualNode;\n        });\n        if (!tabbableElements || !tabbableElements.length) {\n          return true;\n        }\n        if (axe.commons.dom.isModalOpen()) {\n          this.relatedNodes(tabbableElements);\n          return undefined;\n        }\n        return true;\n      }\n    }, {\n      id: 'focusable-no-name',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tabIndex = node.getAttribute('tabindex'), inFocusOrder = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!inFocusOrder) {\n          return false;\n        }\n        return !axe.commons.text.accessibleTextVirtual(virtualNode);\n      }\n    }, {\n      id: 'focusable-not-tabbable',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var elementsThatCanBeDisabled = [ 'BUTTON', 'FIELDSET', 'INPUT', 'SELECT', 'TEXTAREA' ];\n        var tabbableElements = virtualNode.tabbableElements;\n        if (!tabbableElements || !tabbableElements.length) {\n          return true;\n        }\n        var relatedNodes = tabbableElements.reduce(function(out, _ref5) {\n          var el = _ref5.actualNode;\n          var nodeName = el.nodeName.toUpperCase();\n          if (!elementsThatCanBeDisabled.includes(nodeName)) {\n            out.push(el);\n          }\n          return out;\n        }, []);\n        this.relatedNodes(relatedNodes);\n        if (relatedNodes.length > 0 && axe.commons.dom.isModalOpen()) {\n          return true;\n        }\n        return relatedNodes.length === 0;\n      }\n    }, {\n      id: 'landmark-is-top-level',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var landmarks = axe.commons.aria.getRolesByType('landmark');\n        var parent = axe.commons.dom.getComposedParent(node);\n        this.data({\n          role: node.getAttribute('role') || axe.commons.aria.implicitRole(node)\n        });\n        while (parent) {\n          var role = parent.getAttribute('role');\n          if (!role && parent.nodeName.toUpperCase() !== 'FORM') {\n            role = axe.commons.aria.implicitRole(parent);\n          }\n          if (role && landmarks.includes(role)) {\n            return false;\n          }\n          parent = axe.commons.dom.getComposedParent(parent);\n        }\n        return true;\n      }\n    }, {\n      id: 'page-has-heading-one',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!options || !options.selector || typeof options.selector !== 'string') {\n          throw new TypeError('visible-in-page requires options.selector to be a string');\n        }\n        var matchingElms = axe.utils.querySelectorAllFilter(virtualNode, options.selector, function(vNode) {\n          return axe.commons.dom.isVisible(vNode.actualNode, true);\n        });\n        this.relatedNodes(matchingElms.map(function(vNode) {\n          return vNode.actualNode;\n        }));\n        return matchingElms.length > 0;\n      },\n      after: function after(results, options) {\n        var elmUsedAnywhere = results.some(function(frameResult) {\n          return frameResult.result === true;\n        });\n        if (elmUsedAnywhere) {\n          results.forEach(function(result) {\n            result.result = true;\n          });\n        }\n        return results;\n      },\n      options: {\n        selector: 'h1:not([role]), [role=\"heading\"][aria-level=\"1\"]'\n      }\n    }, {\n      id: 'page-has-main',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!options || !options.selector || typeof options.selector !== 'string') {\n          throw new TypeError('visible-in-page requires options.selector to be a string');\n        }\n        var matchingElms = axe.utils.querySelectorAllFilter(virtualNode, options.selector, function(vNode) {\n          return axe.commons.dom.isVisible(vNode.actualNode, true);\n        });\n        this.relatedNodes(matchingElms.map(function(vNode) {\n          return vNode.actualNode;\n        }));\n        return matchingElms.length > 0;\n      },\n      after: function after(results, options) {\n        var elmUsedAnywhere = results.some(function(frameResult) {\n          return frameResult.result === true;\n        });\n        if (elmUsedAnywhere) {\n          results.forEach(function(result) {\n            result.result = true;\n          });\n        }\n        return results;\n      },\n      options: {\n        selector: 'main:not([role]), [role=\\'main\\']'\n      }\n    }, {\n      id: 'page-no-duplicate-banner',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!options || !options.selector || typeof options.selector !== 'string') {\n          throw new TypeError('visible-in-page requires options.selector to be a string');\n        }\n        var key = 'page-no-duplicate;' + options.selector;\n        if (axe._cache.get(key)) {\n          this.data('ignored');\n          return;\n        }\n        axe._cache.set(key, true);\n        var elms = axe.utils.querySelectorAllFilter(axe._tree[0], options.selector, function(elm) {\n          return axe.commons.dom.isVisible(elm.actualNode);\n        });\n        if (typeof options.nativeScopeFilter === 'string') {\n          elms = elms.filter(function(elm) {\n            return elm.actualNode.hasAttribute('role') || !axe.commons.dom.findUpVirtual(elm, options.nativeScopeFilter);\n          });\n        }\n        this.relatedNodes(elms.filter(function(elm) {\n          return elm !== virtualNode;\n        }).map(function(elm) {\n          return elm.actualNode;\n        }));\n        return elms.length <= 1;\n      },\n      after: function after(results, options) {\n        return results.filter(function(checkResult) {\n          return checkResult.data !== 'ignored';\n        });\n      },\n      options: {\n        selector: 'header:not([role]), [role=banner]',\n        nativeScopeFilter: 'article, aside, main, nav, section'\n      }\n    }, {\n      id: 'page-no-duplicate-contentinfo',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!options || !options.selector || typeof options.selector !== 'string') {\n          throw new TypeError('visible-in-page requires options.selector to be a string');\n        }\n        var key = 'page-no-duplicate;' + options.selector;\n        if (axe._cache.get(key)) {\n          this.data('ignored');\n          return;\n        }\n        axe._cache.set(key, true);\n        var elms = axe.utils.querySelectorAllFilter(axe._tree[0], options.selector, function(elm) {\n          return axe.commons.dom.isVisible(elm.actualNode);\n        });\n        if (typeof options.nativeScopeFilter === 'string') {\n          elms = elms.filter(function(elm) {\n            return elm.actualNode.hasAttribute('role') || !axe.commons.dom.findUpVirtual(elm, options.nativeScopeFilter);\n          });\n        }\n        this.relatedNodes(elms.filter(function(elm) {\n          return elm !== virtualNode;\n        }).map(function(elm) {\n          return elm.actualNode;\n        }));\n        return elms.length <= 1;\n      },\n      after: function after(results, options) {\n        return results.filter(function(checkResult) {\n          return checkResult.data !== 'ignored';\n        });\n      },\n      options: {\n        selector: 'footer:not([role]), [role=contentinfo]',\n        nativeScopeFilter: 'article, aside, main, nav, section'\n      }\n    }, {\n      id: 'page-no-duplicate-main',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!options || !options.selector || typeof options.selector !== 'string') {\n          throw new TypeError('visible-in-page requires options.selector to be a string');\n        }\n        var key = 'page-no-duplicate;' + options.selector;\n        if (axe._cache.get(key)) {\n          this.data('ignored');\n          return;\n        }\n        axe._cache.set(key, true);\n        var elms = axe.utils.querySelectorAllFilter(axe._tree[0], options.selector, function(elm) {\n          return axe.commons.dom.isVisible(elm.actualNode);\n        });\n        if (typeof options.nativeScopeFilter === 'string') {\n          elms = elms.filter(function(elm) {\n            return elm.actualNode.hasAttribute('role') || !axe.commons.dom.findUpVirtual(elm, options.nativeScopeFilter);\n          });\n        }\n        this.relatedNodes(elms.filter(function(elm) {\n          return elm !== virtualNode;\n        }).map(function(elm) {\n          return elm.actualNode;\n        }));\n        return elms.length <= 1;\n      },\n      after: function after(results, options) {\n        return results.filter(function(checkResult) {\n          return checkResult.data !== 'ignored';\n        });\n      },\n      options: {\n        selector: 'main:not([role]), [role=\\'main\\']'\n      }\n    }, {\n      id: 'tabindex',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tabIndex = parseInt(node.getAttribute('tabindex'), 10);\n        return isNaN(tabIndex) ? true : tabIndex <= 0;\n      }\n    }, {\n      id: 'alt-space-value',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var alt = virtualNode.attr('alt');\n        var isOnlySpace = /^\\s+$/;\n        return typeof alt === 'string' && isOnlySpace.test(alt);\n      }\n    }, {\n      id: 'duplicate-img-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons11 = axe.commons, aria = _axe$commons11.aria, text = _axe$commons11.text, dom = _axe$commons11.dom;\n        if ([ 'none', 'presentation' ].includes(aria.getRole(node))) {\n          return false;\n        }\n        var parent = dom.findUpVirtual(virtualNode, 'button, [role=\"button\"], a[href], p, li, td, th');\n        if (!parent) {\n          return false;\n        }\n        var parentVNode = axe.utils.getNodeFromTree(parent);\n        var visibleText = text.visibleVirtual(parentVNode, true).toLowerCase();\n        if (visibleText === '') {\n          return false;\n        }\n        return visibleText === text.accessibleTextVirtual(virtualNode).toLowerCase();\n      }\n    }, {\n      id: 'explicit-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (node.getAttribute('id')) {\n          var root = axe.commons.dom.getRootNode(node);\n          var id = axe.utils.escapeSelector(node.getAttribute('id'));\n          var label = root.querySelector('label[for=\"'.concat(id, '\"]'));\n          if (label) {\n            if (!axe.commons.dom.isVisible(label)) {\n              return true;\n            } else {\n              return !!axe.commons.text.accessibleText(label);\n            }\n          }\n        }\n        return false;\n      }\n    }, {\n      id: 'help-same-as-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var labelText = axe.commons.text.labelVirtual(virtualNode), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      },\n      enabled: false\n    }, {\n      id: 'hidden-explicit-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (node.getAttribute('id')) {\n          var root = axe.commons.dom.getRootNode(node);\n          var id = axe.utils.escapeSelector(node.getAttribute('id'));\n          var label = root.querySelector('label[for=\"'.concat(id, '\"]'));\n          if (label && !axe.commons.dom.isVisible(label, true)) {\n            var name = axe.commons.text.accessibleTextVirtual(virtualNode).trim();\n            var isNameEmpty = name === '';\n            return isNameEmpty;\n          }\n        }\n        return false;\n      }\n    }, {\n      id: 'implicit-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons12 = axe.commons, dom = _axe$commons12.dom, text = _axe$commons12.text;\n        var label = dom.findUpVirtual(virtualNode, 'label');\n        if (label) {\n          return !!text.accessibleText(label, {\n            inControlContext: true\n          });\n        }\n        return false;\n      }\n    }, {\n      id: 'label-content-name-mismatch',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var text = axe.commons.text;\n        var _ref6 = options || {}, pixelThreshold = _ref6.pixelThreshold, occuranceThreshold = _ref6.occuranceThreshold;\n        var accText = text.accessibleText(node).toLowerCase();\n        if (text.isHumanInterpretable(accText) < 1) {\n          return undefined;\n        }\n        var textVNodes = text.visibleTextNodes(virtualNode);\n        var nonLigatureText = textVNodes.filter(function(textVNode) {\n          return !text.isIconLigature(textVNode, pixelThreshold, occuranceThreshold);\n        }).map(function(textVNode) {\n          return textVNode.actualNode.nodeValue;\n        }).join('');\n        var visibleText = text.sanitize(nonLigatureText).toLowerCase();\n        if (!visibleText) {\n          return true;\n        }\n        if (text.isHumanInterpretable(visibleText) < 1) {\n          if (isStringContained(visibleText, accText)) {\n            return true;\n          }\n          return undefined;\n        }\n        return isStringContained(visibleText, accText);\n        function isStringContained(compare, compareWith) {\n          var curatedCompareWith = curateString(compareWith);\n          var curatedCompare = curateString(compare);\n          if (!curatedCompareWith || !curatedCompare) {\n            return false;\n          }\n          return curatedCompareWith.includes(curatedCompare);\n        }\n        function curateString(str) {\n          var noUnicodeStr = text.removeUnicode(str, {\n            emoji: true,\n            nonBmp: true,\n            punctuations: true\n          });\n          return text.sanitize(noUnicodeStr);\n        }\n      },\n      options: {\n        pixelThreshold: .1,\n        occuranceThreshold: 3\n      }\n    }, {\n      id: 'multiple-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var id = axe.utils.escapeSelector(node.getAttribute('id'));\n        var parent = node.parentNode;\n        var root = axe.commons.dom.getRootNode(node);\n        root = root.documentElement || root;\n        var labels = Array.from(root.querySelectorAll('label[for=\"'.concat(id, '\"]')));\n        if (labels.length) {\n          labels = labels.filter(function(label) {\n            return axe.commons.dom.isVisible(label);\n          });\n        }\n        while (parent) {\n          if (parent.nodeName.toUpperCase() === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        if (labels.length > 1) {\n          var ATVisibleLabels = labels.filter(function(label) {\n            return axe.commons.dom.isVisible(label, true);\n          });\n          if (ATVisibleLabels.length > 1) {\n            return undefined;\n          }\n          var labelledby = axe.commons.dom.idrefs(node, 'aria-labelledby');\n          return !labelledby.includes(ATVisibleLabels[0]) ? undefined : false;\n        }\n        return false;\n      }\n    }, {\n      id: 'title-only',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var labelText = axe.commons.text.labelVirtual(virtualNode);\n        return !labelText && !!(node.getAttribute('title') || node.getAttribute('aria-describedby'));\n      }\n    }, {\n      id: 'landmark-is-unique',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var role = axe.commons.aria.getRole(node);\n        var accessibleText = axe.commons.text.accessibleTextVirtual(virtualNode);\n        accessibleText = accessibleText ? accessibleText.toLowerCase() : null;\n        this.data({\n          role: role,\n          accessibleText: accessibleText\n        });\n        this.relatedNodes([ node ]);\n        return true;\n      },\n      after: function after(results, options) {\n        var uniqueLandmarks = [];\n        return results.filter(function(currentResult) {\n          var findMatch = function findMatch(someResult) {\n            return currentResult.data.role === someResult.data.role && currentResult.data.accessibleText === someResult.data.accessibleText;\n          };\n          var matchedResult = uniqueLandmarks.find(findMatch);\n          if (matchedResult) {\n            matchedResult.result = false;\n            matchedResult.relatedNodes.push(currentResult.relatedNodes[0]);\n            return false;\n          }\n          uniqueLandmarks.push(currentResult);\n          currentResult.relatedNodes = [];\n          return true;\n        });\n      }\n    }, {\n      id: 'has-lang',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var isXHTML = axe.utils.isXHTML;\n        var langValue = (node.getAttribute('lang') || '').trim();\n        var xmlLangValue = (node.getAttribute('xml:lang') || '').trim();\n        if (!langValue && xmlLangValue && !isXHTML(document)) {\n          this.data({\n            messageKey: 'noXHTML'\n          });\n          return false;\n        }\n        if (!(langValue || xmlLangValue)) {\n          this.data({\n            messageKey: 'noLang'\n          });\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'valid-lang',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var langs, invalid;\n        langs = (options ? options : axe.utils.validLangs()).map(axe.utils.getBaseLang);\n        invalid = [ 'lang', 'xml:lang' ].reduce(function(invalid, langAttr) {\n          var langVal = node.getAttribute(langAttr);\n          if (typeof langVal !== 'string') {\n            return invalid;\n          }\n          var baselangVal = axe.utils.getBaseLang(langVal);\n          if (baselangVal !== '' && langs.indexOf(baselangVal) === -1) {\n            invalid.push(langAttr + '=\"' + node.getAttribute(langAttr) + '\"');\n          }\n          return invalid;\n        }, []);\n        if (invalid.length) {\n          this.data(invalid);\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'xml-lang-mismatch',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var getBaseLang = axe.utils.getBaseLang;\n        var primaryLangValue = getBaseLang(node.getAttribute('lang'));\n        var primaryXmlLangValue = getBaseLang(node.getAttribute('xml:lang'));\n        return primaryLangValue === primaryXmlLangValue;\n      }\n    }, {\n      id: 'dlitem',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var parent = axe.commons.dom.getComposedParent(node);\n        var parentTagName = parent.nodeName.toUpperCase();\n        var parentRole = axe.commons.aria.getRole(parent, {\n          noImplicit: true\n        });\n        if (parentTagName === 'DIV' && [ 'presentation', 'none', null ].includes(parentRole)) {\n          parent = axe.commons.dom.getComposedParent(parent);\n          parentTagName = parent.nodeName.toUpperCase();\n          parentRole = axe.commons.aria.getRole(parent, {\n            noImplicit: true\n          });\n        }\n        if (parentTagName !== 'DL') {\n          return false;\n        }\n        if (!parentRole || parentRole === 'list') {\n          return true;\n        }\n        return false;\n      }\n    }, {\n      id: 'listitem',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var parent = axe.commons.dom.getComposedParent(node);\n        if (!parent) {\n          return undefined;\n        }\n        var parentTagName = parent.nodeName.toUpperCase();\n        var parentRole = (parent.getAttribute('role') || '').toLowerCase();\n        if ([ 'presentation', 'none', 'list' ].includes(parentRole)) {\n          return true;\n        }\n        if (parentRole && axe.commons.aria.isValidRole(parentRole)) {\n          this.data({\n            messageKey: 'roleNotValid'\n          });\n          return false;\n        }\n        return [ 'UL', 'OL' ].includes(parentTagName);\n      }\n    }, {\n      id: 'only-dlitems',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons13 = axe.commons, dom = _axe$commons13.dom, aria = _axe$commons13.aria;\n        var ALLOWED_ROLES = [ 'definition', 'term', 'list' ];\n        var base = {\n          badNodes: [],\n          hasNonEmptyTextNode: false\n        };\n        var content = virtualNode.children.reduce(function(content, child) {\n          var actualNode = child.actualNode;\n          if (actualNode.nodeName.toUpperCase() === 'DIV' && aria.getRole(actualNode) === null) {\n            return content.concat(child.children);\n          }\n          return content.concat(child);\n        }, []);\n        var result = content.reduce(function(out, childNode) {\n          var actualNode = childNode.actualNode;\n          var tagName = actualNode.nodeName.toUpperCase();\n          if (actualNode.nodeType === 1 && dom.isVisible(actualNode, true, false)) {\n            var explicitRole = aria.getRole(actualNode, {\n              noImplicit: true\n            });\n            if (tagName !== 'DT' && tagName !== 'DD' || explicitRole) {\n              if (!ALLOWED_ROLES.includes(explicitRole)) {\n                out.badNodes.push(actualNode);\n              }\n            }\n          } else if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {\n            out.hasNonEmptyTextNode = true;\n          }\n          return out;\n        }, base);\n        if (result.badNodes.length) {\n          this.relatedNodes(result.badNodes);\n        }\n        return !!result.badNodes.length || result.hasNonEmptyTextNode;\n      }\n    }, {\n      id: 'only-listitems',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons14 = axe.commons, dom = _axe$commons14.dom, aria = _axe$commons14.aria;\n        var hasNonEmptyTextNode = false;\n        var atLeastOneListitem = false;\n        var isEmpty = true;\n        var badNodes = [];\n        var badRoleNodes = [];\n        var badRoles = [];\n        virtualNode.children.forEach(function(vNode) {\n          var actualNode = vNode.actualNode;\n          if (actualNode.nodeType === 3 && actualNode.nodeValue.trim() !== '') {\n            hasNonEmptyTextNode = true;\n            return;\n          }\n          if (actualNode.nodeType !== 1 || !dom.isVisible(actualNode, true, false)) {\n            return;\n          }\n          isEmpty = false;\n          var isLi = actualNode.nodeName.toUpperCase() === 'LI';\n          var role = aria.getRole(vNode);\n          var isListItemRole = role === 'listitem';\n          if (!isLi && !isListItemRole) {\n            badNodes.push(actualNode);\n          }\n          if (isLi && !isListItemRole) {\n            badRoleNodes.push(actualNode);\n            if (!badRoles.includes(role)) {\n              badRoles.push(role);\n            }\n          }\n          if (isListItemRole) {\n            atLeastOneListitem = true;\n          }\n        });\n        if (hasNonEmptyTextNode || badNodes.length) {\n          this.relatedNodes(badNodes);\n          return true;\n        }\n        if (isEmpty || atLeastOneListitem) {\n          return false;\n        }\n        this.relatedNodes(badRoleNodes);\n        this.data({\n          messageKey: 'roleNotValid',\n          roles: badRoles.join(', ')\n        });\n        return true;\n      }\n    }, {\n      id: 'structured-dlitems',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var children = virtualNode.children;\n        if (!children || !children.length) {\n          return false;\n        }\n        var hasDt = false, hasDd = false, nodeName;\n        for (var i = 0; i < children.length; i++) {\n          nodeName = children[i].actualNode.nodeName.toUpperCase();\n          if (nodeName === 'DT') {\n            hasDt = true;\n          }\n          if (hasDt && nodeName === 'DD') {\n            return false;\n          }\n          if (nodeName === 'DD') {\n            hasDd = true;\n          }\n        }\n        return hasDt || hasDd;\n      }\n    }, {\n      id: 'caption',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tracks = axe.utils.querySelectorAll(virtualNode, 'track');\n        var hasCaptions = tracks.some(function(_ref7) {\n          var actualNode = _ref7.actualNode;\n          return (actualNode.getAttribute('kind') || '').toLowerCase() === 'captions';\n        });\n        return hasCaptions ? false : undefined;\n      }\n    }, {\n      id: 'description',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tracks = axe.utils.querySelectorAll(virtualNode, 'track');\n        var hasDescriptions = tracks.some(function(_ref8) {\n          var actualNode = _ref8.actualNode;\n          return (actualNode.getAttribute('kind') || '').toLowerCase() === 'descriptions';\n        });\n        return hasDescriptions ? false : undefined;\n      }\n    }, {\n      id: 'frame-tested',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var resolve = this.async();\n        var _Object$assign = Object.assign({\n          isViolation: false,\n          timeout: 500\n        }, options), isViolation = _Object$assign.isViolation, timeout = _Object$assign.timeout;\n        var timer = setTimeout(function() {\n          timer = setTimeout(function() {\n            timer = null;\n            resolve(isViolation ? false : undefined);\n          }, 0);\n        }, timeout);\n        axe.utils.respondable(node.contentWindow, 'axe.ping', null, undefined, function() {\n          if (timer !== null) {\n            clearTimeout(timer);\n            resolve(true);\n          }\n        });\n      },\n      options: {\n        isViolation: false\n      }\n    }, {\n      id: 'no-autoplay-audio',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!node.duration) {\n          console.warn('axe.utils.preloadMedia did not load metadata');\n          return undefined;\n        }\n        var _options$allowedDurat = options.allowedDuration, allowedDuration = _options$allowedDurat === void 0 ? 3 : _options$allowedDurat;\n        var playableDuration = getPlayableDuration(node);\n        if (playableDuration <= allowedDuration && !node.hasAttribute('loop')) {\n          return true;\n        }\n        if (!node.hasAttribute('controls')) {\n          return false;\n        }\n        return true;\n        function getPlayableDuration(elm) {\n          if (!elm.currentSrc) {\n            return 0;\n          }\n          var playbackRange = getPlaybackRange(elm.currentSrc);\n          if (!playbackRange) {\n            return Math.abs(elm.duration - (elm.currentTime || 0));\n          }\n          if (playbackRange.length === 1) {\n            return Math.abs(elm.duration - playbackRange[0]);\n          }\n          return Math.abs(playbackRange[1] - playbackRange[0]);\n        }\n        function getPlaybackRange(src) {\n          var match = src.match(/#t=(.*)/);\n          if (!match) {\n            return;\n          }\n          var _match = _slicedToArray(match, 2), value = _match[1];\n          var ranges = value.split(',');\n          return ranges.map(function(range) {\n            if (/:/.test(range)) {\n              return convertHourMinSecToSeconds(range);\n            }\n            return parseFloat(range);\n          });\n        }\n        function convertHourMinSecToSeconds(hhMmSs) {\n          var parts = hhMmSs.split(':');\n          var secs = 0;\n          var mins = 1;\n          while (parts.length > 0) {\n            secs += mins * parseInt(parts.pop(), 10);\n            mins *= 60;\n          }\n          return parseFloat(secs);\n        }\n      },\n      options: {\n        allowedDuration: 3\n      }\n    }, {\n      id: 'css-orientation-lock',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _ref9 = context || {}, _ref9$cssom = _ref9.cssom, cssom = _ref9$cssom === void 0 ? undefined : _ref9$cssom;\n        var _ref10 = options || {}, _ref10$degreeThreshol = _ref10.degreeThreshold, degreeThreshold = _ref10$degreeThreshol === void 0 ? 0 : _ref10$degreeThreshol;\n        if (!cssom || !cssom.length) {\n          return undefined;\n        }\n        var isLocked = false;\n        var relatedElements = [];\n        var rulesGroupByDocumentFragment = groupCssomByDocument(cssom);\n        var _loop = function _loop() {\n          var key = _Object$keys[_i2];\n          var _rulesGroupByDocument = rulesGroupByDocumentFragment[key], root = _rulesGroupByDocument.root, rules = _rulesGroupByDocument.rules;\n          var orientationRules = rules.filter(isMediaRuleWithOrientation);\n          if (!orientationRules.length) {\n            return 'continue';\n          }\n          orientationRules.forEach(function(_ref16) {\n            var cssRules = _ref16.cssRules;\n            Array.from(cssRules).forEach(function(cssRule) {\n              var locked = getIsOrientationLocked(cssRule);\n              if (locked && cssRule.selectorText.toUpperCase() !== 'HTML') {\n                var elms = Array.from(root.querySelectorAll(cssRule.selectorText)) || [];\n                relatedElements = relatedElements.concat(elms);\n              }\n              isLocked = isLocked || locked;\n            });\n          });\n        };\n        for (var _i2 = 0, _Object$keys = Object.keys(rulesGroupByDocumentFragment); _i2 < _Object$keys.length; _i2++) {\n          var _ret = _loop();\n          if (_ret === 'continue') {\n            continue;\n          }\n        }\n        if (!isLocked) {\n          return true;\n        }\n        if (relatedElements.length) {\n          this.relatedNodes(relatedElements);\n        }\n        return false;\n        function groupCssomByDocument(cssObjectModel) {\n          return cssObjectModel.reduce(function(out, _ref11) {\n            var sheet = _ref11.sheet, root = _ref11.root, shadowId = _ref11.shadowId;\n            var key = shadowId ? shadowId : 'topDocument';\n            if (!out[key]) {\n              out[key] = {\n                root: root,\n                rules: []\n              };\n            }\n            if (!sheet || !sheet.cssRules) {\n              return out;\n            }\n            var rules = Array.from(sheet.cssRules);\n            out[key].rules = out[key].rules.concat(rules);\n            return out;\n          }, {});\n        }\n        function isMediaRuleWithOrientation(_ref12) {\n          var type = _ref12.type, cssText = _ref12.cssText;\n          if (type !== 4) {\n            return false;\n          }\n          return /orientation:\\s*landscape/i.test(cssText) || /orientation:\\s*portrait/i.test(cssText);\n        }\n        function getIsOrientationLocked(_ref13) {\n          var selectorText = _ref13.selectorText, style = _ref13.style;\n          if (!selectorText || style.length <= 0) {\n            return false;\n          }\n          var transformStyle = style.transform || style.webkitTransform || style.msTransform || false;\n          if (!transformStyle) {\n            return false;\n          }\n          var matches = transformStyle.match(/(rotate|rotateZ|rotate3d|matrix|matrix3d)\\(([^)]+)\\)(?!.*(rotate|rotateZ|rotate3d|matrix|matrix3d))/);\n          if (!matches) {\n            return false;\n          }\n          var _matches = _slicedToArray(matches, 3), transformFn = _matches[1], transformFnValue = _matches[2];\n          var degrees = getRotationInDegrees(transformFn, transformFnValue);\n          if (!degrees) {\n            return false;\n          }\n          degrees = Math.abs(degrees);\n          if (Math.abs(degrees - 180) % 180 <= degreeThreshold) {\n            return false;\n          }\n          return Math.abs(degrees - 90) % 90 <= degreeThreshold;\n        }\n        function getRotationInDegrees(transformFunction, transformFnValue) {\n          switch (transformFunction) {\n           case 'rotate':\n           case 'rotateZ':\n            return getAngleInDegrees(transformFnValue);\n\n           case 'rotate3d':\n            var _transformFnValue$spl = transformFnValue.split(',').map(function(value) {\n              return value.trim();\n            }), _transformFnValue$spl2 = _slicedToArray(_transformFnValue$spl, 4), z = _transformFnValue$spl2[2], angleWithUnit = _transformFnValue$spl2[3];\n            if (parseInt(z) === 0) {\n              return;\n            }\n            return getAngleInDegrees(angleWithUnit);\n\n           case 'matrix':\n           case 'matrix3d':\n            return getAngleInDegreesFromMatrixTransform(transformFnValue);\n\n           default:\n            return;\n          }\n        }\n        function getAngleInDegrees(angleWithUnit) {\n          var _ref14 = angleWithUnit.match(/(deg|grad|rad|turn)/) || [], _ref15 = _slicedToArray(_ref14, 1), unit = _ref15[0];\n          if (!unit) {\n            return;\n          }\n          var angle = parseFloat(angleWithUnit.replace(unit, ''));\n          switch (unit) {\n           case 'rad':\n            return convertRadToDeg(angle);\n\n           case 'grad':\n            return convertGradToDeg(angle);\n\n           case 'turn':\n            return convertTurnToDeg(angle);\n\n           case 'deg':\n           default:\n            return parseInt(angle);\n          }\n        }\n        function getAngleInDegreesFromMatrixTransform(transformFnValue) {\n          var values = transformFnValue.split(',');\n          if (values.length <= 6) {\n            var _values = _slicedToArray(values, 2), a = _values[0], _b = _values[1];\n            var radians = Math.atan2(parseFloat(_b), parseFloat(a));\n            return convertRadToDeg(radians);\n          }\n          var sinB = parseFloat(values[8]);\n          var b = Math.asin(sinB);\n          var cosB = Math.cos(b);\n          var rotateZRadians = Math.acos(parseFloat(values[0]) / cosB);\n          return convertRadToDeg(rotateZRadians);\n        }\n        function convertRadToDeg(radians) {\n          return Math.round(radians * (180 / Math.PI));\n        }\n        function convertGradToDeg(grad) {\n          grad = grad % 400;\n          if (grad < 0) {\n            grad += 400;\n          }\n          return Math.round(grad / 400 * 360);\n        }\n        function convertTurnToDeg(turn) {\n          return Math.round(360 / (1 / turn));\n        }\n      },\n      options: {\n        degreeThreshold: 2\n      }\n    }, {\n      id: 'meta-viewport-large',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _ref17 = options || {}, _ref17$scaleMinimum = _ref17.scaleMinimum, scaleMinimum = _ref17$scaleMinimum === void 0 ? 2 : _ref17$scaleMinimum, _ref17$lowerBound = _ref17.lowerBound, lowerBound = _ref17$lowerBound === void 0 ? false : _ref17$lowerBound;\n        var content = node.getAttribute('content') || '';\n        if (!content) {\n          return true;\n        }\n        var result = content.split(/[;,]/).reduce(function(out, item) {\n          var contentValue = item.trim();\n          if (!contentValue) {\n            return out;\n          }\n          var _contentValue$split = contentValue.split('='), _contentValue$split2 = _slicedToArray(_contentValue$split, 2), key = _contentValue$split2[0], value = _contentValue$split2[1];\n          if (!key || !value) {\n            return out;\n          }\n          var curatedKey = key.toLowerCase().trim();\n          var curatedValue = value.toLowerCase().trim();\n          if (curatedKey === 'maximum-scale' && curatedValue === 'yes') {\n            curatedValue = 1;\n          }\n          if (curatedKey === 'maximum-scale' && parseFloat(curatedValue) < 0) {\n            return out;\n          }\n          out[curatedKey] = curatedValue;\n          return out;\n        }, {});\n        if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n          return true;\n        }\n        if (!lowerBound && result['user-scalable'] === 'no') {\n          this.data('user-scalable=no');\n          return false;\n        }\n        if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < scaleMinimum) {\n          this.data('maximum-scale');\n          return false;\n        }\n        return true;\n      },\n      options: {\n        scaleMinimum: 5,\n        lowerBound: 2\n      }\n    }, {\n      id: 'meta-viewport',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _ref18 = options || {}, _ref18$scaleMinimum = _ref18.scaleMinimum, scaleMinimum = _ref18$scaleMinimum === void 0 ? 2 : _ref18$scaleMinimum, _ref18$lowerBound = _ref18.lowerBound, lowerBound = _ref18$lowerBound === void 0 ? false : _ref18$lowerBound;\n        var content = node.getAttribute('content') || '';\n        if (!content) {\n          return true;\n        }\n        var result = content.split(/[;,]/).reduce(function(out, item) {\n          var contentValue = item.trim();\n          if (!contentValue) {\n            return out;\n          }\n          var _contentValue$split3 = contentValue.split('='), _contentValue$split4 = _slicedToArray(_contentValue$split3, 2), key = _contentValue$split4[0], value = _contentValue$split4[1];\n          if (!key || !value) {\n            return out;\n          }\n          var curatedKey = key.toLowerCase().trim();\n          var curatedValue = value.toLowerCase().trim();\n          if (curatedKey === 'maximum-scale' && curatedValue === 'yes') {\n            curatedValue = 1;\n          }\n          if (curatedKey === 'maximum-scale' && parseFloat(curatedValue) < 0) {\n            return out;\n          }\n          out[curatedKey] = curatedValue;\n          return out;\n        }, {});\n        if (lowerBound && result['maximum-scale'] && parseFloat(result['maximum-scale']) < lowerBound) {\n          return true;\n        }\n        if (!lowerBound && result['user-scalable'] === 'no') {\n          this.data('user-scalable=no');\n          return false;\n        }\n        if (result['maximum-scale'] && parseFloat(result['maximum-scale']) < scaleMinimum) {\n          this.data('maximum-scale');\n          return false;\n        }\n        return true;\n      },\n      options: {\n        scaleMinimum: 2\n      }\n    }, {\n      id: 'header-present',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return !!axe.utils.querySelectorAll(virtualNode, 'h1, h2, h3, h4, h5, h6, [role=\"heading\"]')[0];\n      }\n    }, {\n      id: 'heading-order',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var ariaHeadingLevel = node.getAttribute('aria-level');\n        if (ariaHeadingLevel !== null) {\n          this.data(parseInt(ariaHeadingLevel, 10));\n          return true;\n        }\n        var headingLevel = node.nodeName.toUpperCase().match(/H(\\d)/);\n        if (headingLevel) {\n          this.data(parseInt(headingLevel[1], 10));\n          return true;\n        }\n        return true;\n      },\n      after: function after(results, options) {\n        if (results.length < 2) {\n          return results;\n        }\n        var prevLevel = results[0].data;\n        for (var i = 1; i < results.length; i++) {\n          if (results[i].result && results[i].data > prevLevel + 1) {\n            results[i].result = false;\n          }\n          prevLevel = results[i].data;\n        }\n        return results;\n      }\n    }, {\n      id: 'identical-links-same-purpose',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons15 = axe.commons, dom = _axe$commons15.dom, text = _axe$commons15.text;\n        var accText = text.accessibleTextVirtual(virtualNode);\n        var name = text.sanitize(text.removeUnicode(accText, {\n          emoji: true,\n          nonBmp: true,\n          punctuations: true\n        })).toLowerCase();\n        if (!name) {\n          return undefined;\n        }\n        var afterData = {\n          name: name,\n          urlProps: dom.urlPropsFromAttribute(node, 'href')\n        };\n        this.data(afterData);\n        this.relatedNodes([ node ]);\n        return true;\n      },\n      after: function after(results, options) {\n        if (results.length < 2) {\n          return results;\n        }\n        var incompleteResults = results.filter(function(_ref19) {\n          var result = _ref19.result;\n          return result !== undefined;\n        });\n        var uniqueResults = [];\n        var nameMap = {};\n        var _loop2 = function _loop2(index) {\n          var _currentResult$relate;\n          var currentResult = incompleteResults[index];\n          var _currentResult$data = currentResult.data, name = _currentResult$data.name, urlProps = _currentResult$data.urlProps;\n          if (nameMap[name]) {\n            return 'continue';\n          }\n          var sameNameResults = incompleteResults.filter(function(_ref20, resultNum) {\n            var data = _ref20.data;\n            return data.name === name && resultNum !== index;\n          });\n          var isSameUrl = sameNameResults.every(function(_ref21) {\n            var data = _ref21.data;\n            return isIdenticalObject(data.urlProps, urlProps);\n          });\n          if (sameNameResults.length && !isSameUrl) {\n            currentResult.result = undefined;\n          }\n          currentResult.relatedNodes = [];\n          (_currentResult$relate = currentResult.relatedNodes).push.apply(_currentResult$relate, _toConsumableArray(sameNameResults.map(function(node) {\n            return node.relatedNodes[0];\n          })));\n          nameMap[name] = sameNameResults;\n          uniqueResults.push(currentResult);\n        };\n        for (var index = 0; index < incompleteResults.length; index++) {\n          var _ret2 = _loop2(index);\n          if (_ret2 === 'continue') {\n            continue;\n          }\n        }\n        return uniqueResults;\n        function isIdenticalObject(a, b) {\n          if (!a || !b) {\n            return false;\n          }\n          var aProps = Object.getOwnPropertyNames(a);\n          var bProps = Object.getOwnPropertyNames(b);\n          if (aProps.length !== bProps.length) {\n            return false;\n          }\n          var result = aProps.every(function(propName) {\n            var aValue = a[propName];\n            var bValue = b[propName];\n            if (_typeof(aValue) !== _typeof(bValue)) {\n              return false;\n            }\n            if (typeof aValue === 'object' || typeof bValue === 'object') {\n              return isIdenticalObject(aValue, bValue);\n            }\n            return aValue === bValue;\n          });\n          return result;\n        }\n      }\n    }, {\n      id: 'internal-link-present',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var links = axe.utils.querySelectorAll(virtualNode, 'a[href]');\n        return links.some(function(vLink) {\n          return /^#[^/!]/.test(vLink.actualNode.getAttribute('href'));\n        });\n      }\n    }, {\n      id: 'landmark',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return axe.utils.querySelectorAll(virtualNode, 'main, [role=\"main\"]').length > 0;\n      }\n    }, {\n      id: 'meta-refresh',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var content = node.getAttribute('content') || '', parsedParams = content.split(/[;,]/);\n        return content === '' || parsedParams[0] === '0';\n      }\n    }, {\n      id: 'p-as-heading',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var siblings = Array.from(node.parentNode.children);\n        var currentIndex = siblings.indexOf(node);\n        options = options || {};\n        var margins = options.margins || [];\n        var nextSibling = siblings.slice(currentIndex + 1).find(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P';\n        });\n        var prevSibling = siblings.slice(0, currentIndex).reverse().find(function(elm) {\n          return elm.nodeName.toUpperCase() === 'P';\n        });\n        function getTextContainer(elm) {\n          var nextNode = elm;\n          var outerText = elm.textContent.trim();\n          var innerText = outerText;\n          while (innerText === outerText && nextNode !== undefined) {\n            var i = -1;\n            elm = nextNode;\n            if (elm.children.length === 0) {\n              return elm;\n            }\n            do {\n              i++;\n              innerText = elm.children[i].textContent.trim();\n            } while (innerText === '' && i + 1 < elm.children.length);\n            nextNode = elm.children[i];\n          }\n          return elm;\n        }\n        function normalizeFontWeight(weight) {\n          switch (weight) {\n           case 'lighter':\n            return 100;\n\n           case 'normal':\n            return 400;\n\n           case 'bold':\n            return 700;\n\n           case 'bolder':\n            return 900;\n          }\n          weight = parseInt(weight);\n          return !isNaN(weight) ? weight : 400;\n        }\n        function getStyleValues(node) {\n          var style = window.getComputedStyle(getTextContainer(node));\n          return {\n            fontWeight: normalizeFontWeight(style.getPropertyValue('font-weight')),\n            fontSize: parseInt(style.getPropertyValue('font-size')),\n            isItalic: style.getPropertyValue('font-style') === 'italic'\n          };\n        }\n        function isHeaderStyle(styleA, styleB, margins) {\n          return margins.reduce(function(out, margin) {\n            return out || (!margin.size || styleA.fontSize / margin.size > styleB.fontSize) && (!margin.weight || styleA.fontWeight - margin.weight > styleB.fontWeight) && (!margin.italic || styleA.isItalic && !styleB.isItalic);\n          }, false);\n        }\n        var currStyle = getStyleValues(node);\n        var nextStyle = nextSibling ? getStyleValues(nextSibling) : null;\n        var prevStyle = prevSibling ? getStyleValues(prevSibling) : null;\n        if (!nextStyle || !isHeaderStyle(currStyle, nextStyle, margins)) {\n          return true;\n        }\n        var blockquote = axe.commons.dom.findUpVirtual(virtualNode, 'blockquote');\n        if (blockquote && blockquote.nodeName.toUpperCase() === 'BLOCKQUOTE') {\n          return undefined;\n        }\n        if (prevStyle && !isHeaderStyle(currStyle, prevStyle, margins)) {\n          return undefined;\n        }\n        return false;\n      },\n      options: {\n        margins: [ {\n          weight: 150,\n          italic: true\n        }, {\n          weight: 150,\n          size: 1.15\n        }, {\n          italic: true,\n          size: 1.15\n        }, {\n          size: 1.4\n        } ]\n      }\n    }, {\n      id: 'region',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons16 = axe.commons, dom = _axe$commons16.dom, aria = _axe$commons16.aria;\n        var landmarkRoles = aria.getRolesByType('landmark');\n        var implicitAriaLiveRoles = [ 'alert', 'log', 'status' ];\n        var regionlessNodes = axe._cache.get('regionlessNodes');\n        if (regionlessNodes) {\n          return !regionlessNodes.includes(virtualNode);\n        }\n        var implicitLandmarks = landmarkRoles.reduce(function(arr, role) {\n          return arr.concat(aria.implicitNodes(role));\n        }, []).filter(function(r) {\n          return r !== null;\n        });\n        function isRegion(virtualNode) {\n          var node = virtualNode.actualNode;\n          var explicitRole = axe.commons.aria.getRole(node, {\n            noImplicit: true\n          });\n          var ariaLive = (node.getAttribute('aria-live') || '').toLowerCase().trim();\n          if ([ 'assertive', 'polite' ].includes(ariaLive) || implicitAriaLiveRoles.includes(explicitRole)) {\n            return true;\n          }\n          if (explicitRole) {\n            return explicitRole === 'dialog' || landmarkRoles.includes(explicitRole);\n          }\n          return implicitLandmarks.some(function(implicitSelector) {\n            var matches = axe.utils.matchesSelector(node, implicitSelector);\n            if (node.nodeName.toUpperCase() === 'FORM') {\n              var titleAttr = node.getAttribute('title');\n              var title = titleAttr && titleAttr.trim() !== '' ? axe.commons.text.sanitize(titleAttr) : null;\n              return matches && (!!aria.labelVirtual(virtualNode) || !!title);\n            }\n            return matches;\n          });\n        }\n        function findRegionlessElms(virtualNode) {\n          var node = virtualNode.actualNode;\n          if (isRegion(virtualNode) || dom.isSkipLink(virtualNode.actualNode) && dom.getElementByReference(virtualNode.actualNode, 'href') || !dom.isVisible(node, true)) {\n            var vNode = virtualNode;\n            while (vNode) {\n              vNode._hasRegionDescendant = true;\n              vNode = vNode.parent;\n            }\n            return [];\n          } else if (node !== document.body && dom.hasContent(node, true)) {\n            return [ virtualNode ];\n          } else {\n            return virtualNode.children.filter(function(_ref22) {\n              var actualNode = _ref22.actualNode;\n              return actualNode.nodeType === 1;\n            }).map(findRegionlessElms).reduce(function(a, b) {\n              return a.concat(b);\n            }, []);\n          }\n        }\n        regionlessNodes = findRegionlessElms(axe._tree[0]).map(function(vNode) {\n          while (vNode.parent && !vNode.parent._hasRegionDescendant && vNode.parent.actualNode !== document.body) {\n            vNode = vNode.parent;\n          }\n          return vNode;\n        }).filter(function(vNode, index, array) {\n          return array.indexOf(vNode) === index;\n        });\n        axe._cache.set('regionlessNodes', regionlessNodes);\n        return !regionlessNodes.includes(virtualNode);\n      }\n    }, {\n      id: 'skip-link',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var target = axe.commons.dom.getElementByReference(node, 'href');\n        if (target) {\n          return axe.commons.dom.isVisible(target, true) || undefined;\n        }\n        return false;\n      }\n    }, {\n      id: 'unique-frame-title',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var title = axe.commons.text.sanitize(node.title).trim().toLowerCase();\n        this.data(title);\n        return true;\n      },\n      after: function after(results, options) {\n        var titles = {};\n        results.forEach(function(r) {\n          titles[r.data] = titles[r.data] !== undefined ? ++titles[r.data] : 0;\n        });\n        results.forEach(function(r) {\n          r.result = !!titles[r.data];\n        });\n        return results;\n      }\n    }, {\n      id: 'duplicate-id-active',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var id = node.getAttribute('id').trim();\n        if (!id) {\n          return true;\n        }\n        var root = axe.commons.dom.getRootNode(node);\n        var matchingNodes = Array.from(root.querySelectorAll('[id=\"'.concat(axe.utils.escapeSelector(id), '\"]'))).filter(function(foundNode) {\n          return foundNode !== node;\n        });\n        if (matchingNodes.length) {\n          this.relatedNodes(matchingNodes);\n        }\n        this.data(id);\n        return matchingNodes.length === 0;\n      },\n      after: function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'duplicate-id-aria',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var id = node.getAttribute('id').trim();\n        if (!id) {\n          return true;\n        }\n        var root = axe.commons.dom.getRootNode(node);\n        var matchingNodes = Array.from(root.querySelectorAll('[id=\"'.concat(axe.utils.escapeSelector(id), '\"]'))).filter(function(foundNode) {\n          return foundNode !== node;\n        });\n        if (matchingNodes.length) {\n          this.relatedNodes(matchingNodes);\n        }\n        this.data(id);\n        return matchingNodes.length === 0;\n      },\n      after: function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'duplicate-id',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var id = node.getAttribute('id').trim();\n        if (!id) {\n          return true;\n        }\n        var root = axe.commons.dom.getRootNode(node);\n        var matchingNodes = Array.from(root.querySelectorAll('[id=\"'.concat(axe.utils.escapeSelector(id), '\"]'))).filter(function(foundNode) {\n          return foundNode !== node;\n        });\n        if (matchingNodes.length) {\n          this.relatedNodes(matchingNodes);\n        }\n        this.data(id);\n        return matchingNodes.length === 0;\n      },\n      after: function after(results, options) {\n        var uniqueIds = [];\n        return results.filter(function(r) {\n          if (uniqueIds.indexOf(r.data) === -1) {\n            uniqueIds.push(r.data);\n            return true;\n          }\n          return false;\n        });\n      }\n    }, {\n      id: 'aria-label',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons17 = axe.commons, text = _axe$commons17.text, aria = _axe$commons17.aria;\n        return !!text.sanitize(aria.arialabelText(virtualNode));\n      }\n    }, {\n      id: 'aria-labelledby',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var _axe$commons18 = axe.commons, text = _axe$commons18.text, aria = _axe$commons18.aria;\n        return !!text.sanitize(aria.arialabelledbyText(node));\n      }\n    }, {\n      id: 'avoid-inline-spacing',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var inlineSpacingCssProperties = [ 'line-height', 'letter-spacing', 'word-spacing' ];\n        var overriddenProperties = inlineSpacingCssProperties.filter(function(property) {\n          if (node.style.getPropertyPriority(property) === 'important') {\n            return property;\n          }\n        });\n        if (overriddenProperties.length > 0) {\n          this.data(overriddenProperties);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'button-has-visible-text',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleTextVirtual(virtualNode);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      id: 'doc-has-title',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var title = document.title;\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }\n    }, {\n      id: 'exists',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return undefined;\n      }\n    }, {\n      id: 'has-alt',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var nodeName = virtualNode.props.nodeName;\n        if (![ 'img', 'input', 'area' ].includes(nodeName)) {\n          return false;\n        }\n        return virtualNode.hasAttr('alt');\n      }\n    }, {\n      id: 'has-visible-text',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return axe.commons.text.accessibleTextVirtual(virtualNode).length > 0;\n      }\n    }, {\n      id: 'is-on-screen',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return axe.commons.dom.isVisible(node, false) && !axe.commons.dom.isOffscreen(node);\n      }\n    }, {\n      id: 'non-empty-alt',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var label = virtualNode.attr('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }\n    }, {\n      id: 'non-empty-if-present',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        if (label) {\n          this.data({\n            messageKey: 'has-label'\n          });\n        }\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].includes(type)) {\n          return label === null;\n        }\n        return false;\n      }\n    }, {\n      id: 'non-empty-title',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var text = axe.commons.text;\n        return !!text.sanitize(text.titleText(node));\n      }\n    }, {\n      id: 'non-empty-value',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }\n    }, {\n      id: 'role-none',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return node.getAttribute('role') === 'none';\n      }\n    }, {\n      id: 'role-presentation',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return node.getAttribute('role') === 'presentation';\n      }\n    }, {\n      id: 'svg-non-empty-title',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var titleNode = virtualNode.children.find(function(_ref23) {\n          var props = _ref23.props;\n          return props.nodeName === 'title';\n        });\n        return !!titleNode && titleNode.actualNode.textContent.trim() !== '';\n      }\n    }, {\n      id: 'caption-faked',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var table = axe.commons.table.toGrid(node);\n        var firstRow = table[0];\n        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n          return true;\n        }\n        return firstRow.reduce(function(out, curr, i) {\n          return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== undefined;\n        }, false);\n      }\n    }, {\n      id: 'has-caption',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return !!node.caption;\n      },\n      deprecated: true\n    }, {\n      id: 'has-summary',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return !!node.summary;\n      },\n      deprecated: true\n    }, {\n      id: 'has-th',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var row, cell, badCells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1) {\n              badCells.push(cell);\n            }\n          }\n        }\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return true;\n        }\n        return false;\n      },\n      deprecated: true\n    }, {\n      id: 'html5-scope',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        if (!axe.commons.dom.isHTML5(document)) {\n          return true;\n        }\n        return node.nodeName.toUpperCase() === 'TH';\n      }\n    }, {\n      id: 'same-caption-summary',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        return !!(node.summary && node.caption) && node.summary.toLowerCase() === axe.commons.text.accessibleText(node.caption).toLowerCase();\n      }\n    }, {\n      id: 'scope-value',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        options = options || {};\n        var value = node.getAttribute('scope').toLowerCase();\n        var validVals = [ 'row', 'col', 'rowgroup', 'colgroup' ] || 0;\n        return validVals.indexOf(value) !== -1;\n      }\n    }, {\n      id: 'td-has-header',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tableUtils = axe.commons.table;\n        var badCells = [];\n        var cells = tableUtils.getAllCells(node);\n        var tableGrid = tableUtils.toGrid(node);\n        cells.forEach(function(cell) {\n          if (axe.commons.dom.hasContent(cell) && tableUtils.isDataCell(cell) && !axe.commons.aria.label(cell)) {\n            var hasHeaders = tableUtils.getHeaders(cell, tableGrid).some(function(header) {\n              return header !== null && !!axe.commons.dom.hasContent(header);\n            });\n            if (!hasHeaders) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        return true;\n      }\n    }, {\n      id: 'td-headers-attr',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var cells = [];\n        var reviewCells = [];\n        var badCells = [];\n        for (var rowIndex = 0; rowIndex < node.rows.length; rowIndex++) {\n          var row = node.rows[rowIndex];\n          for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {\n            cells.push(row.cells[cellIndex]);\n          }\n        }\n        var ids = cells.reduce(function(ids, cell) {\n          if (cell.getAttribute('id')) {\n            ids.push(cell.getAttribute('id'));\n          }\n          return ids;\n        }, []);\n        cells.forEach(function(cell) {\n          var isSelf = false;\n          var notOfTable = false;\n          if (!cell.hasAttribute('headers')) {\n            return;\n          }\n          var headersAttr = cell.getAttribute('headers').trim();\n          if (!headersAttr) {\n            return reviewCells.push(cell);\n          }\n          var headers = axe.utils.tokenList(headersAttr);\n          if (headers.length !== 0) {\n            if (cell.getAttribute('id')) {\n              isSelf = headers.indexOf(cell.getAttribute('id').trim()) !== -1;\n            }\n            notOfTable = headers.some(function(header) {\n              return !ids.includes(header);\n            });\n            if (isSelf || notOfTable) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length > 0) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        if (reviewCells.length) {\n          this.relatedNodes(reviewCells);\n          return undefined;\n        }\n        return true;\n      }\n    }, {\n      id: 'th-has-data-cells',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var tableUtils = axe.commons.table;\n        var cells = tableUtils.getAllCells(node);\n        var checkResult = this;\n        var reffedHeaders = [];\n        cells.forEach(function(cell) {\n          var headers = cell.getAttribute('headers');\n          if (headers) {\n            reffedHeaders = reffedHeaders.concat(headers.split(/\\s+/));\n          }\n          var ariaLabel = cell.getAttribute('aria-labelledby');\n          if (ariaLabel) {\n            reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n          }\n        });\n        var headers = cells.filter(function(cell) {\n          if (axe.commons.text.sanitize(cell.textContent) === '') {\n            return false;\n          }\n          return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n        });\n        var tableGrid = tableUtils.toGrid(node);\n        var out = true;\n        headers.forEach(function(header) {\n          if (header.getAttribute('id') && reffedHeaders.includes(header.getAttribute('id'))) {\n            return;\n          }\n          var pos = tableUtils.getCellPosition(header, tableGrid);\n          var hasCell = false;\n          if (tableUtils.isColumnHeader(header)) {\n            hasCell = tableUtils.traverse('down', pos, tableGrid).find(function(cell) {\n              return !tableUtils.isColumnHeader(cell) && tableUtils.getHeaders(cell, tableGrid).includes(header);\n            });\n          }\n          if (!hasCell && tableUtils.isRowHeader(header)) {\n            hasCell = tableUtils.traverse('right', pos, tableGrid).find(function(cell) {\n              return !tableUtils.isRowHeader(cell) && tableUtils.getHeaders(cell, tableGrid).includes(header);\n            });\n          }\n          if (!hasCell) {\n            checkResult.relatedNodes(header);\n          }\n          out = out && hasCell;\n        });\n        return out ? true : undefined;\n      }\n    }, {\n      id: 'hidden-content',\n      evaluate: function evaluate(node, options, virtualNode, context) {\n        var whitelist = [ 'SCRIPT', 'HEAD', 'TITLE', 'NOSCRIPT', 'STYLE', 'TEMPLATE' ];\n        if (!whitelist.includes(node.nodeName.toUpperCase()) && axe.commons.dom.hasContentVirtual(virtualNode)) {\n          var styles = window.getComputedStyle(node);\n          if (styles.getPropertyValue('display') === 'none') {\n            return undefined;\n          } else if (styles.getPropertyValue('visibility') === 'hidden') {\n            var parent = axe.commons.dom.getComposedParent(node);\n            var parentStyle = parent && window.getComputedStyle(parent);\n            if (!parentStyle || parentStyle.getPropertyValue('visibility') !== 'hidden') {\n              return undefined;\n            }\n          }\n        }\n        return true;\n      }\n    } ],\n    commons: function() {\n      var commons = {};\n      var aria = commons.aria = {};\n      var lookupTable = aria.lookupTable = {};\n      var isNull = function isNull(value) {\n        return value === null;\n      };\n      var isNotNull = function isNotNull(value) {\n        return value !== null;\n      };\n      lookupTable.attributes = {\n        'aria-activedescendant': {\n          type: 'idref',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-atomic': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-autocomplete': {\n          type: 'nmtoken',\n          values: [ 'inline', 'list', 'both', 'none' ],\n          unsupported: false\n        },\n        'aria-busy': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-checked': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'mixed', 'undefined' ],\n          unsupported: false\n        },\n        'aria-colcount': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-colindex': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-colspan': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-controls': {\n          type: 'idrefs',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-current': {\n          type: 'nmtoken',\n          allowEmpty: true,\n          values: [ 'page', 'step', 'location', 'date', 'time', 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-describedby': {\n          type: 'idrefs',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-describedat': {\n          unsupported: true,\n          unstandardized: true\n        },\n        'aria-details': {\n          type: 'idref',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-disabled': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-dropeffect': {\n          type: 'nmtokens',\n          values: [ 'copy', 'move', 'reference', 'execute', 'popup', 'none' ],\n          unsupported: false\n        },\n        'aria-errormessage': {\n          type: 'idref',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-expanded': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ],\n          unsupported: false\n        },\n        'aria-flowto': {\n          type: 'idrefs',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-grabbed': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ],\n          unsupported: false\n        },\n        'aria-haspopup': {\n          type: 'nmtoken',\n          allowEmpty: true,\n          values: [ 'true', 'false', 'menu', 'listbox', 'tree', 'grid', 'dialog' ],\n          unsupported: false\n        },\n        'aria-hidden': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-invalid': {\n          type: 'nmtoken',\n          allowEmpty: true,\n          values: [ 'true', 'false', 'spelling', 'grammar' ],\n          unsupported: false\n        },\n        'aria-keyshortcuts': {\n          type: 'string',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-label': {\n          type: 'string',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-labelledby': {\n          type: 'idrefs',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-level': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-live': {\n          type: 'nmtoken',\n          values: [ 'off', 'polite', 'assertive' ],\n          unsupported: false\n        },\n        'aria-modal': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-multiline': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-multiselectable': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-orientation': {\n          type: 'nmtoken',\n          values: [ 'horizontal', 'vertical' ],\n          unsupported: false\n        },\n        'aria-owns': {\n          type: 'idrefs',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-placeholder': {\n          type: 'string',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-posinset': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-pressed': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'mixed', 'undefined' ],\n          unsupported: false\n        },\n        'aria-readonly': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-relevant': {\n          type: 'nmtokens',\n          values: [ 'additions', 'removals', 'text', 'all' ],\n          unsupported: false\n        },\n        'aria-required': {\n          type: 'boolean',\n          values: [ 'true', 'false' ],\n          unsupported: false\n        },\n        'aria-roledescription': {\n          type: 'string',\n          allowEmpty: true,\n          unsupported: false\n        },\n        'aria-rowcount': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-rowindex': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-rowspan': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-selected': {\n          type: 'nmtoken',\n          values: [ 'true', 'false', 'undefined' ],\n          unsupported: false\n        },\n        'aria-setsize': {\n          type: 'int',\n          unsupported: false\n        },\n        'aria-sort': {\n          type: 'nmtoken',\n          values: [ 'ascending', 'descending', 'other', 'none' ],\n          unsupported: false\n        },\n        'aria-valuemax': {\n          type: 'decimal',\n          unsupported: false\n        },\n        'aria-valuemin': {\n          type: 'decimal',\n          unsupported: false\n        },\n        'aria-valuenow': {\n          type: 'decimal',\n          unsupported: false\n        },\n        'aria-valuetext': {\n          type: 'string',\n          unsupported: false\n        }\n      };\n      lookupTable.globalAttributes = [ 'aria-atomic', 'aria-busy', 'aria-controls', 'aria-current', 'aria-describedby', 'aria-details', 'aria-disabled', 'aria-dropeffect', 'aria-flowto', 'aria-grabbed', 'aria-haspopup', 'aria-hidden', 'aria-invalid', 'aria-keyshortcuts', 'aria-label', 'aria-labelledby', 'aria-live', 'aria-owns', 'aria-relevant', 'aria-roledescription' ];\n      lookupTable.role = {\n        alert: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        alertdialog: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'dialog', 'section' ]\n        },\n        application: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'article', 'audio', 'embed', 'iframe', 'object', 'section', 'svg', 'video' ]\n        },\n        article: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'article' ],\n          unsupported: false\n        },\n        banner: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'header' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        button: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-pressed', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'button', 'input[type=\"button\"]', 'input[type=\"image\"]', 'input[type=\"reset\"]', 'input[type=\"submit\"]', 'summary' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        cell: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colindex', 'aria-colspan', 'aria-rowindex', 'aria-rowspan', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'td', 'th' ],\n          unsupported: false\n        },\n        checkbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-checked', 'aria-required', 'aria-readonly', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'input[type=\"checkbox\"]' ],\n          unsupported: false,\n          allowedElements: [ 'button' ]\n        },\n        columnheader: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'th' ],\n          unsupported: false\n        },\n        combobox: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-autocomplete', 'aria-required', 'aria-activedescendant', 'aria-orientation', 'aria-errormessage' ],\n            required: [ 'aria-expanded' ]\n          },\n          owned: {\n            all: [ 'listbox', 'tree', 'grid', 'dialog', 'textbox' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'input',\n            properties: {\n              type: [ 'text', 'search', 'tel', 'url', 'email' ]\n            }\n          } ]\n        },\n        command: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        complementary: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'aside' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        composite: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        contentinfo: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'footer' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        definition: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'dd', 'dfn' ],\n          unsupported: false\n        },\n        dialog: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-modal', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'dialog' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        directory: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        document: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'body' ],\n          unsupported: false,\n          allowedElements: [ 'article', 'embed', 'iframe', 'object', 'section', 'svg' ]\n        },\n        'doc-abstract': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-acknowledgments': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-afterword': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-appendix': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-backlink': {\n          type: 'link',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        'doc-biblioentry': {\n          type: 'listitem',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: [ 'doc-bibliography' ],\n          unsupported: false,\n          allowedElements: [ 'li' ]\n        },\n        'doc-bibliography': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'doc-biblioentry' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-biblioref': {\n          type: 'link',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        'doc-chapter': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-colophon': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-conclusion': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-cover': {\n          type: 'img',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false\n        },\n        'doc-credit': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-credits': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-dedication': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-endnote': {\n          type: 'listitem',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: [ 'doc-endnotes' ],\n          unsupported: false,\n          allowedElements: [ 'li' ]\n        },\n        'doc-endnotes': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'doc-endnote' ]\n          },\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-epigraph': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false\n        },\n        'doc-epilogue': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-errata': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-example': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'aside', 'section' ]\n        },\n        'doc-footnote': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'aside', 'footer', 'header' ]\n        },\n        'doc-foreword': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-glossary': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: [ 'term', 'definition' ],\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'dl' ]\n        },\n        'doc-glossref': {\n          type: 'link',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        'doc-index': {\n          type: 'navigation',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'nav', 'section' ]\n        },\n        'doc-introduction': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-noteref': {\n          type: 'link',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        'doc-notice': {\n          type: 'note',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-pagebreak': {\n          type: 'separator',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'hr' ]\n        },\n        'doc-pagelist': {\n          type: 'navigation',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'nav', 'section' ]\n        },\n        'doc-part': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-preface': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-prologue': {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-pullquote': {\n          type: 'none',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'aside', 'section' ]\n        },\n        'doc-qna': {\n          type: 'section',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        'doc-subtitle': {\n          type: 'sectionhead',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: {\n            nodeName: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ]\n          }\n        },\n        'doc-tip': {\n          type: 'note',\n          attributes: {\n            allowed: [ 'aria-expanded' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'aside' ]\n        },\n        'doc-toc': {\n          type: 'navigation',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          namefrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'nav', 'section' ]\n        },\n        feed: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'article' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'article', 'aside', 'section' ]\n        },\n        figure: {\n          type: 'structure',\n          unsupported: false\n        },\n        form: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'form' ],\n          unsupported: false\n        },\n        grid: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-colcount', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-rowcount', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'rowgroup', 'row' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'table' ],\n          unsupported: false\n        },\n        gridcell: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-selected', 'aria-readonly', 'aria-required', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'td', 'th' ],\n          unsupported: false\n        },\n        group: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'details', 'optgroup' ],\n          unsupported: false,\n          allowedElements: [ 'dl', 'figcaption', 'fieldset', 'figure', 'footer', 'header', 'ol', 'ul' ]\n        },\n        heading: {\n          type: 'structure',\n          attributes: {\n            required: [ 'aria-level' ],\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6' ],\n          unsupported: false\n        },\n        img: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'img' ],\n          unsupported: false,\n          allowedElements: [ 'embed', 'iframe', 'object', 'svg' ]\n        },\n        input: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        landmark: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        link: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'a[href]' ],\n          unsupported: false,\n          allowedElements: [ 'button', {\n            nodeName: 'input',\n            properties: {\n              type: [ 'image', 'button' ]\n            }\n          } ]\n        },\n        list: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'listitem' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'ol', 'ul', 'dl' ],\n          unsupported: false\n        },\n        listbox: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'option' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'select' ],\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        listitem: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'list' ],\n          implicit: [ 'li', 'dt' ],\n          unsupported: false\n        },\n        log: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        main: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'main' ],\n          unsupported: false,\n          allowedElements: [ 'article', 'section' ]\n        },\n        marquee: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        math: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'math' ],\n          unsupported: false\n        },\n        menu: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'menu[type=\"context\"]' ],\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        menubar: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'menuitem', 'menuitemradio', 'menuitemcheckbox' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        menuitem: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-posinset', 'aria-setsize', 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"command\"]' ],\n          unsupported: false,\n          allowedElements: [ 'button', 'li', {\n            nodeName: 'iput',\n            properties: {\n              type: [ 'image', 'button' ]\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        menuitemcheckbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-checked', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"checkbox\"]' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'button', 'li' ]\n          }, {\n            nodeName: 'input',\n            properties: {\n              type: [ 'checkbox', 'image', 'button' ]\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        menuitemradio: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-checked', 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'menu', 'menubar' ],\n          implicit: [ 'menuitem[type=\"radio\"]' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'button', 'li' ]\n          }, {\n            nodeName: 'input',\n            properties: {\n              type: [ 'image', 'button', 'radio' ]\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        navigation: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'nav' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        none: {\n          type: 'structure',\n          attributes: null,\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'ol', 'section', 'ul' ]\n          }, {\n            nodeName: 'img',\n            attributes: {\n              alt: isNotNull\n            }\n          } ]\n        },\n        note: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'aside' ]\n        },\n        option: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-checked', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'listbox' ],\n          implicit: [ 'option' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'button', 'li' ]\n          }, {\n            nodeName: 'input',\n            properties: {\n              type: [ 'checkbox', 'button' ]\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        presentation: {\n          type: 'structure',\n          attributes: null,\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'article', 'aside', 'dl', 'embed', 'figcaption', 'fieldset', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'iframe', 'li', 'ol', 'section', 'ul' ]\n          }, {\n            nodeName: 'img',\n            attributes: {\n              alt: isNotNull\n            }\n          } ]\n        },\n        progressbar: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'progress' ],\n          unsupported: false\n        },\n        radio: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-posinset', 'aria-setsize', 'aria-required', 'aria-errormessage', 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'input[type=\"radio\"]' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'button', 'li' ]\n          }, {\n            nodeName: 'input',\n            properties: {\n              type: [ 'image', 'button' ]\n            }\n          } ]\n        },\n        radiogroup: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-required', 'aria-expanded', 'aria-readonly', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'radio' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: {\n            nodeName: [ 'ol', 'ul' ]\n          }\n        },\n        range: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        region: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'section[aria-label]', 'section[aria-labelledby]', 'section[title]' ],\n          unsupported: false,\n          allowedElements: {\n            nodeName: [ 'article', 'aside' ]\n          }\n        },\n        roletype: {\n          type: 'abstract',\n          unsupported: false\n        },\n        row: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-colindex', 'aria-expanded', 'aria-level', 'aria-selected', 'aria-rowindex', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'cell', 'columnheader', 'rowheader', 'gridcell' ]\n          },\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'rowgroup', 'grid', 'treegrid', 'table' ],\n          implicit: [ 'tr' ],\n          unsupported: false\n        },\n        rowgroup: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'row' ]\n          },\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'grid', 'table', 'treegrid' ],\n          implicit: [ 'tbody', 'thead', 'tfoot' ],\n          unsupported: false\n        },\n        rowheader: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colindex', 'aria-colspan', 'aria-expanded', 'aria-rowindex', 'aria-rowspan', 'aria-required', 'aria-readonly', 'aria-selected', 'aria-sort', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'row' ],\n          implicit: [ 'th' ],\n          unsupported: false\n        },\n        scrollbar: {\n          type: 'widget',\n          attributes: {\n            required: [ 'aria-controls', 'aria-valuenow' ],\n            allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false\n        },\n        search: {\n          type: 'landmark',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: {\n            nodeName: [ 'aside', 'form', 'section' ]\n          }\n        },\n        searchbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"search\"]' ],\n          unsupported: false,\n          allowedElements: {\n            nodeName: 'input',\n            properties: {\n              type: 'text'\n            }\n          }\n        },\n        section: {\n          nameFrom: [ 'author', 'contents' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        sectionhead: {\n          nameFrom: [ 'author', 'contents' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        select: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        },\n        separator: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-orientation', 'aria-valuenow', 'aria-valuemax', 'aria-valuemin', 'aria-valuetext', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'hr' ],\n          unsupported: false,\n          allowedElements: [ 'li' ]\n        },\n        slider: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-orientation', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],\n            required: [ 'aria-valuenow' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"range\"]' ],\n          unsupported: false\n        },\n        spinbutton: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-valuetext', 'aria-required', 'aria-readonly', 'aria-errormessage', 'aria-valuemax', 'aria-valuemin' ],\n            required: [ 'aria-valuenow' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"number\"]' ],\n          unsupported: false,\n          allowedElements: {\n            nodeName: 'input',\n            properties: {\n              type: [ 'text', 'tel' ]\n            }\n          }\n        },\n        status: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'output' ],\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        structure: {\n          type: 'abstract',\n          unsupported: false\n        },\n        switch: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-errormessage' ],\n            required: [ 'aria-checked' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'button', {\n            nodeName: 'input',\n            properties: {\n              type: [ 'checkbox', 'image', 'button' ]\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        tab: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-selected', 'aria-expanded', 'aria-setsize', 'aria-posinset', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'tablist' ],\n          unsupported: false,\n          allowedElements: [ {\n            nodeName: [ 'button', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li' ]\n          }, {\n            nodeName: 'input',\n            properties: {\n              type: 'button'\n            }\n          }, {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        table: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-colcount', 'aria-rowcount', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'rowgroup', 'row' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'table' ],\n          unsupported: false\n        },\n        tablist: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'tab' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        tabpanel: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'section' ]\n        },\n        term: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          implicit: [ 'dt' ],\n          unsupported: false\n        },\n        textbox: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-autocomplete', 'aria-multiline', 'aria-readonly', 'aria-required', 'aria-placeholder', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'input[type=\"text\"]', 'input[type=\"email\"]', 'input[type=\"password\"]', 'input[type=\"tel\"]', 'input[type=\"url\"]', 'input:not([type])', 'textarea' ],\n          unsupported: false\n        },\n        timer: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false\n        },\n        toolbar: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author' ],\n          context: null,\n          implicit: [ 'menu[type=\"toolbar\"]' ],\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        tooltip: {\n          type: 'structure',\n          attributes: {\n            allowed: [ 'aria-expanded', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: null,\n          unsupported: false\n        },\n        tree: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-multiselectable', 'aria-required', 'aria-expanded', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            all: [ 'treeitem' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false,\n          allowedElements: [ 'ol', 'ul' ]\n        },\n        treegrid: {\n          type: 'composite',\n          attributes: {\n            allowed: [ 'aria-activedescendant', 'aria-colcount', 'aria-expanded', 'aria-level', 'aria-multiselectable', 'aria-readonly', 'aria-required', 'aria-rowcount', 'aria-orientation', 'aria-errormessage' ]\n          },\n          owned: {\n            one: [ 'rowgroup', 'row' ]\n          },\n          nameFrom: [ 'author' ],\n          context: null,\n          unsupported: false\n        },\n        treeitem: {\n          type: 'widget',\n          attributes: {\n            allowed: [ 'aria-checked', 'aria-selected', 'aria-expanded', 'aria-level', 'aria-posinset', 'aria-setsize', 'aria-errormessage' ]\n          },\n          owned: null,\n          nameFrom: [ 'author', 'contents' ],\n          context: [ 'group', 'tree' ],\n          unsupported: false,\n          allowedElements: [ 'li', {\n            nodeName: 'a',\n            attributes: {\n              href: isNotNull\n            }\n          } ]\n        },\n        widget: {\n          type: 'abstract',\n          unsupported: false\n        },\n        window: {\n          nameFrom: [ 'author' ],\n          type: 'abstract',\n          unsupported: false\n        }\n      };\n      lookupTable.elementsAllowedNoRole = [ {\n        nodeName: [ 'base', 'body', 'caption', 'col', 'colgroup', 'datalist', 'dd', 'details', 'dt', 'head', 'html', 'keygen', 'label', 'legend', 'main', 'map', 'math', 'meta', 'meter', 'noscript', 'optgroup', 'param', 'picture', 'progress', 'script', 'source', 'style', 'template', 'textarea', 'title', 'track' ]\n      }, {\n        nodeName: 'area',\n        attributes: {\n          href: isNotNull\n        }\n      }, {\n        nodeName: 'input',\n        properties: {\n          type: [ 'color', 'data', 'datatime', 'file', 'hidden', 'month', 'number', 'password', 'range', 'reset', 'submit', 'time', 'week' ]\n        }\n      }, {\n        nodeName: 'link',\n        attributes: {\n          href: isNotNull\n        }\n      }, {\n        nodeName: 'menu',\n        attributes: {\n          type: 'context'\n        }\n      }, {\n        nodeName: 'menuitem',\n        attributes: {\n          type: [ 'command', 'checkbox', 'radio' ]\n        }\n      }, {\n        nodeName: 'select',\n        condition: function condition(vNode) {\n          if (!(vNode instanceof axe.AbstractVirtualNode)) {\n            vNode = axe.utils.getNodeFromTree(vNode);\n          }\n          return Number(vNode.attr('size')) > 1;\n        },\n        properties: {\n          multiple: true\n        }\n      }, {\n        nodeName: [ 'clippath', 'cursor', 'defs', 'desc', 'feblend', 'fecolormatrix', 'fecomponenttransfer', 'fecomposite', 'feconvolvematrix', 'fediffuselighting', 'fedisplacementmap', 'fedistantlight', 'fedropshadow', 'feflood', 'fefunca', 'fefuncb', 'fefuncg', 'fefuncr', 'fegaussianblur', 'feimage', 'femerge', 'femergenode', 'femorphology', 'feoffset', 'fepointlight', 'fespecularlighting', 'fespotlight', 'fetile', 'feturbulence', 'filter', 'hatch', 'hatchpath', 'lineargradient', 'marker', 'mask', 'meshgradient', 'meshpatch', 'meshrow', 'metadata', 'mpath', 'pattern', 'radialgradient', 'solidcolor', 'stop', 'switch', 'view' ]\n      } ];\n      lookupTable.elementsAllowedAnyRole = [ {\n        nodeName: 'a',\n        attributes: {\n          href: isNull\n        }\n      }, {\n        nodeName: 'img',\n        attributes: {\n          alt: isNull\n        }\n      }, {\n        nodeName: [ 'abbr', 'address', 'canvas', 'div', 'p', 'pre', 'blockquote', 'ins', 'del', 'output', 'span', 'table', 'tbody', 'thead', 'tfoot', 'td', 'em', 'strong', 'small', 's', 'cite', 'q', 'dfn', 'abbr', 'time', 'code', 'var', 'samp', 'kbd', 'sub', 'sup', 'i', 'b', 'u', 'mark', 'ruby', 'rt', 'rp', 'bdi', 'bdo', 'br', 'wbr', 'th', 'tr' ]\n      } ];\n      lookupTable.evaluateRoleForElement = {\n        A: function A(_ref24) {\n          var node = _ref24.node, out = _ref24.out;\n          if (node.namespaceURI === 'http://www.w3.org/2000/svg') {\n            return true;\n          }\n          if (node.href.length) {\n            return out;\n          }\n          return true;\n        },\n        AREA: function AREA(_ref25) {\n          var node = _ref25.node;\n          return !node.href;\n        },\n        BUTTON: function BUTTON(_ref26) {\n          var node = _ref26.node, role = _ref26.role, out = _ref26.out;\n          if (node.getAttribute('type') === 'menu') {\n            return role === 'menuitem';\n          }\n          return out;\n        },\n        IMG: function IMG(_ref27) {\n          var node = _ref27.node, role = _ref27.role, out = _ref27.out;\n          switch (node.alt) {\n           case null:\n            return out;\n\n           case '':\n            return role === 'presentation' || role === 'none';\n\n           default:\n            return role !== 'presentation' && role !== 'none';\n          }\n        },\n        INPUT: function INPUT(_ref28) {\n          var node = _ref28.node, role = _ref28.role, out = _ref28.out;\n          switch (node.type) {\n           case 'button':\n           case 'image':\n            return out;\n\n           case 'checkbox':\n            if (role === 'button' && node.hasAttribute('aria-pressed')) {\n              return true;\n            }\n            return out;\n\n           case 'radio':\n            return role === 'menuitemradio';\n\n           case 'text':\n            return role === 'combobox' || role === 'searchbox' || role === 'spinbutton';\n\n           case 'tel':\n            return role === 'combobox' || role === 'spinbutton';\n\n           case 'url':\n           case 'search':\n           case 'email':\n            return role === 'combobox';\n\n           default:\n            return false;\n          }\n        },\n        LI: function LI(_ref29) {\n          var node = _ref29.node, out = _ref29.out;\n          var hasImplicitListitemRole = axe.utils.matchesSelector(node, 'ol li, ul li');\n          if (hasImplicitListitemRole) {\n            return out;\n          }\n          return true;\n        },\n        MENU: function MENU(_ref30) {\n          var node = _ref30.node;\n          if (node.getAttribute('type') === 'context') {\n            return false;\n          }\n          return true;\n        },\n        OPTION: function OPTION(_ref31) {\n          var node = _ref31.node;\n          var withinOptionList = axe.utils.matchesSelector(node, 'select > option, datalist > option, optgroup > option');\n          return !withinOptionList;\n        },\n        SELECT: function SELECT(_ref32) {\n          var node = _ref32.node, role = _ref32.role;\n          return !node.multiple && node.size <= 1 && role === 'menu';\n        },\n        SVG: function SVG(_ref33) {\n          var node = _ref33.node, out = _ref33.out;\n          if (node.parentNode && node.parentNode.namespaceURI === 'http://www.w3.org/2000/svg') {\n            return true;\n          }\n          return out;\n        }\n      };\n      lookupTable.rolesOfType = {\n        widget: [ 'button', 'checkbox', 'dialog', 'gridcell', 'link', 'log', 'marquee', 'menuitem', 'menuitemcheckbox', 'menuitemradio', 'option', 'progressbar', 'radio', 'scrollbar', 'searchbox', 'slider', 'spinbutton', 'status', 'switch', 'tab', 'tabpanel', 'textbox', 'timer', 'tooltip', 'tree', 'treeitem' ]\n      };\n      var color = {};\n      commons.color = color;\n      var dom = commons.dom = {};\n      var forms = {};\n      commons.forms = forms;\n      function matches(vNode, definition) {\n        return matches.fromDefinition(vNode, definition);\n      }\n      commons.matches = matches;\n      var table = commons.table = {};\n      var text = commons.text = {\n        EdgeFormDefaults: {}\n      };\n      var utils = commons.utils = axe.utils;\n      aria.arialabelText = function arialabelText(node) {\n        if (node instanceof axe.AbstractVirtualNode === false) {\n          if (node.nodeType !== 1) {\n            return '';\n          }\n          node = axe.utils.getNodeFromTree(node);\n        }\n        return node.attr('aria-label') || '';\n      };\n      aria.arialabelledbyText = function arialabelledbyText(node) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        node = node.actualNode || node;\n        if (node.nodeType !== 1 || context.inLabelledByContext || context.inControlContext) {\n          return '';\n        }\n        var refs = dom.idrefs(node, 'aria-labelledby').filter(function(elm) {\n          return elm;\n        });\n        return refs.reduce(function(accessibleName, elm) {\n          var accessibleNameAdd = text.accessibleText(elm, _extends({\n            inLabelledByContext: true,\n            startNode: context.startNode || node\n          }, context));\n          if (!accessibleName) {\n            return accessibleNameAdd;\n          } else {\n            return ''.concat(accessibleName, ' ').concat(accessibleNameAdd);\n          }\n        }, '');\n      };\n      aria.requiredAttr = function(role) {\n        var roles = aria.lookupTable.role[role], attr = roles && roles.attributes && roles.attributes.required;\n        return attr || [];\n      };\n      aria.allowedAttr = function(role) {\n        var roles = aria.lookupTable.role[role], attr = roles && roles.attributes && roles.attributes.allowed || [], requiredAttr = roles && roles.attributes && roles.attributes.required || [];\n        return attr.concat(aria.lookupTable.globalAttributes).concat(requiredAttr);\n      };\n      aria.validateAttr = function validateAttr(att) {\n        var attrDefinition = aria.lookupTable.attributes[att];\n        return !!attrDefinition;\n      };\n      var dpubRoles = [ 'doc-backlink', 'doc-biblioentry', 'doc-biblioref', 'doc-cover', 'doc-endnote', 'doc-glossref', 'doc-noteref' ];\n      function getRoleSegments(node) {\n        var roles = [];\n        if (!node) {\n          return roles;\n        }\n        if (node.hasAttribute('role')) {\n          var nodeRoles = axe.utils.tokenList(node.getAttribute('role').toLowerCase());\n          roles = roles.concat(nodeRoles);\n        }\n        if (node.hasAttributeNS('http://www.idpf.org/2007/ops', 'type')) {\n          var epubRoles = axe.utils.tokenList(node.getAttributeNS('http://www.idpf.org/2007/ops', 'type').toLowerCase()).map(function(role) {\n            return 'doc-'.concat(role);\n          });\n          roles = roles.concat(epubRoles);\n        }\n        roles = roles.filter(function(role) {\n          return axe.commons.aria.isValidRole(role);\n        });\n        return roles;\n      }\n      aria.getElementUnallowedRoles = function getElementUnallowedRoles(node) {\n        var allowImplicit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var tagName = node.nodeName.toUpperCase();\n        if (!axe.utils.isHtmlElement(node)) {\n          return [];\n        }\n        var roleSegments = getRoleSegments(node);\n        var implicitRole = axe.commons.aria.implicitRole(node);\n        var unallowedRoles = roleSegments.filter(function(role) {\n          if (allowImplicit && role === implicitRole) {\n            return false;\n          }\n          if (allowImplicit && dpubRoles.includes(role)) {\n            var roleType = axe.commons.aria.getRoleType(role);\n            if (implicitRole !== roleType) {\n              return true;\n            }\n          }\n          if (!allowImplicit && !(role === 'row' && tagName === 'TR' && axe.utils.matchesSelector(node, 'table[role=\"grid\"] > tr'))) {\n            return true;\n          }\n          return !aria.isAriaRoleAllowedOnElement(node, role);\n        });\n        return unallowedRoles;\n      };\n      aria.getOwnedVirtual = function getOwned(_ref34) {\n        var actualNode = _ref34.actualNode, children = _ref34.children;\n        if (!actualNode || !children) {\n          throw new Error('getOwnedVirtual requires a virtual node');\n        }\n        return dom.idrefs(actualNode, 'aria-owns').reduce(function(ownedElms, element) {\n          if (element) {\n            var virtualNode = axe.utils.getNodeFromTree(element);\n            ownedElms.push(virtualNode);\n          }\n          return ownedElms;\n        }, children);\n      };\n      aria.getRole = function getRole(node) {\n        var _ref35 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, noImplicit = _ref35.noImplicit, fallback = _ref35.fallback, abstracts = _ref35.abstracts, dpub = _ref35.dpub;\n        node = node.actualNode || node;\n        if (node.nodeType !== 1) {\n          return null;\n        }\n        var roleAttr = (node.getAttribute('role') || '').trim().toLowerCase();\n        var roleList = fallback ? axe.utils.tokenList(roleAttr) : [ roleAttr ];\n        var validRoles = roleList.filter(function(role) {\n          if (!dpub && role.substr(0, 4) === 'doc-') {\n            return false;\n          }\n          return aria.isValidRole(role, {\n            allowAbstract: abstracts\n          });\n        });\n        var explicitRole = validRoles[0];\n        if (!explicitRole && !noImplicit) {\n          return aria.implicitRole(node);\n        }\n        return explicitRole || null;\n      };\n      var idRefsRegex = /^idrefs?$/;\n      function cacheIdRefs(node, refAttrs) {\n        if (node.hasAttribute) {\n          var idRefs = axe._cache.get('idRefs');\n          if (node.nodeName.toUpperCase() === 'LABEL' && node.hasAttribute('for')) {\n            idRefs[node.getAttribute('for')] = true;\n          }\n          for (var i = 0; i < refAttrs.length; ++i) {\n            var attr = refAttrs[i];\n            if (!node.hasAttribute(attr)) {\n              continue;\n            }\n            var attrValue = node.getAttribute(attr);\n            var tokens = axe.utils.tokenList(attrValue);\n            for (var k = 0; k < tokens.length; ++k) {\n              idRefs[tokens[k]] = true;\n            }\n          }\n        }\n        for (var _i3 = 0; _i3 < node.children.length; _i3++) {\n          cacheIdRefs(node.children[_i3], refAttrs);\n        }\n      }\n      aria.isAccessibleRef = function isAccessibleRef(node) {\n        node = node.actualNode || node;\n        var root = dom.getRootNode(node);\n        root = root.documentElement || root;\n        var id = node.id;\n        if (!axe._cache.get('idRefs')) {\n          axe._cache.set('idRefs', {});\n          var refAttrs = Object.keys(aria.lookupTable.attributes).filter(function(attr) {\n            var type = aria.lookupTable.attributes[attr].type;\n            return idRefsRegex.test(type);\n          });\n          cacheIdRefs(root, refAttrs);\n        }\n        return axe._cache.get('idRefs')[id] === true;\n      };\n      aria.isAriaRoleAllowedOnElement = function isAriaRoleAllowedOnElement(node, role) {\n        var nodeName = node.nodeName.toUpperCase();\n        var lookupTable = axe.commons.aria.lookupTable;\n        if (matches(node, lookupTable.elementsAllowedNoRole)) {\n          return false;\n        }\n        if (matches(node, lookupTable.elementsAllowedAnyRole)) {\n          return true;\n        }\n        var roleValue = lookupTable.role[role];\n        if (!roleValue || !roleValue.allowedElements) {\n          return false;\n        }\n        var out = matches(node, roleValue.allowedElements);\n        if (Object.keys(lookupTable.evaluateRoleForElement).includes(nodeName)) {\n          return lookupTable.evaluateRoleForElement[nodeName]({\n            node: node,\n            role: role,\n            out: out\n          });\n        }\n        return out;\n      };\n      aria.isUnsupportedRole = function(role) {\n        var roleDefinition = aria.lookupTable.role[role];\n        return roleDefinition ? roleDefinition.unsupported : false;\n      };\n      aria.labelVirtual = function(_ref36) {\n        var actualNode = _ref36.actualNode;\n        var ref, candidate;\n        if (actualNode.getAttribute('aria-labelledby')) {\n          ref = dom.idrefs(actualNode, 'aria-labelledby');\n          candidate = ref.map(function(thing) {\n            var vNode = axe.utils.getNodeFromTree(thing);\n            return vNode ? text.visibleVirtual(vNode, true) : '';\n          }).join(' ').trim();\n          if (candidate) {\n            return candidate;\n          }\n        }\n        candidate = actualNode.getAttribute('aria-label');\n        if (candidate) {\n          candidate = text.sanitize(candidate).trim();\n          if (candidate) {\n            return candidate;\n          }\n        }\n        return null;\n      };\n      aria.label = function(node) {\n        node = axe.utils.getNodeFromTree(node);\n        return aria.labelVirtual(node);\n      };\n      aria.namedFromContents = function namedFromContents(node) {\n        var _ref37 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, strict = _ref37.strict;\n        node = node.actualNode || node;\n        if (node.nodeType !== 1) {\n          return false;\n        }\n        var role = aria.getRole(node);\n        var roleDef = aria.lookupTable.role[role];\n        if (roleDef && roleDef.nameFrom.includes('contents') || node.nodeName.toUpperCase() === 'TABLE') {\n          return true;\n        }\n        if (strict) {\n          return false;\n        }\n        return !roleDef || [ 'presentation', 'none' ].includes(role);\n      };\n      aria.isValidRole = function(role) {\n        var _ref38 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, allowAbstract = _ref38.allowAbstract, _ref38$flagUnsupporte = _ref38.flagUnsupported, flagUnsupported = _ref38$flagUnsupporte === void 0 ? false : _ref38$flagUnsupporte;\n        var roleDefinition = aria.lookupTable.role[role];\n        var isRoleUnsupported = roleDefinition ? roleDefinition.unsupported : false;\n        if (!roleDefinition || flagUnsupported && isRoleUnsupported) {\n          return false;\n        }\n        return allowAbstract ? true : roleDefinition.type !== 'abstract';\n      };\n      aria.getRolesWithNameFromContents = function() {\n        return Object.keys(aria.lookupTable.role).filter(function(r) {\n          return aria.lookupTable.role[r].nameFrom && aria.lookupTable.role[r].nameFrom.indexOf('contents') !== -1;\n        });\n      };\n      aria.getRolesByType = function(roleType) {\n        return Object.keys(aria.lookupTable.role).filter(function(r) {\n          return aria.lookupTable.role[r].type === roleType;\n        });\n      };\n      aria.getRoleType = function(role) {\n        var r = aria.lookupTable.role[role];\n        return r && r.type || null;\n      };\n      aria.requiredOwned = function(role) {\n        'use strict';\n        var owned = null, roles = aria.lookupTable.role[role];\n        if (roles) {\n          owned = axe.utils.clone(roles.owned);\n        }\n        return owned;\n      };\n      aria.requiredContext = function(role) {\n        'use strict';\n        var context = null, roles = aria.lookupTable.role[role];\n        if (roles) {\n          context = axe.utils.clone(roles.context);\n        }\n        return context;\n      };\n      aria.implicitNodes = function(role) {\n        'use strict';\n        var implicit = null, roles = aria.lookupTable.role[role];\n        if (roles && roles.implicit) {\n          implicit = axe.utils.clone(roles.implicit);\n        }\n        return implicit;\n      };\n      aria.implicitRole = function(node) {\n        'use strict';\n        var isValidImplicitRole = function isValidImplicitRole(set, role) {\n          var validForNodeType = function validForNodeType(implicitNodeTypeSelector) {\n            return axe.utils.matchesSelector(node, implicitNodeTypeSelector);\n          };\n          if (role.implicit && role.implicit.some(validForNodeType)) {\n            set.push(role.name);\n          }\n          return set;\n        };\n        var sortRolesByOptimalAriaContext = function sortRolesByOptimalAriaContext(roles, ariaAttributes) {\n          var getScore = function getScore(role) {\n            var allowedAriaAttributes = aria.allowedAttr(role);\n            return allowedAriaAttributes.reduce(function(score, attribute) {\n              return score + (ariaAttributes.indexOf(attribute) > -1 ? 1 : 0);\n            }, 0);\n          };\n          var scored = roles.map(function(role) {\n            return {\n              score: getScore(role),\n              name: role\n            };\n          });\n          var sorted = scored.sort(function(scoredRoleA, scoredRoleB) {\n            return scoredRoleB.score - scoredRoleA.score;\n          });\n          return sorted.map(function(sortedRole) {\n            return sortedRole.name;\n          });\n        };\n        var roles = Object.keys(aria.lookupTable.role).map(function(role) {\n          var lookup = aria.lookupTable.role[role];\n          return {\n            name: role,\n            implicit: lookup && lookup.implicit\n          };\n        });\n        var availableImplicitRoles = roles.reduce(isValidImplicitRole, []);\n        if (!availableImplicitRoles.length) {\n          return null;\n        }\n        var nodeAttributes = axe.utils.getNodeAttributes(node);\n        var ariaAttributes = [];\n        for (var i = 0, j = nodeAttributes.length; i < j; i++) {\n          var attr = nodeAttributes[i];\n          if (attr.name.match(/^aria-/)) {\n            ariaAttributes.push(attr.name);\n          }\n        }\n        return sortRolesByOptimalAriaContext(availableImplicitRoles, ariaAttributes).shift();\n      };\n      aria.validateAttrValue = function validateAttrValue(node, attr) {\n        'use strict';\n        var matches, list, value = node.getAttribute(attr), attrInfo = aria.lookupTable.attributes[attr];\n        var doc = dom.getRootNode(node);\n        if (!attrInfo) {\n          return true;\n        }\n        if (attrInfo.allowEmpty && (!value || value.trim() === '')) {\n          return true;\n        }\n        switch (attrInfo.type) {\n         case 'boolean':\n         case 'nmtoken':\n          return typeof value === 'string' && attrInfo.values.includes(value.toLowerCase());\n\n         case 'nmtokens':\n          list = axe.utils.tokenList(value);\n          return list.reduce(function(result, token) {\n            return result && attrInfo.values.includes(token);\n          }, list.length !== 0);\n\n         case 'idref':\n          return !!(value && doc.getElementById(value));\n\n         case 'idrefs':\n          list = axe.utils.tokenList(value);\n          return list.some(function(token) {\n            return doc.getElementById(token);\n          });\n\n         case 'string':\n          return value.trim() !== '';\n\n         case 'decimal':\n          matches = value.match(/^[-+]?([0-9]*)\\.?([0-9]*)$/);\n          return !!(matches && (matches[1] || matches[2]));\n\n         case 'int':\n          return /^[-+]?[0-9]+$/.test(value);\n        }\n      };\n      color.centerPointOfRect = function centerPointOfRect(rect) {\n        if (rect.left > window.innerWidth) {\n          return undefined;\n        }\n        if (rect.top > window.innerHeight) {\n          return undefined;\n        }\n        var x = Math.min(Math.ceil(rect.left + rect.width / 2), window.innerWidth - 1);\n        var y = Math.min(Math.ceil(rect.top + rect.height / 2), window.innerHeight - 1);\n        return {\n          x: x,\n          y: y\n        };\n      };\n      color.Color = function(red, green, blue, alpha) {\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n        this.alpha = alpha;\n        this.toHexString = function() {\n          var redString = Math.round(this.red).toString(16);\n          var greenString = Math.round(this.green).toString(16);\n          var blueString = Math.round(this.blue).toString(16);\n          return '#' + (this.red > 15.5 ? redString : '0' + redString) + (this.green > 15.5 ? greenString : '0' + greenString) + (this.blue > 15.5 ? blueString : '0' + blueString);\n        };\n        var rgbRegex = /^rgb\\((\\d+), (\\d+), (\\d+)\\)$/;\n        var rgbaRegex = /^rgba\\((\\d+), (\\d+), (\\d+), (\\d*(\\.\\d+)?)\\)/;\n        this.parseRgbString = function(colorString) {\n          if (colorString === 'transparent') {\n            this.red = 0;\n            this.green = 0;\n            this.blue = 0;\n            this.alpha = 0;\n            return;\n          }\n          var match = colorString.match(rgbRegex);\n          if (match) {\n            this.red = parseInt(match[1], 10);\n            this.green = parseInt(match[2], 10);\n            this.blue = parseInt(match[3], 10);\n            this.alpha = 1;\n            return;\n          }\n          match = colorString.match(rgbaRegex);\n          if (match) {\n            this.red = parseInt(match[1], 10);\n            this.green = parseInt(match[2], 10);\n            this.blue = parseInt(match[3], 10);\n            this.alpha = Math.round(parseFloat(match[4]) * 100) / 100;\n            return;\n          }\n        };\n        this.getRelativeLuminance = function() {\n          var rSRGB = this.red / 255;\n          var gSRGB = this.green / 255;\n          var bSRGB = this.blue / 255;\n          var r = rSRGB <= .03928 ? rSRGB / 12.92 : Math.pow((rSRGB + .055) / 1.055, 2.4);\n          var g = gSRGB <= .03928 ? gSRGB / 12.92 : Math.pow((gSRGB + .055) / 1.055, 2.4);\n          var b = bSRGB <= .03928 ? bSRGB / 12.92 : Math.pow((bSRGB + .055) / 1.055, 2.4);\n          return .2126 * r + .7152 * g + .0722 * b;\n        };\n      };\n      color.flattenColors = function(fgColor, bgColor) {\n        var alpha = fgColor.alpha;\n        var r = (1 - alpha) * bgColor.red + alpha * fgColor.red;\n        var g = (1 - alpha) * bgColor.green + alpha * fgColor.green;\n        var b = (1 - alpha) * bgColor.blue + alpha * fgColor.blue;\n        var a = fgColor.alpha + bgColor.alpha * (1 - fgColor.alpha);\n        return new color.Color(r, g, b, a);\n      };\n      color.getContrast = function(bgColor, fgColor) {\n        if (!fgColor || !bgColor) {\n          return null;\n        }\n        if (fgColor.alpha < 1) {\n          fgColor = color.flattenColors(fgColor, bgColor);\n        }\n        var bL = bgColor.getRelativeLuminance();\n        var fL = fgColor.getRelativeLuminance();\n        return (Math.max(fL, bL) + .05) / (Math.min(fL, bL) + .05);\n      };\n      color.hasValidContrastRatio = function(bg, fg, fontSize, isBold) {\n        var contrast = color.getContrast(bg, fg);\n        var isSmallFont = isBold && Math.ceil(fontSize * 72) / 96 < 14 || !isBold && Math.ceil(fontSize * 72) / 96 < 18;\n        var expectedContrastRatio = isSmallFont ? 4.5 : 3;\n        return {\n          isValid: contrast > expectedContrastRatio,\n          contrastRatio: contrast,\n          expectedContrastRatio: expectedContrastRatio\n        };\n      };\n      color.elementHasImage = function elementHasImage(elm, style) {\n        var graphicNodes = [ 'IMG', 'CANVAS', 'OBJECT', 'IFRAME', 'VIDEO', 'SVG' ];\n        var nodeName = elm.nodeName.toUpperCase();\n        if (graphicNodes.includes(nodeName)) {\n          axe.commons.color.incompleteData.set('bgColor', 'imgNode');\n          return true;\n        }\n        style = style || window.getComputedStyle(elm);\n        var bgImageStyle = style.getPropertyValue('background-image');\n        var hasBgImage = bgImageStyle !== 'none';\n        if (hasBgImage) {\n          var hasGradient = /gradient/.test(bgImageStyle);\n          axe.commons.color.incompleteData.set('bgColor', hasGradient ? 'bgGradient' : 'bgImage');\n        }\n        return hasBgImage;\n      };\n      function _getFonts(style) {\n        return style.getPropertyValue('font-family').split(/[,;]/g).map(function(font) {\n          return font.trim().toLowerCase();\n        });\n      }\n      function elementIsDistinct(node, ancestorNode) {\n        var nodeStyle = window.getComputedStyle(node);\n        if (nodeStyle.getPropertyValue('background-image') !== 'none') {\n          return true;\n        }\n        var hasBorder = [ 'border-bottom', 'border-top', 'outline' ].reduce(function(result, edge) {\n          var borderClr = new color.Color();\n          borderClr.parseRgbString(nodeStyle.getPropertyValue(edge + '-color'));\n          return result || nodeStyle.getPropertyValue(edge + '-style') !== 'none' && parseFloat(nodeStyle.getPropertyValue(edge + '-width')) > 0 && borderClr.alpha !== 0;\n        }, false);\n        if (hasBorder) {\n          return true;\n        }\n        var parentStyle = window.getComputedStyle(ancestorNode);\n        if (_getFonts(nodeStyle)[0] !== _getFonts(parentStyle)[0]) {\n          return true;\n        }\n        var hasStyle = [ 'text-decoration-line', 'text-decoration-style', 'font-weight', 'font-style', 'font-size' ].reduce(function(result, cssProp) {\n          return result || nodeStyle.getPropertyValue(cssProp) !== parentStyle.getPropertyValue(cssProp);\n        }, false);\n        var tDec = nodeStyle.getPropertyValue('text-decoration');\n        if (tDec.split(' ').length < 3) {\n          hasStyle = hasStyle || tDec !== parentStyle.getPropertyValue('text-decoration');\n        }\n        return hasStyle;\n      }\n      color.elementIsDistinct = elementIsDistinct;\n      color.getBackgroundColor = function getBackgroundColor(elm) {\n        var bgElms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var bgColors = [];\n        var elmStack = color.getBackgroundStack(elm);\n        (elmStack || []).some(function(bgElm) {\n          var bgElmStyle = window.getComputedStyle(bgElm);\n          var bgColor = color.getOwnBackgroundColor(bgElmStyle);\n          if (elmPartiallyObscured(elm, bgElm, bgColor) || color.elementHasImage(bgElm, bgElmStyle)) {\n            bgColors = null;\n            bgElms.push(bgElm);\n            return true;\n          }\n          if (bgColor.alpha !== 0) {\n            bgElms.push(bgElm);\n            bgColors.push(bgColor);\n            return bgColor.alpha === 1;\n          } else {\n            return false;\n          }\n        });\n        if (bgColors !== null && elmStack !== null) {\n          bgColors.push(new color.Color(255, 255, 255, 1));\n          var colors = bgColors.reduce(color.flattenColors);\n          return colors;\n        }\n        return null;\n      };\n      color.getBackgroundStack = function getBackgroundStack(elm) {\n        var elmStack = color.filteredRectStack(elm);\n        if (elmStack === null) {\n          return null;\n        }\n        elmStack = dom.reduceToElementsBelowFloating(elmStack, elm);\n        elmStack = sortPageBackground(elmStack);\n        var elmIndex = elmStack.indexOf(elm);\n        if (calculateObscuringElement(elmIndex, elmStack, elm)) {\n          axe.commons.color.incompleteData.set('bgColor', 'bgOverlap');\n          return null;\n        }\n        return elmIndex !== -1 ? elmStack : null;\n      };\n      color.filteredRectStack = function filteredRectStack(elm) {\n        var rectStack = color.getRectStack(elm);\n        if (rectStack && rectStack.length === 1) {\n          return rectStack[0];\n        }\n        if (rectStack && rectStack.length > 1) {\n          var boundingStack = rectStack.shift();\n          var isSame;\n          rectStack.forEach(function(rectList, index) {\n            if (index === 0) {\n              return;\n            }\n            var rectA = rectStack[index - 1], rectB = rectStack[index];\n            isSame = rectA.every(function(element, elementIndex) {\n              return element === rectB[elementIndex];\n            }) || boundingStack.includes(elm);\n          });\n          if (!isSame) {\n            axe.commons.color.incompleteData.set('bgColor', 'elmPartiallyObscuring');\n            return null;\n          }\n          return rectStack[0];\n        }\n        axe.commons.color.incompleteData.set('bgColor', 'outsideViewport');\n        return null;\n      };\n      color.getRectStack = function(elm) {\n        var boundingStack = axe.commons.dom.getElementStack(elm);\n        var filteredArr = axe.commons.dom.getTextElementStack(elm);\n        if (!filteredArr || filteredArr.length <= 1) {\n          return [ boundingStack ];\n        }\n        if (filteredArr.some(function(stack) {\n          return stack === undefined;\n        })) {\n          return null;\n        }\n        filteredArr.splice(0, 0, boundingStack);\n        return filteredArr;\n      };\n      function sortPageBackground(elmStack) {\n        var bodyIndex = elmStack.indexOf(document.body);\n        var bgNodes = elmStack;\n        var sortBodyElement = bodyIndex > 1 || bodyIndex === -1;\n        if (sortBodyElement && !color.elementHasImage(document.documentElement) && color.getOwnBackgroundColor(window.getComputedStyle(document.documentElement)).alpha === 0) {\n          if (bodyIndex > 1) {\n            bgNodes.splice(bodyIndex, 1);\n          }\n          bgNodes.splice(elmStack.indexOf(document.documentElement), 1);\n          bgNodes.push(document.body);\n        }\n        return bgNodes;\n      }\n      function elmPartiallyObscured(elm, bgElm, bgColor) {\n        var obscured = elm !== bgElm && !dom.visuallyContains(elm, bgElm) && bgColor.alpha !== 0;\n        if (obscured) {\n          axe.commons.color.incompleteData.set('bgColor', 'elmPartiallyObscured');\n        }\n        return obscured;\n      }\n      function calculateObscuringElement(elmIndex, elmStack, originalElm) {\n        if (elmIndex > 0) {\n          for (var i = elmIndex - 1; i >= 0; i--) {\n            var bgElm = elmStack[i];\n            if (contentOverlapping(originalElm, bgElm)) {\n              return true;\n            } else {\n              elmStack.splice(i, 1);\n            }\n          }\n        }\n        return false;\n      }\n      function contentOverlapping(targetElement, bgNode) {\n        var targetRect = targetElement.getClientRects()[0];\n        var obscuringElements = dom.shadowElementsFromPoint(targetRect.left, targetRect.top);\n        if (obscuringElements) {\n          for (var i = 0; i < obscuringElements.length; i++) {\n            if (obscuringElements[i] !== targetElement && obscuringElements[i] === bgNode) {\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n      dom.isOpaque = function(node) {\n        var style = window.getComputedStyle(node);\n        return color.elementHasImage(node, style) || color.getOwnBackgroundColor(style).alpha === 1;\n      };\n      function getOpacity(node) {\n        if (!node) {\n          return 1;\n        }\n        var vNode = axe.utils.getNodeFromTree(node);\n        if (vNode && vNode._opacity !== undefined && vNode._opacity !== null) {\n          return vNode._opacity;\n        }\n        var nodeStyle = window.getComputedStyle(node);\n        var opacity = nodeStyle.getPropertyValue('opacity');\n        var finalOpacity = opacity * getOpacity(node.parentElement);\n        if (vNode) {\n          vNode._opacity = finalOpacity;\n        }\n        return finalOpacity;\n      }\n      color.getForegroundColor = function(node, noScroll, bgColor) {\n        var nodeStyle = window.getComputedStyle(node);\n        var fgColor = new color.Color();\n        fgColor.parseRgbString(nodeStyle.getPropertyValue('color'));\n        var opacity = getOpacity(node);\n        fgColor.alpha = fgColor.alpha * opacity;\n        if (fgColor.alpha === 1) {\n          return fgColor;\n        }\n        if (!bgColor) {\n          bgColor = color.getBackgroundColor(node, [], noScroll);\n        }\n        if (bgColor === null) {\n          var reason = axe.commons.color.incompleteData.get('bgColor');\n          axe.commons.color.incompleteData.set('fgColor', reason);\n          return null;\n        }\n        return color.flattenColors(fgColor, bgColor);\n      };\n      color.getOwnBackgroundColor = function getOwnBackgroundColor(elmStyle) {\n        var bgColor = new color.Color();\n        bgColor.parseRgbString(elmStyle.getPropertyValue('background-color'));\n        if (bgColor.alpha !== 0) {\n          var opacity = elmStyle.getPropertyValue('opacity');\n          bgColor.alpha = bgColor.alpha * opacity;\n        }\n        return bgColor;\n      };\n      color.incompleteData = function() {\n        var data = {};\n        return {\n          set: function set(key, reason) {\n            if (typeof key !== 'string') {\n              throw new Error('Incomplete data: key must be a string');\n            }\n            if (reason) {\n              data[key] = reason;\n            }\n            return data[key];\n          },\n          get: function get(key) {\n            return data[key];\n          },\n          clear: function clear() {\n            data = {};\n          }\n        };\n      }();\n      dom.reduceToElementsBelowFloating = function(elements, targetNode) {\n        var floatingPositions = [ 'fixed', 'sticky' ], finalElements = [], targetFound = false, index, currentNode, style;\n        for (index = 0; index < elements.length; ++index) {\n          currentNode = elements[index];\n          if (currentNode === targetNode) {\n            targetFound = true;\n          }\n          style = window.getComputedStyle(currentNode);\n          if (!targetFound && floatingPositions.indexOf(style.position) !== -1) {\n            finalElements = [];\n            continue;\n          }\n          finalElements.push(currentNode);\n        }\n        return finalElements;\n      };\n      dom.findElmsInContext = function(_ref39) {\n        var context = _ref39.context, value = _ref39.value, attr = _ref39.attr, _ref39$elm = _ref39.elm, elm = _ref39$elm === void 0 ? '' : _ref39$elm;\n        var root;\n        var escapedValue = axe.utils.escapeSelector(value);\n        if (context.nodeType === 9 || context.nodeType === 11) {\n          root = context;\n        } else {\n          root = dom.getRootNode(context);\n        }\n        return Array.from(root.querySelectorAll(elm + '[' + attr + '=' + escapedValue + ']'));\n      };\n      dom.findUp = function(element, target) {\n        return dom.findUpVirtual(axe.utils.getNodeFromTree(element), target);\n      };\n      dom.findUpVirtual = function(element, target) {\n        var parent;\n        parent = element.actualNode;\n        if (!element.shadowId && typeof element.actualNode.closest === 'function') {\n          var match = element.actualNode.closest(target);\n          if (match) {\n            return match;\n          }\n          return null;\n        }\n        do {\n          parent = parent.assignedSlot ? parent.assignedSlot : parent.parentNode;\n          if (parent && parent.nodeType === 11) {\n            parent = parent.host;\n          }\n        } while (parent && !axe.utils.matchesSelector(parent, target) && parent !== document.documentElement);\n        if (!parent) {\n          return null;\n        }\n        if (!axe.utils.matchesSelector(parent, target)) {\n          return null;\n        }\n        return parent;\n      };\n      dom.getComposedParent = function getComposedParent(element) {\n        if (element.assignedSlot) {\n          return getComposedParent(element.assignedSlot);\n        } else if (element.parentNode) {\n          var parentNode = element.parentNode;\n          if (parentNode.nodeType === 1) {\n            return parentNode;\n          } else if (parentNode.host) {\n            return parentNode.host;\n          }\n        }\n        return null;\n      };\n      dom.getElementByReference = function(node, attr) {\n        var fragment = node.getAttribute(attr);\n        if (!fragment) {\n          return null;\n        }\n        if (fragment.charAt(0) === '#') {\n          fragment = decodeURIComponent(fragment.substring(1));\n        } else if (fragment.substr(0, 2) === '/#') {\n          fragment = decodeURIComponent(fragment.substring(2));\n        }\n        var candidate = document.getElementById(fragment);\n        if (candidate) {\n          return candidate;\n        }\n        candidate = document.getElementsByName(fragment);\n        if (candidate.length) {\n          return candidate[0];\n        }\n        return null;\n      };\n      dom.getElementCoordinates = function(element) {\n        'use strict';\n        var scrollOffset = dom.getScrollOffset(document), xOffset = scrollOffset.left, yOffset = scrollOffset.top, coords = element.getBoundingClientRect();\n        return {\n          top: coords.top + yOffset,\n          right: coords.right + xOffset,\n          bottom: coords.bottom + yOffset,\n          left: coords.left + xOffset,\n          width: coords.right - coords.left,\n          height: coords.bottom - coords.top\n        };\n      };\n      var gridSize = 200;\n      function isStackingContext(vNode, parentVNode) {\n        var position = vNode.getComputedStylePropertyValue('position');\n        var zIndex = vNode.getComputedStylePropertyValue('z-index');\n        if (position === 'fixed' || position === 'sticky') {\n          return true;\n        }\n        if (zIndex !== 'auto' && position !== 'static') {\n          return true;\n        }\n        if (vNode.getComputedStylePropertyValue('opacity') !== '1') {\n          return true;\n        }\n        var transform = vNode.getComputedStylePropertyValue('-webkit-transform') || vNode.getComputedStylePropertyValue('-ms-transform') || vNode.getComputedStylePropertyValue('transform') || 'none';\n        if (transform !== 'none') {\n          return true;\n        }\n        var mixBlendMode = vNode.getComputedStylePropertyValue('mix-blend-mode');\n        if (mixBlendMode && mixBlendMode !== 'normal') {\n          return true;\n        }\n        var filter = vNode.getComputedStylePropertyValue('filter');\n        if (filter && filter !== 'none') {\n          return true;\n        }\n        var perspective = vNode.getComputedStylePropertyValue('perspective');\n        if (perspective && perspective !== 'none') {\n          return true;\n        }\n        var clipPath = vNode.getComputedStylePropertyValue('clip-path');\n        if (clipPath && clipPath !== 'none') {\n          return true;\n        }\n        var mask = vNode.getComputedStylePropertyValue('-webkit-mask') || vNode.getComputedStylePropertyValue('mask') || 'none';\n        if (mask !== 'none') {\n          return true;\n        }\n        var maskImage = vNode.getComputedStylePropertyValue('-webkit-mask-image') || vNode.getComputedStylePropertyValue('mask-image') || 'none';\n        if (maskImage !== 'none') {\n          return true;\n        }\n        var maskBorder = vNode.getComputedStylePropertyValue('-webkit-mask-border') || vNode.getComputedStylePropertyValue('mask-border') || 'none';\n        if (maskBorder !== 'none') {\n          return true;\n        }\n        if (vNode.getComputedStylePropertyValue('isolation') === 'isolate') {\n          return true;\n        }\n        var willChange = vNode.getComputedStylePropertyValue('will-change');\n        if (willChange === 'transform' || willChange === 'opacity') {\n          return true;\n        }\n        if (vNode.getComputedStylePropertyValue('-webkit-overflow-scrolling') === 'touch') {\n          return true;\n        }\n        var contain = vNode.getComputedStylePropertyValue('contain');\n        if ([ 'layout', 'paint', 'strict', 'content' ].includes(contain)) {\n          return true;\n        }\n        if (zIndex !== 'auto' && parentVNode) {\n          var parentDsiplay = parentVNode.getComputedStylePropertyValue('display');\n          if ([ 'flex', 'inline-flex', 'inline flex', 'grid', 'inline-grid', 'inline grid' ].includes(parentDsiplay)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      function isFloated(vNode) {\n        if (!vNode) {\n          return false;\n        }\n        if (vNode._isFloated !== undefined) {\n          return vNode._isFloated;\n        }\n        var floatStyle = vNode.getComputedStylePropertyValue('float');\n        if (floatStyle !== 'none') {\n          vNode._isFloated = true;\n          return true;\n        }\n        var floated = isFloated(vNode.parent);\n        vNode._isFloated = floated;\n        return floated;\n      }\n      function getPositionOrder(vNode) {\n        if (vNode.getComputedStylePropertyValue('position') === 'static') {\n          if (vNode.getComputedStylePropertyValue('display').indexOf('inline') !== -1) {\n            return 2;\n          }\n          if (isFloated(vNode)) {\n            return 1;\n          }\n          return 0;\n        }\n        return 3;\n      }\n      function visuallySort(a, b) {\n        for (var i = 0; i < a._stackingOrder.length; i++) {\n          if (typeof b._stackingOrder[i] === 'undefined') {\n            return -1;\n          }\n          if (b._stackingOrder[i] > a._stackingOrder[i]) {\n            return 1;\n          }\n          if (b._stackingOrder[i] < a._stackingOrder[i]) {\n            return -1;\n          }\n        }\n        var aNode = a.actualNode;\n        var bNode = b.actualNode;\n        if (aNode.getRootNode && aNode.getRootNode() !== bNode.getRootNode()) {\n          var boundaries = [];\n          while (aNode) {\n            boundaries.push({\n              root: aNode.getRootNode(),\n              node: aNode\n            });\n            aNode = aNode.getRootNode().host;\n          }\n          while (bNode && !boundaries.find(function(boundary) {\n            return boundary.root === bNode.getRootNode();\n          })) {\n            bNode = bNode.getRootNode().host;\n          }\n          aNode = boundaries.find(function(boundary) {\n            return boundary.root === bNode.getRootNode();\n          }).node;\n          if (aNode === bNode) {\n            return a.actualNode.getRootNode() !== aNode.getRootNode() ? -1 : 1;\n          }\n        }\n        var _window$Node = window.Node, DOCUMENT_POSITION_FOLLOWING = _window$Node.DOCUMENT_POSITION_FOLLOWING, DOCUMENT_POSITION_CONTAINS = _window$Node.DOCUMENT_POSITION_CONTAINS, DOCUMENT_POSITION_CONTAINED_BY = _window$Node.DOCUMENT_POSITION_CONTAINED_BY;\n        var docPosition = aNode.compareDocumentPosition(bNode);\n        var DOMOrder = docPosition & DOCUMENT_POSITION_FOLLOWING ? 1 : -1;\n        var isDescendant = docPosition & DOCUMENT_POSITION_CONTAINS || docPosition & DOCUMENT_POSITION_CONTAINED_BY;\n        var aPosition = getPositionOrder(a);\n        var bPosition = getPositionOrder(b);\n        if (aPosition === bPosition || isDescendant) {\n          return DOMOrder;\n        }\n        return bPosition - aPosition;\n      }\n      function getStackingOrder(vNode, parentVNode) {\n        var stackingOrder = parentVNode._stackingOrder.slice();\n        var zIndex = vNode.getComputedStylePropertyValue('z-index');\n        if (zIndex !== 'auto') {\n          stackingOrder[stackingOrder.length - 1] = parseInt(zIndex);\n        }\n        if (isStackingContext(vNode, parentVNode)) {\n          stackingOrder.push(0);\n        }\n        return stackingOrder;\n      }\n      function findScrollRegionParent(vNode, parentVNode) {\n        var scrollRegionParent = null;\n        var checkedNodes = [ vNode ];\n        while (parentVNode) {\n          if (parentVNode._scrollRegionParent) {\n            scrollRegionParent = parentVNode._scrollRegionParent;\n            break;\n          }\n          if (axe.utils.getScroll(parentVNode.actualNode)) {\n            scrollRegionParent = parentVNode;\n            break;\n          }\n          checkedNodes.push(parentVNode);\n          parentVNode = axe.utils.getNodeFromTree(parentVNode.actualNode.parentElement || parentVNode.actualNode.parentNode);\n        }\n        checkedNodes.forEach(function(vNode) {\n          return vNode._scrollRegionParent = scrollRegionParent;\n        });\n        return scrollRegionParent;\n      }\n      function addNodeToGrid(grid, vNode) {\n        vNode._grid = grid;\n        vNode.clientRects.forEach(function(rect) {\n          var x = rect.left;\n          var y = rect.top;\n          var startRow = y / gridSize | 0;\n          var startCol = x / gridSize | 0;\n          var endRow = (y + rect.height) / gridSize | 0;\n          var endCol = (x + rect.width) / gridSize | 0;\n          for (var row = startRow; row <= endRow; row++) {\n            grid.cells[row] = grid.cells[row] || [];\n            for (var col = startCol; col <= endCol; col++) {\n              grid.cells[row][col] = grid.cells[row][col] || [];\n              if (!grid.cells[row][col].includes(vNode)) {\n                grid.cells[row][col].push(vNode);\n              }\n            }\n          }\n        });\n      }\n      function createGrid() {\n        var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;\n        var rootGrid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          container: null,\n          cells: []\n        };\n        var parentVNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        if (!parentVNode) {\n          var vNode = axe.utils.getNodeFromTree(document.documentElement);\n          if (!vNode) {\n            vNode = new VirtualNode(document.documentElement);\n          }\n          vNode._stackingOrder = [ 0 ];\n          addNodeToGrid(rootGrid, vNode);\n          if (axe.utils.getScroll(vNode.actualNode)) {\n            var subGrid = {\n              container: vNode,\n              cells: []\n            };\n            vNode._subGrid = subGrid;\n          }\n        }\n        var treeWalker = document.createTreeWalker(root, window.NodeFilter.SHOW_ELEMENT, null, false);\n        var node = parentVNode ? treeWalker.nextNode() : treeWalker.currentNode;\n        while (node) {\n          var _vNode = axe.utils.getNodeFromTree(node);\n          if (node.parentElement) {\n            parentVNode = axe.utils.getNodeFromTree(node.parentElement);\n          } else if (node.parentNode && axe.utils.getNodeFromTree(node.parentNode)) {\n            parentVNode = axe.utils.getNodeFromTree(node.parentNode);\n          }\n          if (!_vNode) {\n            _vNode = new VirtualNode(node, parentVNode);\n          }\n          _vNode._stackingOrder = getStackingOrder(_vNode, parentVNode);\n          var scrollRegionParent = findScrollRegionParent(_vNode, parentVNode);\n          var grid = scrollRegionParent ? scrollRegionParent._subGrid : rootGrid;\n          if (axe.utils.getScroll(_vNode.actualNode)) {\n            var _subGrid = {\n              container: _vNode,\n              cells: []\n            };\n            _vNode._subGrid = _subGrid;\n          }\n          var rect = _vNode.boundingClientRect;\n          if (rect.width !== 0 && rect.height !== 0 && dom.isVisible(node)) {\n            addNodeToGrid(grid, _vNode);\n          }\n          if (axe.utils.isShadowRoot(node)) {\n            createGrid(node.shadowRoot, grid, _vNode);\n          }\n          node = treeWalker.nextNode();\n        }\n      }\n      function getRectStack(grid, rect) {\n        var recursed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        var x = rect.left + rect.width / 2;\n        var y = rect.top + rect.height / 2;\n        var row = y / gridSize | 0;\n        var col = x / gridSize | 0;\n        var stack = grid.cells[row][col].filter(function(gridCellNode) {\n          return gridCellNode.clientRects.find(function(clientRect) {\n            var rectX = clientRect.left;\n            var rectY = clientRect.top;\n            return x <= rectX + clientRect.width && x >= rectX && y <= rectY + clientRect.height && y >= rectY;\n          });\n        });\n        var gridContainer = grid.container;\n        if (gridContainer) {\n          stack = getRectStack(gridContainer._grid, gridContainer.boundingClientRect, true).concat(stack);\n        }\n        if (!recursed) {\n          stack = stack.sort(visuallySort).map(function(vNode) {\n            return vNode.actualNode;\n          }).concat(document.documentElement).filter(function(node, index, array) {\n            return array.indexOf(node) === index;\n          });\n        }\n        return stack;\n      }\n      dom.getElementStack = function(node) {\n        if (!axe._cache.get('gridCreated')) {\n          createGrid();\n          axe._cache.set('gridCreated', true);\n        }\n        var vNode = axe.utils.getNodeFromTree(node);\n        var grid = vNode._grid;\n        if (!grid) {\n          return [];\n        }\n        return getRectStack(grid, vNode.boundingClientRect);\n      };\n      dom.getTextElementStack = function(node) {\n        if (!axe._cache.get('gridCreated')) {\n          createGrid();\n          axe._cache.set('gridCreated', true);\n        }\n        var vNode = axe.utils.getNodeFromTree(node);\n        var grid = vNode._grid;\n        if (!grid) {\n          return [];\n        }\n        var clientRects = [];\n        Array.from(node.childNodes).forEach(function(elm) {\n          if (elm.nodeType === 3 && axe.commons.text.sanitize(elm.textContent) !== '') {\n            var range = document.createRange();\n            range.selectNodeContents(elm);\n            var rects = range.getClientRects();\n            for (var i = 0; i < rects.length; i++) {\n              var rect = rects[i];\n              if (rect.width >= 1 && rect.height >= 1) {\n                clientRects.push(rect);\n              }\n            }\n          }\n        });\n        return clientRects.map(function(rect) {\n          return getRectStack(grid, rect);\n        });\n      };\n      dom.getRootNode = axe.utils.getRootNode;\n      dom.getScrollOffset = function(element) {\n        'use strict';\n        if (!element.nodeType && element.document) {\n          element = element.document;\n        }\n        if (element.nodeType === 9) {\n          var docElement = element.documentElement, body = element.body;\n          return {\n            left: docElement && docElement.scrollLeft || body && body.scrollLeft || 0,\n            top: docElement && docElement.scrollTop || body && body.scrollTop || 0\n          };\n        }\n        return {\n          left: element.scrollLeft,\n          top: element.scrollTop\n        };\n      };\n      dom.getTabbableElements = function getTabbableElements(virtualNode) {\n        var nodeAndDescendents = axe.utils.querySelectorAll(virtualNode, '*');\n        var tabbableElements = nodeAndDescendents.filter(function(vNode) {\n          var isFocusable = vNode.isFocusable;\n          var tabIndex = vNode.actualNode.getAttribute('tabindex');\n          tabIndex = tabIndex && !isNaN(parseInt(tabIndex, 10)) ? parseInt(tabIndex) : null;\n          return tabIndex ? isFocusable && tabIndex >= 0 : isFocusable;\n        });\n        return tabbableElements;\n      };\n      dom.getViewportSize = function(win) {\n        'use strict';\n        var body, doc = win.document, docElement = doc.documentElement;\n        if (win.innerWidth) {\n          return {\n            width: win.innerWidth,\n            height: win.innerHeight\n          };\n        }\n        if (docElement) {\n          return {\n            width: docElement.clientWidth,\n            height: docElement.clientHeight\n          };\n        }\n        body = doc.body;\n        return {\n          width: body.clientWidth,\n          height: body.clientHeight\n        };\n      };\n      var hiddenTextElms = [ 'HEAD', 'TITLE', 'TEMPLATE', 'SCRIPT', 'STYLE', 'IFRAME', 'OBJECT', 'VIDEO', 'AUDIO', 'NOSCRIPT' ];\n      function hasChildTextNodes(elm) {\n        if (!hiddenTextElms.includes(elm.actualNode.nodeName.toUpperCase())) {\n          return elm.children.some(function(_ref40) {\n            var actualNode = _ref40.actualNode;\n            return actualNode.nodeType === 3 && actualNode.nodeValue.trim();\n          });\n        }\n      }\n      dom.hasContentVirtual = function(elm, noRecursion, ignoreAria) {\n        return hasChildTextNodes(elm) || dom.isVisualContent(elm.actualNode) || !ignoreAria && !!aria.labelVirtual(elm) || !noRecursion && elm.children.some(function(child) {\n          return child.actualNode.nodeType === 1 && dom.hasContentVirtual(child);\n        });\n      };\n      dom.hasContent = function hasContent(elm, noRecursion, ignoreAria) {\n        elm = axe.utils.getNodeFromTree(elm);\n        return dom.hasContentVirtual(elm, noRecursion, ignoreAria);\n      };\n      dom.idrefs = function(node, attr) {\n        'use strict';\n        var index, length, doc = dom.getRootNode(node), result = [], idrefs = node.getAttribute(attr);\n        if (idrefs) {\n          idrefs = axe.utils.tokenList(idrefs);\n          for (index = 0, length = idrefs.length; index < length; index++) {\n            result.push(doc.getElementById(idrefs[index]));\n          }\n        }\n        return result;\n      };\n      function focusDisabled(el) {\n        return el.disabled || el.nodeName.toUpperCase() !== 'AREA' && dom.isHiddenWithCSS(el);\n      }\n      dom.isFocusable = function(el) {\n        'use strict';\n        if (focusDisabled(el)) {\n          return false;\n        } else if (dom.isNativelyFocusable(el)) {\n          return true;\n        }\n        var tabindex = el.getAttribute('tabindex');\n        if (tabindex && !isNaN(parseInt(tabindex, 10))) {\n          return true;\n        }\n        return false;\n      };\n      dom.isNativelyFocusable = function(el) {\n        'use strict';\n        if (!el || focusDisabled(el)) {\n          return false;\n        }\n        switch (el.nodeName.toUpperCase()) {\n         case 'A':\n         case 'AREA':\n          if (el.href) {\n            return true;\n          }\n          break;\n\n         case 'INPUT':\n          return el.type !== 'hidden';\n\n         case 'TEXTAREA':\n         case 'SELECT':\n         case 'SUMMARY':\n         case 'BUTTON':\n          return true;\n\n         case 'DETAILS':\n          return !el.querySelector('summary');\n        }\n        return false;\n      };\n      dom.insertedIntoFocusOrder = function(el) {\n        var tabIndex = parseInt(el.getAttribute('tabindex'), 10);\n        return tabIndex > -1 && dom.isFocusable(el) && !dom.isNativelyFocusable(el);\n      };\n      dom.isHiddenWithCSS = function isHiddenWithCSS(el, descendentVisibilityValue) {\n        var vNode = axe.utils.getNodeFromTree(el);\n        if (!vNode) {\n          return _isHiddenWithCSS(el, descendentVisibilityValue);\n        }\n        if (vNode._isHiddenWithCSS === void 0) {\n          vNode._isHiddenWithCSS = _isHiddenWithCSS(el, descendentVisibilityValue);\n        }\n        return vNode._isHiddenWithCSS;\n      };\n      function _isHiddenWithCSS(el, descendentVisibilityValue) {\n        if (el.nodeType === 9) {\n          return false;\n        }\n        if (el.nodeType === 11) {\n          el = el.host;\n        }\n        if ([ 'STYLE', 'SCRIPT' ].includes(el.nodeName.toUpperCase())) {\n          return false;\n        }\n        var style = window.getComputedStyle(el, null);\n        if (!style) {\n          throw new Error('Style does not exist for the given element.');\n        }\n        var displayValue = style.getPropertyValue('display');\n        if (displayValue === 'none') {\n          return true;\n        }\n        var HIDDEN_VISIBILITY_VALUES = [ 'hidden', 'collapse' ];\n        var visibilityValue = style.getPropertyValue('visibility');\n        if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && !descendentVisibilityValue) {\n          return true;\n        }\n        if (HIDDEN_VISIBILITY_VALUES.includes(visibilityValue) && descendentVisibilityValue && HIDDEN_VISIBILITY_VALUES.includes(descendentVisibilityValue)) {\n          return true;\n        }\n        var parent = dom.getComposedParent(el);\n        if (parent && !HIDDEN_VISIBILITY_VALUES.includes(visibilityValue)) {\n          return dom.isHiddenWithCSS(parent, visibilityValue);\n        }\n        return false;\n      }\n      dom.isHTML5 = function(doc) {\n        var node = doc.doctype;\n        if (node === null) {\n          return false;\n        }\n        return node.name === 'html' && !node.publicId && !node.systemId;\n      };\n      function walkDomNode(node, functor) {\n        if (functor(node.actualNode) !== false) {\n          node.children.forEach(function(child) {\n            return walkDomNode(child, functor);\n          });\n        }\n      }\n      var blockLike = [ 'block', 'list-item', 'table', 'flex', 'grid', 'inline-block' ];\n      function isBlock(elm) {\n        var display = window.getComputedStyle(elm).getPropertyValue('display');\n        return blockLike.includes(display) || display.substr(0, 6) === 'table-';\n      }\n      function getBlockParent(node) {\n        var parentBlock = dom.getComposedParent(node);\n        while (parentBlock && !isBlock(parentBlock)) {\n          parentBlock = dom.getComposedParent(parentBlock);\n        }\n        return axe.utils.getNodeFromTree(parentBlock);\n      }\n      dom.isInTextBlock = function isInTextBlock(node) {\n        if (isBlock(node)) {\n          return false;\n        }\n        var virtualParent = getBlockParent(node);\n        var parentText = '';\n        var linkText = '';\n        var inBrBlock = 0;\n        walkDomNode(virtualParent, function(currNode) {\n          if (inBrBlock === 2) {\n            return false;\n          }\n          if (currNode.nodeType === 3) {\n            parentText += currNode.nodeValue;\n          }\n          if (currNode.nodeType !== 1) {\n            return;\n          }\n          var nodeName = (currNode.nodeName || '').toUpperCase();\n          if ([ 'BR', 'HR' ].includes(nodeName)) {\n            if (inBrBlock === 0) {\n              parentText = '';\n              linkText = '';\n            } else {\n              inBrBlock = 2;\n            }\n          } else if (currNode.style.display === 'none' || currNode.style.overflow === 'hidden' || ![ '', null, 'none' ].includes(currNode.style['float']) || ![ '', null, 'relative' ].includes(currNode.style.position)) {\n            return false;\n          } else if (nodeName === 'A' && currNode.href || (currNode.getAttribute('role') || '').toLowerCase() === 'link') {\n            if (currNode === node) {\n              inBrBlock = 1;\n            }\n            linkText += currNode.textContent;\n            return false;\n          }\n        });\n        parentText = axe.commons.text.sanitize(parentText);\n        linkText = axe.commons.text.sanitize(linkText);\n        return parentText.length > linkText.length;\n      };\n      dom.isModalOpen = function isModalOpen(options) {\n        options = options || {};\n        var modalPercent = options.modalPercent || .75;\n        if (axe._cache.get('isModalOpen')) {\n          return axe._cache.get('isModalOpen');\n        }\n        var definiteModals = axe.utils.querySelectorAllFilter(axe._tree[0], 'dialog, [role=dialog], [aria-modal=true]', function(vNode) {\n          return dom.isVisible(vNode.actualNode);\n        });\n        if (definiteModals.length) {\n          axe._cache.set('isModalOpen', true);\n          return true;\n        }\n        var viewport = dom.getViewportSize(window);\n        var percentWidth = viewport.width * modalPercent;\n        var percentHeight = viewport.height * modalPercent;\n        var x = (viewport.width - percentWidth) / 2;\n        var y = (viewport.height - percentHeight) / 2;\n        var points = [ {\n          x: x,\n          y: y\n        }, {\n          x: viewport.width - x,\n          y: y\n        }, {\n          x: viewport.width / 2,\n          y: viewport.height / 2\n        }, {\n          x: x,\n          y: viewport.height - y\n        }, {\n          x: viewport.width - x,\n          y: viewport.height - y\n        } ];\n        var stacks = points.map(function(point) {\n          return Array.from(document.elementsFromPoint(point.x, point.y));\n        });\n        var _loop3 = function _loop3(i) {\n          var modalElement = stacks[i].find(function(elm) {\n            var style = window.getComputedStyle(elm);\n            return parseInt(style.width, 10) >= percentWidth && parseInt(style.height, 10) >= percentHeight && style.getPropertyValue('pointer-events') !== 'none' && (style.position === 'absolute' || style.position === 'fixed');\n          });\n          if (modalElement && stacks.every(function(stack) {\n            return stack.includes(modalElement);\n          })) {\n            axe._cache.set('isModalOpen', true);\n            return {\n              v: true\n            };\n          }\n        };\n        for (var i = 0; i < stacks.length; i++) {\n          var _ret3 = _loop3(i);\n          if (_typeof(_ret3) === 'object') {\n            return _ret3.v;\n          }\n        }\n        axe._cache.set('isModalOpen', undefined);\n        return undefined;\n      };\n      dom.isNode = function(element) {\n        'use strict';\n        return element instanceof Node;\n      };\n      function noParentScrolled(element, offset) {\n        element = dom.getComposedParent(element);\n        while (element && element.nodeName.toLowerCase() !== 'html') {\n          if (element.scrollTop) {\n            offset += element.scrollTop;\n            if (offset >= 0) {\n              return false;\n            }\n          }\n          element = dom.getComposedParent(element);\n        }\n        return true;\n      }\n      dom.isOffscreen = function(element) {\n        var leftBoundary;\n        var docElement = document.documentElement;\n        var styl = window.getComputedStyle(element);\n        var dir = window.getComputedStyle(document.body || docElement).getPropertyValue('direction');\n        var coords = dom.getElementCoordinates(element);\n        if (coords.bottom < 0 && (noParentScrolled(element, coords.bottom) || styl.position === 'absolute')) {\n          return true;\n        }\n        if (coords.left === 0 && coords.right === 0) {\n          return false;\n        }\n        if (dir === 'ltr') {\n          if (coords.right <= 0) {\n            return true;\n          }\n        } else {\n          leftBoundary = Math.max(docElement.scrollWidth, dom.getViewportSize(window).width);\n          if (coords.left >= leftBoundary) {\n            return true;\n          }\n        }\n        return false;\n      };\n      var isInternalLinkRegex = /^\\/?#[^/!]/;\n      dom.isSkipLink = function(element) {\n        if (!isInternalLinkRegex.test(element.getAttribute('href'))) {\n          return false;\n        }\n        var firstPageLink;\n        if (typeof axe._cache.get('firstPageLink') !== 'undefined') {\n          firstPageLink = axe._cache.get('firstPageLink');\n        } else {\n          firstPageLink = axe.utils.querySelectorAll(axe._tree, 'a:not([href^=\"#\"]):not([href^=\"/#\"]):not([href^=\"javascript\"])')[0];\n          axe._cache.set('firstPageLink', firstPageLink || null);\n        }\n        if (!firstPageLink) {\n          return true;\n        }\n        return element.compareDocumentPosition(firstPageLink.actualNode) === element.DOCUMENT_POSITION_FOLLOWING;\n      };\n      var clipRegex = /rect\\s*\\(([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px,?\\s*([0-9]+)px\\s*\\)/;\n      var clipPathRegex = /(\\w+)\\((\\d+)/;\n      function isClipped(style) {\n        'use strict';\n        var matchesClip = style.getPropertyValue('clip').match(clipRegex);\n        var matchesClipPath = style.getPropertyValue('clip-path').match(clipPathRegex);\n        if (matchesClip && matchesClip.length === 5) {\n          return matchesClip[3] - matchesClip[1] <= 0 && matchesClip[2] - matchesClip[4] <= 0;\n        }\n        if (matchesClipPath) {\n          var type = matchesClipPath[1];\n          var value = parseInt(matchesClipPath[2], 10);\n          switch (type) {\n           case 'inset':\n            return value >= 50;\n\n           case 'circle':\n            return value === 0;\n\n           default:\n          }\n        }\n        return false;\n      }\n      function isAreaVisible(el, screenReader, recursed) {\n        var mapEl = dom.findUp(el, 'map');\n        if (!mapEl) {\n          return false;\n        }\n        var mapElName = mapEl.getAttribute('name');\n        if (!mapElName) {\n          return false;\n        }\n        var mapElRootNode = dom.getRootNode(el);\n        if (!mapElRootNode || mapElRootNode.nodeType !== 9) {\n          return false;\n        }\n        var refs = axe.utils.querySelectorAll(axe._tree, 'img[usemap=\"#'.concat(axe.utils.escapeSelector(mapElName), '\"]'));\n        if (!refs || !refs.length) {\n          return false;\n        }\n        return refs.some(function(_ref41) {\n          var actualNode = _ref41.actualNode;\n          return dom.isVisible(actualNode, screenReader, recursed);\n        });\n      }\n      dom.isVisible = function(el, screenReader, recursed) {\n        'use strict';\n        var node = axe.utils.getNodeFromTree(el);\n        var cacheName = '_isVisible' + (screenReader ? 'ScreenReader' : '');\n        if (el.nodeType === 9) {\n          return true;\n        }\n        if (el.nodeType === 11) {\n          el = el.host;\n        }\n        if (node && typeof node[cacheName] !== 'undefined') {\n          return node[cacheName];\n        }\n        var style = window.getComputedStyle(el, null);\n        if (style === null) {\n          return false;\n        }\n        var nodeName = el.nodeName.toUpperCase();\n        if (nodeName === 'AREA') {\n          return isAreaVisible(el, screenReader, recursed);\n        }\n        if (style.getPropertyValue('display') === 'none' || [ 'STYLE', 'SCRIPT', 'NOSCRIPT', 'TEMPLATE' ].includes(nodeName)) {\n          return false;\n        }\n        if (screenReader && el.getAttribute('aria-hidden') === 'true') {\n          return false;\n        }\n        if (!screenReader && (isClipped(style) || style.getPropertyValue('opacity') === '0' || axe.utils.getScroll(el) && parseInt(style.getPropertyValue('height')) === 0)) {\n          return false;\n        }\n        if (!recursed && (style.getPropertyValue('visibility') === 'hidden' || !screenReader && axe.commons.dom.isOffscreen(el))) {\n          return false;\n        }\n        var parent = el.assignedSlot ? el.assignedSlot : el.parentNode;\n        var isVisible = false;\n        if (parent) {\n          isVisible = dom.isVisible(parent, screenReader, true);\n        }\n        if (node) {\n          node[cacheName] = isVisible;\n        }\n        return isVisible;\n      };\n      var visualRoles = [ 'checkbox', 'img', 'radio', 'range', 'slider', 'spinbutton', 'textbox' ];\n      dom.isVisualContent = function(element) {\n        var role = element.getAttribute('role');\n        if (role) {\n          return visualRoles.indexOf(role) !== -1;\n        }\n        switch (element.nodeName.toUpperCase()) {\n         case 'IMG':\n         case 'IFRAME':\n         case 'OBJECT':\n         case 'VIDEO':\n         case 'AUDIO':\n         case 'CANVAS':\n         case 'SVG':\n         case 'MATH':\n         case 'BUTTON':\n         case 'SELECT':\n         case 'TEXTAREA':\n         case 'KEYGEN':\n         case 'PROGRESS':\n         case 'METER':\n          return true;\n\n         case 'INPUT':\n          return element.type !== 'hidden';\n\n         default:\n          return false;\n        }\n      };\n      dom.shadowElementsFromPoint = function(nodeX, nodeY) {\n        var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;\n        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n        if (i > 999) {\n          throw new Error('Infinite loop detected');\n        }\n        return Array.from(root.elementsFromPoint(nodeX, nodeY) || []).filter(function(nodes) {\n          return dom.getRootNode(nodes) === root;\n        }).reduce(function(stack, elm) {\n          if (axe.utils.isShadowRoot(elm)) {\n            var shadowStack = dom.shadowElementsFromPoint(nodeX, nodeY, elm.shadowRoot, i + 1);\n            stack = stack.concat(shadowStack);\n            if (stack.length && axe.commons.dom.visuallyContains(stack[0], elm)) {\n              stack.push(elm);\n            }\n          } else {\n            stack.push(elm);\n          }\n          return stack;\n        }, []);\n      };\n      dom.urlPropsFromAttribute = function urlPropsFromAttribute(node, attribute) {\n        if (!node.hasAttribute(attribute)) {\n          return undefined;\n        }\n        var nodeName = node.nodeName.toUpperCase();\n        var parser = node;\n        if (![ 'A', 'AREA' ].includes(nodeName) || node.ownerSVGElement) {\n          parser = document.createElement('a');\n          parser.href = node.getAttribute(attribute);\n        }\n        var protocol = [ 'https:', 'ftps:' ].includes(parser.protocol) ? parser.protocol.replace(/s:$/, ':') : parser.protocol;\n        var parserPathname = /^\\//.test(parser.pathname) ? parser.pathname : '/'.concat(parser.pathname);\n        var _getPathnameOrFilenam = getPathnameOrFilename(parserPathname), pathname = _getPathnameOrFilenam.pathname, filename = _getPathnameOrFilenam.filename;\n        return {\n          protocol: protocol,\n          hostname: parser.hostname,\n          port: getPort(parser.port),\n          pathname: /\\/$/.test(pathname) ? pathname : ''.concat(pathname, '/'),\n          search: getSearchPairs(parser.search),\n          hash: getHashRoute(parser.hash),\n          filename: filename\n        };\n      };\n      function getPort(port) {\n        var excludePorts = [ '443', '80' ];\n        return !excludePorts.includes(port) ? port : '';\n      }\n      function getPathnameOrFilename(pathname) {\n        var filename = pathname.split('/').pop();\n        if (!filename || filename.indexOf('.') === -1) {\n          return {\n            pathname: pathname,\n            filename: ''\n          };\n        }\n        return {\n          pathname: pathname.replace(filename, ''),\n          filename: /index./.test(filename) ? '' : filename\n        };\n      }\n      function getSearchPairs(searchStr) {\n        var query = {};\n        if (!searchStr || !searchStr.length) {\n          return query;\n        }\n        var pairs = searchStr.substring(1).split('&');\n        if (!pairs || !pairs.length) {\n          return query;\n        }\n        for (var index = 0; index < pairs.length; index++) {\n          var pair = pairs[index];\n          var _pair$split = pair.split('='), _pair$split2 = _slicedToArray(_pair$split, 2), key = _pair$split2[0], _pair$split2$ = _pair$split2[1], value = _pair$split2$ === void 0 ? '' : _pair$split2$;\n          query[decodeURIComponent(key)] = decodeURIComponent(value);\n        }\n        return query;\n      }\n      function getHashRoute(hash) {\n        if (!hash) {\n          return '';\n        }\n        var hashRegex = /#!?\\/?/g;\n        var hasMatch = hash.match(hashRegex);\n        if (!hasMatch) {\n          return '';\n        }\n        var _hasMatch = _slicedToArray(hasMatch, 1), matchedStr = _hasMatch[0];\n        if (matchedStr === '#') {\n          return '';\n        }\n        return hash;\n      }\n      function getScrollAncestor(node) {\n        var vNode = axe.utils.getNodeFromTree(node);\n        var ancestor = vNode.parent;\n        while (ancestor) {\n          if (axe.utils.getScroll(ancestor.actualNode)) {\n            return ancestor.actualNode;\n          }\n          ancestor = ancestor.parent;\n        }\n      }\n      function contains(node, parent) {\n        var rectBound = node.getBoundingClientRect();\n        var margin = .01;\n        var rect = {\n          top: rectBound.top + margin,\n          bottom: rectBound.bottom - margin,\n          left: rectBound.left + margin,\n          right: rectBound.right - margin\n        };\n        var parentRect = parent.getBoundingClientRect();\n        var parentTop = parentRect.top;\n        var parentLeft = parentRect.left;\n        var parentScrollArea = {\n          top: parentTop - parent.scrollTop,\n          bottom: parentTop - parent.scrollTop + parent.scrollHeight,\n          left: parentLeft - parent.scrollLeft,\n          right: parentLeft - parent.scrollLeft + parent.scrollWidth\n        };\n        var style = window.getComputedStyle(parent);\n        if (style.getPropertyValue('display') === 'inline') {\n          return true;\n        }\n        if (rect.left < parentScrollArea.left && rect.left < parentRect.left || rect.top < parentScrollArea.top && rect.top < parentRect.top || rect.right > parentScrollArea.right && rect.right > parentRect.right || rect.bottom > parentScrollArea.bottom && rect.bottom > parentRect.bottom) {\n          return false;\n        }\n        if (rect.right > parentRect.right || rect.bottom > parentRect.bottom) {\n          return style.overflow === 'scroll' || style.overflow === 'auto' || style.overflow === 'hidden' || parent instanceof HTMLBodyElement || parent instanceof HTMLHtmlElement;\n        }\n        return true;\n      }\n      dom.visuallyContains = function visuallyContains(node, parent) {\n        var parentScrollAncestor = getScrollAncestor(parent);\n        do {\n          var nextScrollAncestor = getScrollAncestor(node);\n          if (nextScrollAncestor === parentScrollAncestor || nextScrollAncestor === parent) {\n            return contains(node, parent);\n          }\n          node = nextScrollAncestor;\n        } while (node);\n        return false;\n      };\n      dom.visuallyOverlaps = function(rect, parent) {\n        var parentRect = parent.getBoundingClientRect();\n        var parentTop = parentRect.top;\n        var parentLeft = parentRect.left;\n        var parentScrollArea = {\n          top: parentTop - parent.scrollTop,\n          bottom: parentTop - parent.scrollTop + parent.scrollHeight,\n          left: parentLeft - parent.scrollLeft,\n          right: parentLeft - parent.scrollLeft + parent.scrollWidth\n        };\n        if (rect.left > parentScrollArea.right && rect.left > parentRect.right || rect.top > parentScrollArea.bottom && rect.top > parentRect.bottom || rect.right < parentScrollArea.left && rect.right < parentRect.left || rect.bottom < parentScrollArea.top && rect.bottom < parentRect.top) {\n          return false;\n        }\n        var style = window.getComputedStyle(parent);\n        if (rect.left > parentRect.right || rect.top > parentRect.bottom) {\n          return style.overflow === 'scroll' || style.overflow === 'auto' || parent instanceof HTMLBodyElement || parent instanceof HTMLHtmlElement;\n        }\n        return true;\n      };\n      forms.isAriaCombobox = function(node) {\n        var role = axe.commons.aria.getRole(node, {\n          noImplicit: true\n        });\n        return role === 'combobox';\n      };\n      forms.isAriaListbox = function(node) {\n        var role = axe.commons.aria.getRole(node, {\n          noImplicit: true\n        });\n        return role === 'listbox';\n      };\n      var rangeRoles = [ 'progressbar', 'scrollbar', 'slider', 'spinbutton' ];\n      forms.isAriaRange = function(node) {\n        var role = axe.commons.aria.getRole(node, {\n          noImplicit: true\n        });\n        return rangeRoles.includes(role);\n      };\n      forms.isAriaTextbox = function(node) {\n        var role = axe.commons.aria.getRole(node, {\n          noImplicit: true\n        });\n        return role === 'textbox';\n      };\n      forms.isNativeSelect = function(node) {\n        var nodeName = node.nodeName.toUpperCase();\n        return nodeName === 'SELECT';\n      };\n      var nonTextInputTypes = [ 'button', 'checkbox', 'color', 'file', 'hidden', 'image', 'password', 'radio', 'reset', 'submit' ];\n      forms.isNativeTextbox = function(node) {\n        var nodeName = node.nodeName.toUpperCase();\n        return nodeName === 'TEXTAREA' || nodeName === 'INPUT' && !nonTextInputTypes.includes(node.type);\n      };\n      matches.attributes = function matchesAttributes(vNode, matcher) {\n        if (!(vNode instanceof axe.AbstractVirtualNode)) {\n          vNode = axe.utils.getNodeFromTree(vNode);\n        }\n        return matches.fromFunction(function(attrName) {\n          return vNode.attr(attrName);\n        }, matcher);\n      };\n      matches.condition = function(arg, condition) {\n        return !!condition(arg);\n      };\n      var matchers = [ 'nodeName', 'attributes', 'properties', 'condition' ];\n      matches.fromDefinition = function matchFromDefinition(vNode, definition) {\n        if (!(vNode instanceof axe.AbstractVirtualNode)) {\n          vNode = axe.utils.getNodeFromTree(vNode);\n        }\n        if (Array.isArray(definition)) {\n          return definition.some(function(definitionItem) {\n            return matches(vNode, definitionItem);\n          });\n        }\n        if (typeof definition === 'string') {\n          return axe.utils.matches(vNode, definition);\n        }\n        return Object.keys(definition).every(function(matcherName) {\n          if (!matchers.includes(matcherName)) {\n            throw new Error('Unknown matcher type \"'.concat(matcherName, '\"'));\n          }\n          var matchMethod = matches[matcherName];\n          var matcher = definition[matcherName];\n          return matchMethod(vNode, matcher);\n        });\n      };\n      matches.fromFunction = function matchFromFunction(getValue, matcher) {\n        var matcherType = _typeof(matcher);\n        if (matcherType !== 'object' || Array.isArray(matcher) || matcher instanceof RegExp) {\n          throw new Error('Expect matcher to be an object');\n        }\n        return Object.keys(matcher).every(function(propName) {\n          return matches.fromPrimative(getValue(propName), matcher[propName]);\n        });\n      };\n      matches.fromPrimative = function matchFromPrimative(someString, matcher) {\n        var matcherType = _typeof(matcher);\n        if (Array.isArray(matcher) && typeof someString !== 'undefined') {\n          return matcher.includes(someString);\n        }\n        if (matcherType === 'function') {\n          return !!matcher(someString);\n        }\n        if (matcher instanceof RegExp) {\n          return matcher.test(someString);\n        }\n        return matcher === someString;\n      };\n      matches.nodeName = function matchNodeName(vNode, matcher) {\n        if (!(vNode instanceof axe.AbstractVirtualNode)) {\n          vNode = axe.utils.getNodeFromTree(vNode);\n        }\n        return matches.fromPrimative(vNode.props.nodeName, matcher);\n      };\n      matches.properties = function matchesProperties(vNode, matcher) {\n        if (!(vNode instanceof axe.AbstractVirtualNode)) {\n          vNode = axe.utils.getNodeFromTree(vNode);\n        }\n        return matches.fromFunction(function(propName) {\n          return vNode.props[propName];\n        }, matcher);\n      };\n      table.getAllCells = function(tableElm) {\n        var rowIndex, cellIndex, rowLength, cellLength;\n        var cells = [];\n        for (rowIndex = 0, rowLength = tableElm.rows.length; rowIndex < rowLength; rowIndex++) {\n          for (cellIndex = 0, cellLength = tableElm.rows[rowIndex].cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(tableElm.rows[rowIndex].cells[cellIndex]);\n          }\n        }\n        return cells;\n      };\n      table.getCellPosition = axe.utils.memoize(function(cell, tableGrid) {\n        var rowIndex, index;\n        if (!tableGrid) {\n          tableGrid = table.toGrid(dom.findUp(cell, 'table'));\n        }\n        for (rowIndex = 0; rowIndex < tableGrid.length; rowIndex++) {\n          if (tableGrid[rowIndex]) {\n            index = tableGrid[rowIndex].indexOf(cell);\n            if (index !== -1) {\n              return {\n                x: index,\n                y: rowIndex\n              };\n            }\n          }\n        }\n      });\n      function traverseForHeaders(headerType, position, tableGrid) {\n        var property = headerType === 'row' ? '_rowHeaders' : '_colHeaders';\n        var predicate = headerType === 'row' ? table.isRowHeader : table.isColumnHeader;\n        var rowEnd = headerType === 'row' ? position.y : 0;\n        var colEnd = headerType === 'row' ? 0 : position.x;\n        var headers;\n        var cells = [];\n        for (var row = position.y; row >= rowEnd && !headers; row--) {\n          for (var col = position.x; col >= colEnd; col--) {\n            var cell = tableGrid[row] ? tableGrid[row][col] : undefined;\n            if (!cell) {\n              continue;\n            }\n            var vNode = axe.utils.getNodeFromTree(cell);\n            if (vNode[property]) {\n              headers = vNode[property];\n              break;\n            }\n            cells.push(cell);\n          }\n        }\n        headers = (headers || []).concat(cells.filter(predicate));\n        cells.forEach(function(tableCell) {\n          var vNode = axe.utils.getNodeFromTree(tableCell);\n          vNode[property] = headers;\n        });\n        return headers;\n      }\n      table.getHeaders = function(cell, tableGrid) {\n        if (cell.getAttribute('headers')) {\n          var headers = commons.dom.idrefs(cell, 'headers');\n          if (headers.filter(function(header) {\n            return header;\n          }).length) {\n            return headers;\n          }\n        }\n        if (!tableGrid) {\n          tableGrid = commons.table.toGrid(commons.dom.findUp(cell, 'table'));\n        }\n        var position = commons.table.getCellPosition(cell, tableGrid);\n        var rowHeaders = traverseForHeaders('row', position, tableGrid);\n        var colHeaders = traverseForHeaders('col', position, tableGrid);\n        return [].concat(rowHeaders, colHeaders).reverse();\n      };\n      table.getScope = function(cell) {\n        var scope = cell.getAttribute('scope');\n        var role = cell.getAttribute('role');\n        if (cell instanceof Element === false || [ 'TD', 'TH' ].indexOf(cell.nodeName.toUpperCase()) === -1) {\n          throw new TypeError('Expected TD or TH element');\n        }\n        if (role === 'columnheader') {\n          return 'col';\n        } else if (role === 'rowheader') {\n          return 'row';\n        } else if (scope === 'col' || scope === 'row') {\n          return scope;\n        } else if (cell.nodeName.toUpperCase() !== 'TH') {\n          return false;\n        }\n        var tableGrid = table.toGrid(dom.findUp(cell, 'table'));\n        var pos = table.getCellPosition(cell, tableGrid);\n        var headerRow = tableGrid[pos.y].reduce(function(headerRow, cell) {\n          return headerRow && cell.nodeName.toUpperCase() === 'TH';\n        }, true);\n        if (headerRow) {\n          return 'col';\n        }\n        var headerCol = tableGrid.map(function(col) {\n          return col[pos.x];\n        }).reduce(function(headerCol, cell) {\n          return headerCol && cell && cell.nodeName.toUpperCase() === 'TH';\n        }, true);\n        if (headerCol) {\n          return 'row';\n        }\n        return 'auto';\n      };\n      table.isColumnHeader = function(element) {\n        return [ 'col', 'auto' ].indexOf(table.getScope(element)) !== -1;\n      };\n      table.isDataCell = function(cell) {\n        if (!cell.children.length && !cell.textContent.trim()) {\n          return false;\n        }\n        var role = cell.getAttribute('role');\n        if (axe.commons.aria.isValidRole(role)) {\n          return [ 'cell', 'gridcell' ].includes(role);\n        } else {\n          return cell.nodeName.toUpperCase() === 'TD';\n        }\n      };\n      table.isDataTable = function(node) {\n        var role = (node.getAttribute('role') || '').toLowerCase();\n        if ((role === 'presentation' || role === 'none') && !dom.isFocusable(node)) {\n          return false;\n        }\n        if (node.getAttribute('contenteditable') === 'true' || dom.findUp(node, '[contenteditable=\"true\"]')) {\n          return true;\n        }\n        if (role === 'grid' || role === 'treegrid' || role === 'table') {\n          return true;\n        }\n        if (commons.aria.getRoleType(role) === 'landmark') {\n          return true;\n        }\n        if (node.getAttribute('datatable') === '0') {\n          return false;\n        }\n        if (node.getAttribute('summary')) {\n          return true;\n        }\n        if (node.tHead || node.tFoot || node.caption) {\n          return true;\n        }\n        for (var childIndex = 0, childLength = node.children.length; childIndex < childLength; childIndex++) {\n          if (node.children[childIndex].nodeName.toUpperCase() === 'COLGROUP') {\n            return true;\n          }\n        }\n        var cells = 0;\n        var rowLength = node.rows.length;\n        var row, cell;\n        var hasBorder = false;\n        for (var rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH') {\n              return true;\n            }\n            if (!hasBorder && (cell.offsetWidth !== cell.clientWidth || cell.offsetHeight !== cell.clientHeight)) {\n              hasBorder = true;\n            }\n            if (cell.getAttribute('scope') || cell.getAttribute('headers') || cell.getAttribute('abbr')) {\n              return true;\n            }\n            if ([ 'columnheader', 'rowheader' ].includes((cell.getAttribute('role') || '').toLowerCase())) {\n              return true;\n            }\n            if (cell.children.length === 1 && cell.children[0].nodeName.toUpperCase() === 'ABBR') {\n              return true;\n            }\n            cells++;\n          }\n        }\n        if (node.getElementsByTagName('table').length) {\n          return false;\n        }\n        if (rowLength < 2) {\n          return false;\n        }\n        var sampleRow = node.rows[Math.ceil(rowLength / 2)];\n        if (sampleRow.cells.length === 1 && sampleRow.cells[0].colSpan === 1) {\n          return false;\n        }\n        if (sampleRow.cells.length >= 5) {\n          return true;\n        }\n        if (hasBorder) {\n          return true;\n        }\n        var bgColor, bgImage;\n        for (rowIndex = 0; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          if (bgColor && bgColor !== window.getComputedStyle(row).getPropertyValue('background-color')) {\n            return true;\n          } else {\n            bgColor = window.getComputedStyle(row).getPropertyValue('background-color');\n          }\n          if (bgImage && bgImage !== window.getComputedStyle(row).getPropertyValue('background-image')) {\n            return true;\n          } else {\n            bgImage = window.getComputedStyle(row).getPropertyValue('background-image');\n          }\n        }\n        if (rowLength >= 20) {\n          return true;\n        }\n        if (dom.getElementCoordinates(node).width > dom.getViewportSize(window).width * .95) {\n          return false;\n        }\n        if (cells < 10) {\n          return false;\n        }\n        if (node.querySelector('object, embed, iframe, applet')) {\n          return false;\n        }\n        return true;\n      };\n      table.isHeader = function(cell) {\n        if (table.isColumnHeader(cell) || table.isRowHeader(cell)) {\n          return true;\n        }\n        if (cell.getAttribute('id')) {\n          var id = axe.utils.escapeSelector(cell.getAttribute('id'));\n          return !!document.querySelector('[headers~=\"'.concat(id, '\"]'));\n        }\n        return false;\n      };\n      table.isRowHeader = function(cell) {\n        return [ 'row', 'auto' ].includes(table.getScope(cell));\n      };\n      table.toGrid = axe.utils.memoize(function(node) {\n        var table = [];\n        var rows = node.rows;\n        for (var i = 0, rowLength = rows.length; i < rowLength; i++) {\n          var cells = rows[i].cells;\n          table[i] = table[i] || [];\n          var columnIndex = 0;\n          for (var j = 0, cellLength = cells.length; j < cellLength; j++) {\n            for (var colSpan = 0; colSpan < cells[j].colSpan; colSpan++) {\n              for (var rowSpan = 0; rowSpan < cells[j].rowSpan; rowSpan++) {\n                table[i + rowSpan] = table[i + rowSpan] || [];\n                while (table[i + rowSpan][columnIndex]) {\n                  columnIndex++;\n                }\n                table[i + rowSpan][columnIndex] = cells[j];\n              }\n              columnIndex++;\n            }\n          }\n        }\n        return table;\n      });\n      table.toArray = table.toGrid;\n      (function(table) {\n        var traverseTable = function traverseTable(dir, position, tableGrid, callback) {\n          var result;\n          var cell = tableGrid[position.y] ? tableGrid[position.y][position.x] : undefined;\n          if (!cell) {\n            return [];\n          }\n          if (typeof callback === 'function') {\n            result = callback(cell, position, tableGrid);\n            if (result === true) {\n              return [ cell ];\n            }\n          }\n          result = traverseTable(dir, {\n            x: position.x + dir.x,\n            y: position.y + dir.y\n          }, tableGrid, callback);\n          result.unshift(cell);\n          return result;\n        };\n        table.traverse = function(dir, startPos, tableGrid, callback) {\n          if (Array.isArray(startPos)) {\n            callback = tableGrid;\n            tableGrid = startPos;\n            startPos = {\n              x: 0,\n              y: 0\n            };\n          }\n          if (typeof dir === 'string') {\n            switch (dir) {\n             case 'left':\n              dir = {\n                x: -1,\n                y: 0\n              };\n              break;\n\n             case 'up':\n              dir = {\n                x: 0,\n                y: -1\n              };\n              break;\n\n             case 'right':\n              dir = {\n                x: 1,\n                y: 0\n              };\n              break;\n\n             case 'down':\n              dir = {\n                x: 0,\n                y: 1\n              };\n              break;\n            }\n          }\n          return traverseTable(dir, {\n            x: startPos.x + dir.x,\n            y: startPos.y + dir.y\n          }, tableGrid, callback);\n        };\n      })(table);\n      text.accessibleText = function accessibleText(element, context) {\n        var virtualNode = axe.utils.getNodeFromTree(element);\n        return text.accessibleTextVirtual(virtualNode, context);\n      };\n      text.accessibleTextVirtual = function accessibleTextVirtual(virtualNode) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actualNode = virtualNode.actualNode;\n        context = prepareContext(virtualNode, context);\n        if (shouldIgnoreHidden(virtualNode, context)) {\n          return '';\n        }\n        var computationSteps = [ aria.arialabelledbyText, aria.arialabelText, text.nativeTextAlternative, text.formControlValue, text.subtreeText, textNodeContent, text.titleText ];\n        var accName = computationSteps.reduce(function(accName, step) {\n          if (context.startNode === virtualNode) {\n            accName = text.sanitize(accName);\n          }\n          if (accName !== '') {\n            return accName;\n          }\n          return step(virtualNode, context);\n        }, '');\n        if (context.debug) {\n          axe.log(accName || '{empty-value}', actualNode, context);\n        }\n        return accName;\n      };\n      function textNodeContent(_ref42) {\n        var actualNode = _ref42.actualNode;\n        if (actualNode.nodeType !== 3) {\n          return '';\n        }\n        return actualNode.textContent;\n      }\n      function shouldIgnoreHidden(_ref43, context) {\n        var actualNode = _ref43.actualNode;\n        if (actualNode.nodeType !== 1 || context.includeHidden) {\n          return false;\n        }\n        return !dom.isVisible(actualNode, true);\n      }\n      function prepareContext(virtualNode, context) {\n        var actualNode = virtualNode.actualNode;\n        if (!context.startNode) {\n          context = _extends({\n            startNode: virtualNode\n          }, context);\n        }\n        if (actualNode.nodeType === 1 && context.inLabelledByContext && context.includeHidden === undefined) {\n          context = _extends({\n            includeHidden: !dom.isVisible(actualNode, true)\n          }, context);\n        }\n        return context;\n      }\n      text.accessibleTextVirtual.alreadyProcessed = function alreadyProcessed(virtualnode, context) {\n        context.processed = context.processed || [];\n        if (context.processed.includes(virtualnode)) {\n          return true;\n        }\n        context.processed.push(virtualnode);\n        return false;\n      };\n      var controlValueRoles = [ 'textbox', 'progressbar', 'scrollbar', 'slider', 'spinbutton', 'combobox', 'listbox' ];\n      text.formControlValueMethods = {\n        nativeTextboxValue: nativeTextboxValue,\n        nativeSelectValue: nativeSelectValue,\n        ariaTextboxValue: ariaTextboxValue,\n        ariaListboxValue: ariaListboxValue,\n        ariaComboboxValue: ariaComboboxValue,\n        ariaRangeValue: ariaRangeValue\n      };\n      text.formControlValue = function formControlValue(virtualNode) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actualNode = virtualNode.actualNode;\n        var unsupported = text.unsupported.accessibleNameFromFieldValue || [];\n        var role = aria.getRole(actualNode);\n        if (context.startNode === virtualNode || !controlValueRoles.includes(role) || unsupported.includes(role)) {\n          return '';\n        }\n        var valueMethods = Object.keys(text.formControlValueMethods).map(function(name) {\n          return text.formControlValueMethods[name];\n        });\n        var valueString = valueMethods.reduce(function(accName, step) {\n          return accName || step(virtualNode, context);\n        }, '');\n        if (context.debug) {\n          axe.log(valueString || '{empty-value}', actualNode, context);\n        }\n        return valueString;\n      };\n      function nativeTextboxValue(node) {\n        node = node.actualNode || node;\n        if (axe.commons.forms.isNativeTextbox(node)) {\n          return node.value || '';\n        }\n        return '';\n      }\n      function nativeSelectValue(node) {\n        node = node.actualNode || node;\n        if (!axe.commons.forms.isNativeSelect(node)) {\n          return '';\n        }\n        return Array.from(node.options).filter(function(option) {\n          return option.selected;\n        }).map(function(option) {\n          return option.text;\n        }).join(' ') || '';\n      }\n      function ariaTextboxValue(virtualNode) {\n        var actualNode = virtualNode.actualNode;\n        if (!axe.commons.forms.isAriaTextbox(actualNode)) {\n          return '';\n        }\n        if (!dom.isHiddenWithCSS(actualNode)) {\n          return text.visibleVirtual(virtualNode, true);\n        } else {\n          return actualNode.textContent;\n        }\n      }\n      function ariaListboxValue(virtualNode, context) {\n        var actualNode = virtualNode.actualNode;\n        if (!axe.commons.forms.isAriaListbox(actualNode)) {\n          return '';\n        }\n        var selected = aria.getOwnedVirtual(virtualNode).filter(function(owned) {\n          return aria.getRole(owned) === 'option' && owned.actualNode.getAttribute('aria-selected') === 'true';\n        });\n        if (selected.length === 0) {\n          return '';\n        }\n        return axe.commons.text.accessibleTextVirtual(selected[0], context);\n      }\n      function ariaComboboxValue(virtualNode, context) {\n        var actualNode = virtualNode.actualNode;\n        var listbox;\n        if (!axe.commons.forms.isAriaCombobox(actualNode)) {\n          return '';\n        }\n        listbox = aria.getOwnedVirtual(virtualNode).filter(function(elm) {\n          return aria.getRole(elm) === 'listbox';\n        })[0];\n        return listbox ? text.formControlValueMethods.ariaListboxValue(listbox, context) : '';\n      }\n      function ariaRangeValue(node) {\n        node = node.actualNode || node;\n        if (!axe.commons.forms.isAriaRange(node) || !node.hasAttribute('aria-valuenow')) {\n          return '';\n        }\n        var valueNow = +node.getAttribute('aria-valuenow');\n        return !isNaN(valueNow) ? String(valueNow) : '0';\n      }\n      text.isHumanInterpretable = function(str) {\n        if (!str.length) {\n          return 0;\n        }\n        var alphaNumericIconMap = [ 'x', 'i' ];\n        if (alphaNumericIconMap.includes(str)) {\n          return 0;\n        }\n        var noUnicodeStr = text.removeUnicode(str, {\n          emoji: true,\n          nonBmp: true,\n          punctuations: true\n        });\n        if (!text.sanitize(noUnicodeStr)) {\n          return 0;\n        }\n        return 1;\n      };\n      text.isIconLigature = function(textVNode) {\n        var differenceThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : .15;\n        var occuranceThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n        var nodeValue = textVNode.actualNode.nodeValue.trim();\n        if (!text.sanitize(nodeValue) || text.hasUnicode(nodeValue, {\n          emoji: true,\n          nonBmp: true\n        })) {\n          return false;\n        }\n        if (!axe._cache.get('canvasContext')) {\n          axe._cache.set('canvasContext', document.createElement('canvas').getContext('2d'));\n        }\n        var canvasContext = axe._cache.get('canvasContext');\n        var canvas = canvasContext.canvas;\n        if (!axe._cache.get('fonts')) {\n          axe._cache.set('fonts', {});\n        }\n        var fonts = axe._cache.get('fonts');\n        var style = window.getComputedStyle(textVNode.parent.actualNode);\n        var fontFamily = style.getPropertyValue('font-family');\n        if (!fonts[fontFamily]) {\n          fonts[fontFamily] = {\n            occurances: 0,\n            numLigatures: 0\n          };\n        }\n        var font = fonts[fontFamily];\n        if (font.occurances >= occuranceThreshold) {\n          if (font.numLigatures / font.occurances === 1) {\n            return true;\n          } else if (font.numLigatures === 0) {\n            return false;\n          }\n        }\n        font.occurances++;\n        var fontSize = 30;\n        var fontStyle = ''.concat(fontSize, 'px ').concat(fontFamily);\n        canvasContext.font = fontStyle;\n        var firstChar = nodeValue.charAt(0);\n        var width = canvasContext.measureText(firstChar).width;\n        if (width < 30) {\n          var diff = 30 / width;\n          width *= diff;\n          fontSize *= diff;\n          fontStyle = ''.concat(fontSize, 'px ').concat(fontFamily);\n        }\n        canvas.width = width;\n        canvas.height = fontSize;\n        canvasContext.font = fontStyle;\n        canvasContext.textAlign = 'left';\n        canvasContext.textBaseline = 'top';\n        canvasContext.fillText(firstChar, 0, 0);\n        var compareData = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);\n        if (!compareData.some(function(pixel) {\n          return pixel;\n        })) {\n          font.numLigatures++;\n          return true;\n        }\n        canvasContext.clearRect(0, 0, width, fontSize);\n        canvasContext.fillText(nodeValue, 0, 0);\n        var compareWith = new Uint32Array(canvasContext.getImageData(0, 0, width, fontSize).data.buffer);\n        var differences = compareData.reduce(function(diff, pixel, i) {\n          if (pixel === 0 && compareWith[i] === 0) {\n            return diff;\n          }\n          if (pixel !== 0 && compareWith[i] !== 0) {\n            return diff;\n          }\n          return ++diff;\n        }, 0);\n        var expectedWidth = nodeValue.split('').reduce(function(width, _char) {\n          return width + canvasContext.measureText(_char).width;\n        }, 0);\n        var actualWidth = canvasContext.measureText(nodeValue).width;\n        var pixelDifference = differences / compareData.length;\n        var sizeDifference = 1 - actualWidth / expectedWidth;\n        if (pixelDifference >= differenceThreshold && sizeDifference >= differenceThreshold) {\n          font.numLigatures++;\n          return true;\n        }\n        return false;\n      };\n      var autocomplete = {\n        stateTerms: [ 'on', 'off' ],\n        standaloneTerms: [ 'name', 'honorific-prefix', 'given-name', 'additional-name', 'family-name', 'honorific-suffix', 'nickname', 'username', 'new-password', 'current-password', 'organization-title', 'organization', 'street-address', 'address-line1', 'address-line2', 'address-line3', 'address-level4', 'address-level3', 'address-level2', 'address-level1', 'country', 'country-name', 'postal-code', 'cc-name', 'cc-given-name', 'cc-additional-name', 'cc-family-name', 'cc-number', 'cc-exp', 'cc-exp-month', 'cc-exp-year', 'cc-csc', 'cc-type', 'transaction-currency', 'transaction-amount', 'language', 'bday', 'bday-day', 'bday-month', 'bday-year', 'sex', 'url', 'photo' ],\n        qualifiers: [ 'home', 'work', 'mobile', 'fax', 'pager' ],\n        qualifiedTerms: [ 'tel', 'tel-country-code', 'tel-national', 'tel-area-code', 'tel-local', 'tel-local-prefix', 'tel-local-suffix', 'tel-extension', 'email', 'impp' ],\n        locations: [ 'billing', 'shipping' ]\n      };\n      text.autocomplete = autocomplete;\n      text.isValidAutocomplete = function isValidAutocomplete(autocomplete) {\n        var _ref44 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}, _ref44$looseTyped = _ref44.looseTyped, looseTyped = _ref44$looseTyped === void 0 ? false : _ref44$looseTyped, _ref44$stateTerms = _ref44.stateTerms, stateTerms = _ref44$stateTerms === void 0 ? [] : _ref44$stateTerms, _ref44$locations = _ref44.locations, locations = _ref44$locations === void 0 ? [] : _ref44$locations, _ref44$qualifiers = _ref44.qualifiers, qualifiers = _ref44$qualifiers === void 0 ? [] : _ref44$qualifiers, _ref44$standaloneTerm = _ref44.standaloneTerms, standaloneTerms = _ref44$standaloneTerm === void 0 ? [] : _ref44$standaloneTerm, _ref44$qualifiedTerms = _ref44.qualifiedTerms, qualifiedTerms = _ref44$qualifiedTerms === void 0 ? [] : _ref44$qualifiedTerms;\n        autocomplete = autocomplete.toLowerCase().trim();\n        stateTerms = stateTerms.concat(text.autocomplete.stateTerms);\n        if (stateTerms.includes(autocomplete) || autocomplete === '') {\n          return true;\n        }\n        qualifiers = qualifiers.concat(text.autocomplete.qualifiers);\n        locations = locations.concat(text.autocomplete.locations);\n        standaloneTerms = standaloneTerms.concat(text.autocomplete.standaloneTerms);\n        qualifiedTerms = qualifiedTerms.concat(text.autocomplete.qualifiedTerms);\n        var autocompleteTerms = autocomplete.split(/\\s+/g);\n        if (!looseTyped) {\n          if (autocompleteTerms[0].length > 8 && autocompleteTerms[0].substr(0, 8) === 'section-') {\n            autocompleteTerms.shift();\n          }\n          if (locations.includes(autocompleteTerms[0])) {\n            autocompleteTerms.shift();\n          }\n          if (qualifiers.includes(autocompleteTerms[0])) {\n            autocompleteTerms.shift();\n            standaloneTerms = [];\n          }\n          if (autocompleteTerms.length !== 1) {\n            return false;\n          }\n        }\n        var purposeTerm = autocompleteTerms[autocompleteTerms.length - 1];\n        return standaloneTerms.includes(purposeTerm) || qualifiedTerms.includes(purposeTerm);\n      };\n      text.labelText = function labelText(virtualNode) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var alreadyProcessed = text.accessibleTextVirtual.alreadyProcessed;\n        if (context.inControlContext || context.inLabelledByContext || alreadyProcessed(virtualNode, context)) {\n          return '';\n        }\n        if (!context.startNode) {\n          context.startNode = virtualNode;\n        }\n        var labelContext = _extends({\n          inControlContext: true\n        }, context);\n        var explicitLabels = getExplicitLabels(virtualNode);\n        var implicitLabel = dom.findUpVirtual(virtualNode, 'label');\n        var labels;\n        if (implicitLabel) {\n          labels = [].concat(_toConsumableArray(explicitLabels), [ implicitLabel ]);\n          labels.sort(axe.utils.nodeSorter);\n        } else {\n          labels = explicitLabels;\n        }\n        return labels.map(function(label) {\n          return text.accessibleText(label, labelContext);\n        }).filter(function(text) {\n          return text !== '';\n        }).join(' ');\n      };\n      function getExplicitLabels(_ref45) {\n        var actualNode = _ref45.actualNode;\n        if (!actualNode.id) {\n          return [];\n        }\n        return dom.findElmsInContext({\n          elm: 'label',\n          attr: 'for',\n          value: actualNode.id,\n          context: actualNode\n        });\n      }\n      text.labelVirtual = function(node) {\n        var ref, candidate, doc;\n        candidate = aria.labelVirtual(node);\n        if (candidate) {\n          return candidate;\n        }\n        if (node.actualNode.id) {\n          var id = axe.utils.escapeSelector(node.actualNode.getAttribute('id'));\n          doc = axe.commons.dom.getRootNode(node.actualNode);\n          ref = doc.querySelector('label[for=\"' + id + '\"]');\n          candidate = ref && text.visible(ref, true);\n          if (candidate) {\n            return candidate;\n          }\n        }\n        ref = dom.findUpVirtual(node, 'label');\n        candidate = ref && text.visible(ref, true);\n        if (candidate) {\n          return candidate;\n        }\n        return null;\n      };\n      text.label = function(node) {\n        node = axe.utils.getNodeFromTree(node);\n        return text.labelVirtual(node);\n      };\n      text.nativeElementType = [ {\n        matches: [ {\n          nodeName: 'textarea'\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: [ 'text', 'password', 'search', 'tel', 'email', 'url' ]\n          }\n        } ],\n        namingMethods: 'labelText'\n      }, {\n        matches: {\n          nodeName: 'input',\n          properties: {\n            type: [ 'button', 'submit', 'reset' ]\n          }\n        },\n        namingMethods: [ 'valueText', 'titleText', 'buttonDefaultText' ]\n      }, {\n        matches: {\n          nodeName: 'input',\n          properties: {\n            type: 'image'\n          }\n        },\n        namingMethods: [ 'altText', 'valueText', 'labelText', 'titleText', 'buttonDefaultText' ]\n      }, {\n        matches: 'button',\n        namingMethods: 'subtreeText'\n      }, {\n        matches: 'fieldset',\n        namingMethods: 'fieldsetLegendText'\n      }, {\n        matches: 'OUTPUT',\n        namingMethods: 'subtreeText'\n      }, {\n        matches: [ {\n          nodeName: 'select'\n        }, {\n          nodeName: 'input',\n          properties: {\n            type: /^(?!text|password|search|tel|email|url|button|submit|reset)/\n          }\n        } ],\n        namingMethods: 'labelText'\n      }, {\n        matches: 'summary',\n        namingMethods: 'subtreeText'\n      }, {\n        matches: 'figure',\n        namingMethods: [ 'figureText', 'titleText' ]\n      }, {\n        matches: 'img',\n        namingMethods: 'altText'\n      }, {\n        matches: 'table',\n        namingMethods: [ 'tableCaptionText', 'tableSummaryText' ]\n      }, {\n        matches: [ 'hr', 'br' ],\n        namingMethods: [ 'titleText', 'singleSpace' ]\n      } ];\n      text.nativeTextAlternative = function nativeTextAlternative(virtualNode) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var actualNode = virtualNode.actualNode;\n        if (actualNode.nodeType !== 1 || [ 'presentation', 'none' ].includes(aria.getRole(actualNode))) {\n          return '';\n        }\n        var textMethods = findTextMethods(virtualNode);\n        var accName = textMethods.reduce(function(accName, step) {\n          return accName || step(virtualNode, context);\n        }, '');\n        if (context.debug) {\n          axe.log(accName || '{empty-value}', actualNode, context);\n        }\n        return accName;\n      };\n      function findTextMethods(virtualNode) {\n        var nativeElementType = text.nativeElementType, nativeTextMethods = text.nativeTextMethods;\n        var nativeType = nativeElementType.find(function(_ref46) {\n          var matches = _ref46.matches;\n          return axe.commons.matches(virtualNode, matches);\n        });\n        var methods = nativeType ? [].concat(nativeType.namingMethods) : [];\n        return methods.map(function(methodName) {\n          return nativeTextMethods[methodName];\n        });\n      }\n      var defaultButtonValues = {\n        submit: 'Submit',\n        image: 'Submit',\n        reset: 'Reset',\n        button: ''\n      };\n      text.nativeTextMethods = {\n        valueText: function valueText(_ref47) {\n          var actualNode = _ref47.actualNode;\n          return actualNode.value || '';\n        },\n        buttonDefaultText: function buttonDefaultText(_ref48) {\n          var actualNode = _ref48.actualNode;\n          return defaultButtonValues[actualNode.type] || '';\n        },\n        tableCaptionText: descendantText.bind(null, 'caption'),\n        figureText: descendantText.bind(null, 'figcaption'),\n        fieldsetLegendText: descendantText.bind(null, 'legend'),\n        altText: attrText.bind(null, 'alt'),\n        tableSummaryText: attrText.bind(null, 'summary'),\n        titleText: function titleText(virtualNode, context) {\n          return text.titleText(virtualNode, context);\n        },\n        subtreeText: function subtreeText(virtualNode, context) {\n          return text.subtreeText(virtualNode, context);\n        },\n        labelText: function labelText(virtualNode, context) {\n          return text.labelText(virtualNode, context);\n        },\n        singleSpace: function singleSpace() {\n          return ' ';\n        }\n      };\n      function attrText(attr, _ref49) {\n        var actualNode = _ref49.actualNode;\n        return actualNode.getAttribute(attr) || '';\n      }\n      function descendantText(nodeName, _ref50, context) {\n        var actualNode = _ref50.actualNode;\n        nodeName = nodeName.toLowerCase();\n        var nodeNames = [ nodeName, actualNode.nodeName.toLowerCase() ].join(',');\n        var candidate = actualNode.querySelector(nodeNames);\n        if (!candidate || candidate.nodeName.toLowerCase() !== nodeName) {\n          return '';\n        }\n        return text.accessibleText(candidate, context);\n      }\n      text.sanitize = function(str) {\n        'use strict';\n        return str.replace(/\\r\\n/g, '\\n').replace(/\\u00A0/g, ' ').replace(/[\\s]{2,}/g, ' ').trim();\n      };\n      text.subtreeText = function subtreeText(virtualNode) {\n        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var alreadyProcessed = text.accessibleTextVirtual.alreadyProcessed;\n        context.startNode = context.startNode || virtualNode;\n        var strict = context.strict;\n        if (alreadyProcessed(virtualNode, context) || !aria.namedFromContents(virtualNode, {\n          strict: strict\n        })) {\n          return '';\n        }\n        return aria.getOwnedVirtual(virtualNode).reduce(function(contentText, child) {\n          return appendAccessibleText(contentText, child, context);\n        }, '');\n      };\n      var phrasingElements = [ 'A', 'EM', 'STRONG', 'SMALL', 'MARK', 'ABBR', 'DFN', 'I', 'B', 'S', 'U', 'CODE', 'VAR', 'SAMP', 'KBD', 'SUP', 'SUB', 'Q', 'CITE', 'SPAN', 'BDO', 'BDI', 'WBR', 'INS', 'DEL', 'MAP', 'AREA', 'NOSCRIPT', 'RUBY', 'BUTTON', 'LABEL', 'OUTPUT', 'DATALIST', 'KEYGEN', 'PROGRESS', 'COMMAND', 'CANVAS', 'TIME', 'METER', '#TEXT' ];\n      function appendAccessibleText(contentText, virtualNode, context) {\n        var nodeName = virtualNode.actualNode.nodeName.toUpperCase();\n        var contentTextAdd = text.accessibleTextVirtual(virtualNode, context);\n        if (!contentTextAdd) {\n          return contentText;\n        }\n        if (!phrasingElements.includes(nodeName)) {\n          if (contentTextAdd[0] !== ' ') {\n            contentTextAdd += ' ';\n          }\n          if (contentText && contentText[contentText.length - 1] !== ' ') {\n            contentTextAdd = ' ' + contentTextAdd;\n          }\n        }\n        return contentText + contentTextAdd;\n      }\n      var alwaysTitleElements = [ 'button', 'iframe', 'a[href]', {\n        nodeName: 'input',\n        properties: {\n          type: 'button'\n        }\n      } ];\n      text.titleText = function titleText(node) {\n        node = node.actualNode || node;\n        if (node.nodeType !== 1 || !node.hasAttribute('title')) {\n          return '';\n        }\n        if (!axe.commons.matches(node, alwaysTitleElements) && [ 'none', 'presentation' ].includes(aria.getRole(node))) {\n          return '';\n        }\n        return node.getAttribute('title');\n      };\n      text.hasUnicode = function hasUnicode(str, options) {\n        var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;\n        if (emoji) {\n          return axe.imports.emojiRegexText().test(str);\n        }\n        if (nonBmp) {\n          return getUnicodeNonBmpRegExp().test(str) || getSupplementaryPrivateUseRegExp().test(str);\n        }\n        if (punctuations) {\n          return getPunctuationRegExp().test(str);\n        }\n        return false;\n      };\n      text.removeUnicode = function removeUnicode(str, options) {\n        var emoji = options.emoji, nonBmp = options.nonBmp, punctuations = options.punctuations;\n        if (emoji) {\n          str = str.replace(axe.imports.emojiRegexText(), '');\n        }\n        if (nonBmp) {\n          str = str.replace(getUnicodeNonBmpRegExp(), '');\n          str = str.replace(getSupplementaryPrivateUseRegExp(), '');\n        }\n        if (punctuations) {\n          str = str.replace(getPunctuationRegExp(), '');\n        }\n        return str;\n      };\n      function getUnicodeNonBmpRegExp() {\n        return /[\\u1D00-\\u1D7F\\u1D80-\\u1DBF\\u1DC0-\\u1DFF\\u20A0-\\u20CF\\u20D0-\\u20FF\\u2100-\\u214F\\u2150-\\u218F\\u2190-\\u21FF\\u2200-\\u22FF\\u2300-\\u23FF\\u2400-\\u243F\\u2440-\\u245F\\u2460-\\u24FF\\u2500-\\u257F\\u2580-\\u259F\\u25A0-\\u25FF\\u2600-\\u26FF\\u2700-\\u27BF\\uE000-\\uF8FF]/g;\n      }\n      function getPunctuationRegExp() {\n        return /[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&\\xa3\\xa2\\xa5\\xa7\\u20ac()*+,\\-.\\/:;<=>?@\\[\\]^_`{|}~\\xb1]/g;\n      }\n      function getSupplementaryPrivateUseRegExp() {\n        return /[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]/g;\n      }\n      text.unsupported = {\n        accessibleNameFromFieldValue: [ 'combobox', 'listbox', 'progressbar' ]\n      };\n      text.visibleTextNodes = function(vNode) {\n        var parentVisible = axe.commons.dom.isVisible(vNode.actualNode);\n        var nodes = [];\n        vNode.children.forEach(function(child) {\n          if (child.actualNode.nodeType === 3) {\n            if (parentVisible) {\n              nodes.push(child);\n            }\n          } else {\n            nodes = nodes.concat(text.visibleTextNodes(child));\n          }\n        });\n        return nodes;\n      };\n      text.visibleVirtual = function(element, screenReader, noRecursing) {\n        var result = element.children.map(function(child) {\n          if (child.actualNode.nodeType === 3) {\n            var nodeValue = child.actualNode.nodeValue;\n            if (nodeValue && dom.isVisible(element.actualNode, screenReader)) {\n              return nodeValue;\n            }\n          } else if (!noRecursing) {\n            return text.visibleVirtual(child, screenReader);\n          }\n        }).join('');\n        return text.sanitize(result);\n      };\n      text.visible = function(element, screenReader, noRecursing) {\n        element = axe.utils.getNodeFromTree(element);\n        return text.visibleVirtual(element, screenReader, noRecursing);\n      };\n      return commons;\n    }()\n  });\n})(typeof window === 'object' ? window : this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-axe/node_modules/axe-core/axe.js\n");

/***/ }),

/***/ "./node_modules/requestidlecallback/index.js":
/*!***************************************************!*\
  !*** ./node_modules/requestidlecallback/index.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}(function(){\n\t'use strict';\n\tvar scheduleStart, throttleDelay, lazytimer, lazyraf;\n\tvar root = typeof window != 'undefined' ?\n\t\twindow :\n\t\ttypeof __webpack_require__.g != undefined ?\n\t\t\t__webpack_require__.g :\n\t\t\tthis || {};\n\tvar requestAnimationFrame = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;\n\tvar cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;\n\tvar tasks = [];\n\tvar runAttempts = 0;\n\tvar isRunning = false;\n\tvar remainingTime = 7;\n\tvar minThrottle = 35;\n\tvar throttle = 125;\n\tvar index = 0;\n\tvar taskStart = 0;\n\tvar tasklength = 0;\n\tvar IdleDeadline = {\n\t\tget didTimeout(){\n\t\t\treturn false;\n\t\t},\n\t\ttimeRemaining: function(){\n\t\t\tvar timeRemaining = remainingTime - (Date.now() - taskStart);\n\t\t\treturn timeRemaining < 0 ? 0 : timeRemaining;\n\t\t},\n\t};\n\tvar setInactive = debounce(function(){\n\t\tremainingTime = 22;\n\t\tthrottle = 66;\n\t\tminThrottle = 0;\n\t});\n\n\tfunction debounce(fn){\n\t\tvar id, timestamp;\n\t\tvar wait = 99;\n\t\tvar check = function(){\n\t\t\tvar last = (Date.now()) - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tid = setTimeout(check, wait - last);\n\t\t\t} else {\n\t\t\t\tid = null;\n\t\t\t\tfn();\n\t\t\t}\n\t\t};\n\t\treturn function(){\n\t\t\ttimestamp = Date.now();\n\t\t\tif(!id){\n\t\t\t\tid = setTimeout(check, wait);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction abortRunning(){\n\t\tif(isRunning){\n\t\t\tif(lazyraf){\n\t\t\t\tcancelRequestAnimationFrame(lazyraf);\n\t\t\t}\n\t\t\tif(lazytimer){\n\t\t\t\tclearTimeout(lazytimer);\n\t\t\t}\n\t\t\tisRunning = false;\n\t\t}\n\t}\n\n\tfunction onInputorMutation(){\n\t\tif(throttle != 125){\n\t\t\tremainingTime = 7;\n\t\t\tthrottle = 125;\n\t\t\tminThrottle = 35;\n\n\t\t\tif(isRunning) {\n\t\t\t\tabortRunning();\n\t\t\t\tscheduleLazy();\n\t\t\t}\n\t\t}\n\t\tsetInactive();\n\t}\n\n\tfunction scheduleAfterRaf() {\n\t\tlazyraf = null;\n\t\tlazytimer = setTimeout(runTasks, 0);\n\t}\n\n\tfunction scheduleRaf(){\n\t\tlazytimer = null;\n\t\trequestAnimationFrame(scheduleAfterRaf);\n\t}\n\n\tfunction scheduleLazy(){\n\n\t\tif(isRunning){return;}\n\t\tthrottleDelay = throttle - (Date.now() - taskStart);\n\n\t\tscheduleStart = Date.now();\n\n\t\tisRunning = true;\n\n\t\tif(minThrottle && throttleDelay < minThrottle){\n\t\t\tthrottleDelay = minThrottle;\n\t\t}\n\n\t\tif(throttleDelay > 9){\n\t\t\tlazytimer = setTimeout(scheduleRaf, throttleDelay);\n\t\t} else {\n\t\t\tthrottleDelay = 0;\n\t\t\tscheduleRaf();\n\t\t}\n\t}\n\n\tfunction runTasks(){\n\t\tvar task, i, len;\n\t\tvar timeThreshold = remainingTime > 9 ?\n\t\t\t9 :\n\t\t\t1\n\t\t;\n\n\t\ttaskStart = Date.now();\n\t\tisRunning = false;\n\n\t\tlazytimer = null;\n\n\t\tif(runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart){\n\t\t\tfor(i = 0, len = tasks.length; i < len && IdleDeadline.timeRemaining() > timeThreshold; i++){\n\t\t\t\ttask = tasks.shift();\n\t\t\t\ttasklength++;\n\t\t\t\tif(task){\n\t\t\t\t\ttask(IdleDeadline);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(tasks.length){\n\t\t\tscheduleLazy();\n\t\t} else {\n\t\t\trunAttempts = 0;\n\t\t}\n\t}\n\n\tfunction requestIdleCallbackShim(task){\n\t\tindex++;\n\t\ttasks.push(task);\n\t\tscheduleLazy();\n\t\treturn index;\n\t}\n\n\tfunction cancelIdleCallbackShim(id){\n\t\tvar index = id - 1 - tasklength;\n\t\tif(tasks[index]){\n\t\t\ttasks[index] = null;\n\t\t}\n\t}\n\n\tif(!root.requestIdleCallback || !root.cancelIdleCallback){\n\t\troot.requestIdleCallback = requestIdleCallbackShim;\n\t\troot.cancelIdleCallback = cancelIdleCallbackShim;\n\n\t\tif(root.document && document.addEventListener){\n\t\t\troot.addEventListener('scroll', onInputorMutation, true);\n\t\t\troot.addEventListener('resize', onInputorMutation);\n\n\t\t\tdocument.addEventListener('focus', onInputorMutation, true);\n\t\t\tdocument.addEventListener('mouseover', onInputorMutation, true);\n\t\t\t['click', 'keypress', 'touchstart', 'mousedown'].forEach(function(name){\n\t\t\t\tdocument.addEventListener(name, onInputorMutation, {capture: true, passive: true});\n\t\t\t});\n\n\t\t\tif(root.MutationObserver){\n\t\t\t\tnew MutationObserver( onInputorMutation ).observe( document.documentElement, {childList: true, subtree: true, attributes: true} );\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry{\n\t\t\troot.requestIdleCallback(function(){}, {timeout: 0});\n\t\t} catch(e){\n\t\t\t(function(rIC){\n\t\t\t\tvar timeRemainingProto, timeRemaining;\n\t\t\t\troot.requestIdleCallback = function(fn, timeout){\n\t\t\t\t\tif(timeout && typeof timeout.timeout == 'number'){\n\t\t\t\t\t\treturn rIC(fn, timeout.timeout);\n\t\t\t\t\t}\n\t\t\t\t\treturn rIC(fn);\n\t\t\t\t};\n\t\t\t\tif(root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)){\n\t\t\t\t\ttimeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, 'timeRemaining');\n\t\t\t\t\tif(!timeRemaining || !timeRemaining.configurable || !timeRemaining.get){return;}\n\t\t\t\t\tObject.defineProperty(timeRemainingProto, 'timeRemaining', {\n\t\t\t\t\t\tvalue:  function(){\n\t\t\t\t\t\t\treturn timeRemaining.get.call(this);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t})(root.requestIdleCallback)\n\t\t}\n\t}\n\n\treturn {\n\t\trequest: requestIdleCallbackShim,\n\t\tcancel: cancelIdleCallbackShim,\n\t};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVxdWVzdGlkbGVjYWxsYmFjay9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FndGFpbC8uL25vZGVfbW9kdWxlcy9yZXF1ZXN0aWRsZWNhbGxiYWNrL2luZGV4LmpzPzg3MTAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmlkbGVDYWxsYmFja1NoaW0gPSBmYWN0b3J5KCk7XG5cdH1cbn0oZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgc2NoZWR1bGVTdGFydCwgdGhyb3R0bGVEZWxheSwgbGF6eXRpbWVyLCBsYXp5cmFmO1xuXHR2YXIgcm9vdCA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgP1xuXHRcdHdpbmRvdyA6XG5cdFx0dHlwZW9mIGdsb2JhbCAhPSB1bmRlZmluZWQgP1xuXHRcdFx0Z2xvYmFsIDpcblx0XHRcdHRoaXMgfHwge307XG5cdHZhciByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByb290LmNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiByb290LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBzZXRUaW1lb3V0O1xuXHR2YXIgY2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcm9vdC5jYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgY2xlYXJUaW1lb3V0O1xuXHR2YXIgdGFza3MgPSBbXTtcblx0dmFyIHJ1bkF0dGVtcHRzID0gMDtcblx0dmFyIGlzUnVubmluZyA9IGZhbHNlO1xuXHR2YXIgcmVtYWluaW5nVGltZSA9IDc7XG5cdHZhciBtaW5UaHJvdHRsZSA9IDM1O1xuXHR2YXIgdGhyb3R0bGUgPSAxMjU7XG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciB0YXNrU3RhcnQgPSAwO1xuXHR2YXIgdGFza2xlbmd0aCA9IDA7XG5cdHZhciBJZGxlRGVhZGxpbmUgPSB7XG5cdFx0Z2V0IGRpZFRpbWVvdXQoKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgdGltZVJlbWFpbmluZyA9IHJlbWFpbmluZ1RpbWUgLSAoRGF0ZS5ub3coKSAtIHRhc2tTdGFydCk7XG5cdFx0XHRyZXR1cm4gdGltZVJlbWFpbmluZyA8IDAgPyAwIDogdGltZVJlbWFpbmluZztcblx0XHR9LFxuXHR9O1xuXHR2YXIgc2V0SW5hY3RpdmUgPSBkZWJvdW5jZShmdW5jdGlvbigpe1xuXHRcdHJlbWFpbmluZ1RpbWUgPSAyMjtcblx0XHR0aHJvdHRsZSA9IDY2O1xuXHRcdG1pblRocm90dGxlID0gMDtcblx0fSk7XG5cblx0ZnVuY3Rpb24gZGVib3VuY2UoZm4pe1xuXHRcdHZhciBpZCwgdGltZXN0YW1wO1xuXHRcdHZhciB3YWl0ID0gOTk7XG5cdFx0dmFyIGNoZWNrID0gZnVuY3Rpb24oKXtcblx0XHRcdHZhciBsYXN0ID0gKERhdGUubm93KCkpIC0gdGltZXN0YW1wO1xuXG5cdFx0XHRpZiAobGFzdCA8IHdhaXQpIHtcblx0XHRcdFx0aWQgPSBzZXRUaW1lb3V0KGNoZWNrLCB3YWl0IC0gbGFzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZCA9IG51bGw7XG5cdFx0XHRcdGZuKCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKXtcblx0XHRcdHRpbWVzdGFtcCA9IERhdGUubm93KCk7XG5cdFx0XHRpZighaWQpe1xuXHRcdFx0XHRpZCA9IHNldFRpbWVvdXQoY2hlY2ssIHdhaXQpO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhYm9ydFJ1bm5pbmcoKXtcblx0XHRpZihpc1J1bm5pbmcpe1xuXHRcdFx0aWYobGF6eXJhZil7XG5cdFx0XHRcdGNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZShsYXp5cmFmKTtcblx0XHRcdH1cblx0XHRcdGlmKGxhenl0aW1lcil7XG5cdFx0XHRcdGNsZWFyVGltZW91dChsYXp5dGltZXIpO1xuXHRcdFx0fVxuXHRcdFx0aXNSdW5uaW5nID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gb25JbnB1dG9yTXV0YXRpb24oKXtcblx0XHRpZih0aHJvdHRsZSAhPSAxMjUpe1xuXHRcdFx0cmVtYWluaW5nVGltZSA9IDc7XG5cdFx0XHR0aHJvdHRsZSA9IDEyNTtcblx0XHRcdG1pblRocm90dGxlID0gMzU7XG5cblx0XHRcdGlmKGlzUnVubmluZykge1xuXHRcdFx0XHRhYm9ydFJ1bm5pbmcoKTtcblx0XHRcdFx0c2NoZWR1bGVMYXp5KCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNldEluYWN0aXZlKCk7XG5cdH1cblxuXHRmdW5jdGlvbiBzY2hlZHVsZUFmdGVyUmFmKCkge1xuXHRcdGxhenlyYWYgPSBudWxsO1xuXHRcdGxhenl0aW1lciA9IHNldFRpbWVvdXQocnVuVGFza3MsIDApO1xuXHR9XG5cblx0ZnVuY3Rpb24gc2NoZWR1bGVSYWYoKXtcblx0XHRsYXp5dGltZXIgPSBudWxsO1xuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZShzY2hlZHVsZUFmdGVyUmFmKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNjaGVkdWxlTGF6eSgpe1xuXG5cdFx0aWYoaXNSdW5uaW5nKXtyZXR1cm47fVxuXHRcdHRocm90dGxlRGVsYXkgPSB0aHJvdHRsZSAtIChEYXRlLm5vdygpIC0gdGFza1N0YXJ0KTtcblxuXHRcdHNjaGVkdWxlU3RhcnQgPSBEYXRlLm5vdygpO1xuXG5cdFx0aXNSdW5uaW5nID0gdHJ1ZTtcblxuXHRcdGlmKG1pblRocm90dGxlICYmIHRocm90dGxlRGVsYXkgPCBtaW5UaHJvdHRsZSl7XG5cdFx0XHR0aHJvdHRsZURlbGF5ID0gbWluVGhyb3R0bGU7XG5cdFx0fVxuXG5cdFx0aWYodGhyb3R0bGVEZWxheSA+IDkpe1xuXHRcdFx0bGF6eXRpbWVyID0gc2V0VGltZW91dChzY2hlZHVsZVJhZiwgdGhyb3R0bGVEZWxheSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm90dGxlRGVsYXkgPSAwO1xuXHRcdFx0c2NoZWR1bGVSYWYoKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBydW5UYXNrcygpe1xuXHRcdHZhciB0YXNrLCBpLCBsZW47XG5cdFx0dmFyIHRpbWVUaHJlc2hvbGQgPSByZW1haW5pbmdUaW1lID4gOSA/XG5cdFx0XHQ5IDpcblx0XHRcdDFcblx0XHQ7XG5cblx0XHR0YXNrU3RhcnQgPSBEYXRlLm5vdygpO1xuXHRcdGlzUnVubmluZyA9IGZhbHNlO1xuXG5cdFx0bGF6eXRpbWVyID0gbnVsbDtcblxuXHRcdGlmKHJ1bkF0dGVtcHRzID4gMiB8fCB0YXNrU3RhcnQgLSB0aHJvdHRsZURlbGF5IC0gNTAgPCBzY2hlZHVsZVN0YXJ0KXtcblx0XHRcdGZvcihpID0gMCwgbGVuID0gdGFza3MubGVuZ3RoOyBpIDwgbGVuICYmIElkbGVEZWFkbGluZS50aW1lUmVtYWluaW5nKCkgPiB0aW1lVGhyZXNob2xkOyBpKyspe1xuXHRcdFx0XHR0YXNrID0gdGFza3Muc2hpZnQoKTtcblx0XHRcdFx0dGFza2xlbmd0aCsrO1xuXHRcdFx0XHRpZih0YXNrKXtcblx0XHRcdFx0XHR0YXNrKElkbGVEZWFkbGluZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZih0YXNrcy5sZW5ndGgpe1xuXHRcdFx0c2NoZWR1bGVMYXp5KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJ1bkF0dGVtcHRzID0gMDtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiByZXF1ZXN0SWRsZUNhbGxiYWNrU2hpbSh0YXNrKXtcblx0XHRpbmRleCsrO1xuXHRcdHRhc2tzLnB1c2godGFzayk7XG5cdFx0c2NoZWR1bGVMYXp5KCk7XG5cdFx0cmV0dXJuIGluZGV4O1xuXHR9XG5cblx0ZnVuY3Rpb24gY2FuY2VsSWRsZUNhbGxiYWNrU2hpbShpZCl7XG5cdFx0dmFyIGluZGV4ID0gaWQgLSAxIC0gdGFza2xlbmd0aDtcblx0XHRpZih0YXNrc1tpbmRleF0pe1xuXHRcdFx0dGFza3NbaW5kZXhdID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRpZighcm9vdC5yZXF1ZXN0SWRsZUNhbGxiYWNrIHx8ICFyb290LmNhbmNlbElkbGVDYWxsYmFjayl7XG5cdFx0cm9vdC5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gcmVxdWVzdElkbGVDYWxsYmFja1NoaW07XG5cdFx0cm9vdC5jYW5jZWxJZGxlQ2FsbGJhY2sgPSBjYW5jZWxJZGxlQ2FsbGJhY2tTaGltO1xuXG5cdFx0aWYocm9vdC5kb2N1bWVudCAmJiBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKXtcblx0XHRcdHJvb3QuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25JbnB1dG9yTXV0YXRpb24sIHRydWUpO1xuXHRcdFx0cm9vdC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbklucHV0b3JNdXRhdGlvbik7XG5cblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgb25JbnB1dG9yTXV0YXRpb24sIHRydWUpO1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgb25JbnB1dG9yTXV0YXRpb24sIHRydWUpO1xuXHRcdFx0WydjbGljaycsICdrZXlwcmVzcycsICd0b3VjaHN0YXJ0JywgJ21vdXNlZG93biddLmZvckVhY2goZnVuY3Rpb24obmFtZSl7XG5cdFx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgb25JbnB1dG9yTXV0YXRpb24sIHtjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiB0cnVlfSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYocm9vdC5NdXRhdGlvbk9ic2VydmVyKXtcblx0XHRcdFx0bmV3IE11dGF0aW9uT2JzZXJ2ZXIoIG9uSW5wdXRvck11dGF0aW9uICkub2JzZXJ2ZSggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlfSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR0cnl7XG5cdFx0XHRyb290LnJlcXVlc3RJZGxlQ2FsbGJhY2soZnVuY3Rpb24oKXt9LCB7dGltZW91dDogMH0pO1xuXHRcdH0gY2F0Y2goZSl7XG5cdFx0XHQoZnVuY3Rpb24ocklDKXtcblx0XHRcdFx0dmFyIHRpbWVSZW1haW5pbmdQcm90bywgdGltZVJlbWFpbmluZztcblx0XHRcdFx0cm9vdC5yZXF1ZXN0SWRsZUNhbGxiYWNrID0gZnVuY3Rpb24oZm4sIHRpbWVvdXQpe1xuXHRcdFx0XHRcdGlmKHRpbWVvdXQgJiYgdHlwZW9mIHRpbWVvdXQudGltZW91dCA9PSAnbnVtYmVyJyl7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcklDKGZuLCB0aW1lb3V0LnRpbWVvdXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcklDKGZuKTtcblx0XHRcdFx0fTtcblx0XHRcdFx0aWYocm9vdC5JZGxlQ2FsbGJhY2tEZWFkbGluZSAmJiAodGltZVJlbWFpbmluZ1Byb3RvID0gSWRsZUNhbGxiYWNrRGVhZGxpbmUucHJvdG90eXBlKSl7XG5cdFx0XHRcdFx0dGltZVJlbWFpbmluZyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGltZVJlbWFpbmluZ1Byb3RvLCAndGltZVJlbWFpbmluZycpO1xuXHRcdFx0XHRcdGlmKCF0aW1lUmVtYWluaW5nIHx8ICF0aW1lUmVtYWluaW5nLmNvbmZpZ3VyYWJsZSB8fCAhdGltZVJlbWFpbmluZy5nZXQpe3JldHVybjt9XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRpbWVSZW1haW5pbmdQcm90bywgJ3RpbWVSZW1haW5pbmcnLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aW1lUmVtYWluaW5nLmdldC5jYWxsKHRoaXMpO1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pKHJvb3QucmVxdWVzdElkbGVDYWxsYmFjaylcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJlcXVlc3Q6IHJlcXVlc3RJZGxlQ2FsbGJhY2tTaGltLFxuXHRcdGNhbmNlbDogY2FuY2VsSWRsZUNhbGxiYWNrU2hpbSxcblx0fTtcbn0pKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/requestidlecallback/index.js\n");

/***/ }),

/***/ "./client/src/components/Minimap/CollapseAll.tsx":
/*!*******************************************************!*\
  !*** ./client/src/components/Minimap/CollapseAll.tsx ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index-exposed.js\"));\nvar gettext_1 = __webpack_require__(/*! ../../utils/gettext */ \"./client/src/utils/gettext.ts\");\nvar Icon_1 = __importDefault(__webpack_require__(/*! ../Icon/Icon */ \"./client/src/components/Icon/Icon.tsx\"));\n/**\n * \"Collapse all\" button UI, without any collapsing logic.\n */\nvar CollapseAll = function (_a) {\n    var expanded = _a.expanded, floating = _a.floating, insideMinimap = _a.insideMinimap, onClick = _a.onClick;\n    return (react_1[\"default\"].createElement(\"button\", { type: \"button\", \"aria-expanded\": expanded, onClick: onClick, className: \"button button-small button-secondary w-minimap__collapse-all \".concat(floating ? 'w-minimap__collapse-all--floating' : '', \" \").concat(insideMinimap ? 'w-minimap__collapse-all--inside' : '') },\n        react_1[\"default\"].createElement(Icon_1[\"default\"], { name: expanded ? 'arrow-up-big' : 'arrow-down-big' }),\n        expanded ? (0, gettext_1.gettext)('Collapse all') : (0, gettext_1.gettext)('Expand all')));\n};\nexports[\"default\"] = CollapseAll;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvTWluaW1hcC9Db2xsYXBzZUFsbC50c3guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FndGFpbC8uL2NsaWVudC9zcmMvY29tcG9uZW50cy9NaW5pbWFwL0NvbGxhcHNlQWxsLnRzeD85MjQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgZ2V0dGV4dF8xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL2dldHRleHRcIik7XG52YXIgSWNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9JY29uL0ljb25cIikpO1xuLyoqXG4gKiBcIkNvbGxhcHNlIGFsbFwiIGJ1dHRvbiBVSSwgd2l0aG91dCBhbnkgY29sbGFwc2luZyBsb2dpYy5cbiAqL1xudmFyIENvbGxhcHNlQWxsID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGV4cGFuZGVkID0gX2EuZXhwYW5kZWQsIGZsb2F0aW5nID0gX2EuZmxvYXRpbmcsIGluc2lkZU1pbmltYXAgPSBfYS5pbnNpZGVNaW5pbWFwLCBvbkNsaWNrID0gX2Eub25DbGljaztcbiAgICByZXR1cm4gKHJlYWN0XzFbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBcImFyaWEtZXhwYW5kZWRcIjogZXhwYW5kZWQsIG9uQ2xpY2s6IG9uQ2xpY2ssIGNsYXNzTmFtZTogXCJidXR0b24gYnV0dG9uLXNtYWxsIGJ1dHRvbi1zZWNvbmRhcnkgdy1taW5pbWFwX19jb2xsYXBzZS1hbGwgXCIuY29uY2F0KGZsb2F0aW5nID8gJ3ctbWluaW1hcF9fY29sbGFwc2UtYWxsLS1mbG9hdGluZycgOiAnJywgXCIgXCIpLmNvbmNhdChpbnNpZGVNaW5pbWFwID8gJ3ctbWluaW1hcF9fY29sbGFwc2UtYWxsLS1pbnNpZGUnIDogJycpIH0sXG4gICAgICAgIHJlYWN0XzFbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoSWNvbl8xW1wiZGVmYXVsdFwiXSwgeyBuYW1lOiBleHBhbmRlZCA/ICdhcnJvdy11cC1iaWcnIDogJ2Fycm93LWRvd24tYmlnJyB9KSxcbiAgICAgICAgZXhwYW5kZWQgPyAoMCwgZ2V0dGV4dF8xLmdldHRleHQpKCdDb2xsYXBzZSBhbGwnKSA6ICgwLCBnZXR0ZXh0XzEuZ2V0dGV4dCkoJ0V4cGFuZCBhbGwnKSkpO1xufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQ29sbGFwc2VBbGw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/components/Minimap/CollapseAll.tsx\n");

/***/ }),

/***/ "./client/src/components/Minimap/Minimap.tsx":
/*!***************************************************!*\
  !*** ./client/src/components/Minimap/Minimap.tsx ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar react_1 = __importStar(__webpack_require__(/*! react */ \"./node_modules/react/index-exposed.js\"));\nvar debounce_1 = __webpack_require__(/*! ../../utils/debounce */ \"./client/src/utils/debounce.ts\");\nvar gettext_1 = __webpack_require__(/*! ../../utils/gettext */ \"./client/src/utils/gettext.ts\");\nvar Icon_1 = __importDefault(__webpack_require__(/*! ../Icon/Icon */ \"./client/src/components/Icon/Icon.tsx\"));\nvar CollapseAll_1 = __importDefault(__webpack_require__(/*! ./CollapseAll */ \"./client/src/components/Minimap/CollapseAll.tsx\"));\nvar MinimapItem_1 = __importDefault(__webpack_require__(/*! ./MinimapItem */ \"./client/src/components/Minimap/MinimapItem.tsx\"));\nvar observerOptions = {\n    root: null,\n    // Count an element as \"in\", accounting for the 50px slim header and 70px actions footer.\n    rootMargin: '-50px 0px -70px 0px',\n    // 10% visibility within the boxed viewport is enough.\n    threshold: 0.1\n};\nvar mapIntersections = function (acc, _a) {\n    var _b;\n    var target = _a.target, isIntersecting = _a.isIntersecting;\n    var href = \"#\".concat((_b = target.closest('[data-panel]')) === null || _b === void 0 ? void 0 : _b.id) || 0;\n    acc[href] = isIntersecting;\n    return acc;\n};\n/**\n * For cases where the minimap has more item than can fit in the viewport,\n * we need to keep its scroll position updated to follow page scrolling.\n */\nvar updateScrollPosition = function (list) {\n    var activeLinks = list.querySelectorAll('a[aria-current=\"true\"]');\n    // Don’t update the scroll position if there are no links, or all links are visible.\n    if (activeLinks.length === 0 || list.scrollHeight === list.clientHeight) {\n        return;\n    }\n    var firstActive = activeLinks[0];\n    var lastActive = activeLinks[activeLinks.length - 1];\n    var newScroll = list.scrollTop;\n    if (firstActive) {\n        if (firstActive.offsetTop < list.scrollTop) {\n            newScroll = firstActive.offsetTop;\n        }\n    }\n    if (lastActive) {\n        if (lastActive.offsetTop > list.scrollTop + list.offsetHeight) {\n            newScroll =\n                lastActive.offsetTop - list.offsetHeight + lastActive.offsetHeight;\n        }\n    }\n    // Scroll changes require mutating this property.\n    // eslint-disable-next-line no-param-reassign\n    list.scrollTop = newScroll;\n};\n/**\n * Minimap sidebar menu, with one internal link per section of the page.\n * The minimap has a lot of advanced behavior:\n * - It opens and closes based on hover, except if interacted with.\n * - It also opens and closes when clicking its toggle.\n * - It closes when clicking outside.\n * - It uses IntersectionObserver to display which menu items are currently \"visible\" on the page.\n */\nvar Minimap = function (_a) {\n    var container = _a.container, anchorsContainer = _a.anchorsContainer, links = _a.links, onUpdate = _a.onUpdate, toggleAllPanels = _a.toggleAllPanels;\n    var _b = __read((0, react_1.useState)(false), 2), expanded = _b[0], setExpanded = _b[1];\n    // Keep track of whether we should keep the minimap expanded (should auto-close on mouseout if not interacted with).\n    var _c = __read((0, react_1.useState)(false), 2), keepExpanded = _c[0], setKeepExpanded = _c[1];\n    // Collapse all yes/no state.\n    var _d = __read((0, react_1.useState)(true), 2), panelsExpanded = _d[0], setPanelsExpanded = _d[1];\n    var _e = __read((0, react_1.useState)({}), 2), intersections = _e[0], setIntersections = _e[1];\n    var observer = (0, react_1.useRef)(null);\n    var lastIntersections = (0, react_1.useRef)({});\n    var updateLinks = (0, react_1.useRef)(null);\n    var listRef = (0, react_1.useRef)(null);\n    // Keep track of all the different ways the minimap can be opened and closed.\n    var onMouseOver = function () {\n        if (window.matchMedia('(hover: hover)').matches) {\n            // Opening with hover should not keep the menu expanded.\n            setExpanded(true);\n        }\n    };\n    var onMouseOut = function () {\n        if (window.matchMedia('(hover: hover)').matches) {\n            if (!keepExpanded) {\n                setExpanded(false);\n                setKeepExpanded(false);\n            }\n        }\n    };\n    var onClickToggle = function () {\n        setExpanded(!expanded);\n        setKeepExpanded(!expanded);\n    };\n    var onClickLink = function (e) {\n        // Prevent navigating if the link is only partially shown.\n        if (!expanded) {\n            e.preventDefault();\n        }\n        setExpanded(true);\n        setKeepExpanded(true);\n    };\n    (0, react_1.useEffect)(function () {\n        var onClickOutside = function (e) {\n            if (container.contains(e.target)) {\n                return;\n            }\n            setExpanded(false);\n            setKeepExpanded(false);\n        };\n        document.addEventListener('click', onClickOutside, true);\n    }, []);\n    /**\n     * Performance-sensitive intersections calculations with a double debounce:\n     * - With the IntersectionObserver API, the browser decides how often to update us, compared to constant `scroll`.\n     * - We keep track of intersecting elements on every IntersectionObserver update,\n     * - but only update the links after updates have stopped for 100ms.\n     */\n    (0, react_1.useEffect)(function () {\n        var obsCallback = function (newEntries) {\n            lastIntersections.current = newEntries.reduce(mapIntersections, __assign({}, lastIntersections.current));\n            if (!updateLinks.current) {\n                updateLinks.current = (0, debounce_1.debounce)(function (newIntersections) {\n                    setIntersections(newIntersections);\n                    updateScrollPosition(listRef.current);\n                }, 100);\n            }\n            updateLinks.current(lastIntersections.current);\n            // Support for InlinePanel removals: when they stop intersecting, re-render the whole minimap.\n            newEntries.forEach(function (_a) {\n                var target = _a.target;\n                var deletedInlinePanel = target.closest('.deleted');\n                if (deletedInlinePanel) {\n                    onUpdate(container);\n                }\n            });\n        };\n        if (!observer.current) {\n            observer.current = new IntersectionObserver(obsCallback, observerOptions);\n        }\n        var obs = observer.current;\n        obs.disconnect();\n        links.forEach(function (_a) {\n            var panel = _a.panel, toggle = _a.toggle;\n            // Special-case for top-level InlinePanel and StreamField, where the\n            // link only shows as active if the anchor is in view.\n            var isTopLevelNested = panel.matches('.w-panel--nested') &&\n                panel.closest('[data-field]') === null;\n            obs.observe(isTopLevelNested ? toggle : panel);\n        });\n        return function () {\n            obs.disconnect();\n        };\n    }, [links, container]);\n    (0, react_1.useEffect)(function () {\n        // Reset the \"collapse all\" when switching tabs.\n        setPanelsExpanded(true);\n    }, [anchorsContainer, setPanelsExpanded]);\n    return (react_1[\"default\"].createElement(\"div\", null,\n        react_1[\"default\"].createElement(CollapseAll_1[\"default\"], { expanded: panelsExpanded, onClick: function () {\n                setPanelsExpanded(!panelsExpanded);\n                toggleAllPanels(!panelsExpanded);\n            }, floating: true, insideMinimap: expanded }),\n        react_1[\"default\"].createElement(\"div\", { className: \"w-minimap \".concat(expanded ? 'w-minimap--expanded' : ''), onMouseOver: onMouseOver, onMouseOut: onMouseOut },\n            react_1[\"default\"].createElement(\"div\", { className: \"w-minimap__header\" },\n                react_1[\"default\"].createElement(\"button\", { type: \"button\", \"aria-expanded\": expanded, onClick: onClickToggle, className: \"w-minimap__toggle\", \"aria-label\": (0, gettext_1.gettext)('Toggle side panel') },\n                    react_1[\"default\"].createElement(Icon_1[\"default\"], { name: \"expand-right\" }))),\n            react_1[\"default\"].createElement(\"ol\", { className: \"w-minimap__list\", ref: listRef }, links.map(function (link) { return (react_1[\"default\"].createElement(\"li\", { key: link.href },\n                react_1[\"default\"].createElement(MinimapItem_1[\"default\"], { item: link, intersects: intersections[link.href], expanded: expanded, onClick: onClickLink }))); })),\n            react_1[\"default\"].createElement(\"div\", { className: \"w-minimap__footer\" }))));\n};\nexports[\"default\"] = Minimap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./client/src/components/Minimap/Minimap.tsx\n");

/***/ }),

/***/ "./client/src/components/Minimap/MinimapItem.tsx":
/*!*******************************************************!*\
  !*** ./client/src/components/Minimap/MinimapItem.tsx ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index-exposed.js\"));\nvar gettext_1 = __webpack_require__(/*! ../../utils/gettext */ \"./client/src/utils/gettext.ts\");\nvar Icon_1 = __importDefault(__webpack_require__(/*! ../Icon/Icon */ \"./client/src/components/Icon/Icon.tsx\"));\nvar requiredMark = react_1[\"default\"].createElement(\"span\", { className: \"w-required-mark\" }, \"*\");\n/**\n * A single menu item inside the minimap, linking to a section of the page.\n */\nvar MinimapItem = function (_a) {\n    var item = _a.item, intersects = _a.intersects, expanded = _a.expanded, onClick = _a.onClick;\n    var href = item.href, label = item.label, icon = item.icon, required = item.required, errorCount = item.errorCount, level = item.level;\n    var hasError = errorCount > 0;\n    var errorsLabel = (0, gettext_1.ngettext)('%(num)s error', '%(num)s errors', errorCount).replace('%(num)s', \"\".concat(errorCount));\n    var text = label.length > 26 ? \"\".concat(label.substring(0, 26), \"\\u2026\") : label;\n    return (react_1[\"default\"].createElement(\"a\", { href: href, className: \"w-minimap-item w-minimap-item--\".concat(level, \" \").concat(intersects ? 'w-minimap-item--active' : '', \" \").concat(hasError ? 'w-minimap-item--error' : ''), onClick: onClick, \"aria-current\": intersects, \n        // Prevent interacting with the links when they are only partially shown.\n        tabIndex: expanded ? undefined : -1 },\n        hasError ? (react_1[\"default\"].createElement(\"div\", { className: \"w-minimap-item__errors\", \"aria-label\": errorsLabel }, errorCount)) : null,\n        react_1[\"default\"].createElement(Icon_1[\"default\"], { name: \"minus\", className: \"w-minimap-item__placeholder\" }),\n        level !== 'h1' && level !== 'h2' ? (react_1[\"default\"].createElement(Icon_1[\"default\"], { name: icon, className: \"w-minimap-item__icon\" })) : null,\n        react_1[\"default\"].createElement(\"span\", { className: \"w-minimap-item__label\" },\n            react_1[\"default\"].createElement(\"span\", { className: \"w-minimap-item__text\" }, text),\n            required ? requiredMark : null)));\n};\nexports[\"default\"] = MinimapItem;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvTWluaW1hcC9NaW5pbWFwSXRlbS50c3guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhZ3RhaWwvLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvTWluaW1hcC9NaW5pbWFwSXRlbS50c3g/M2MyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgcmVhY3RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIGdldHRleHRfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy9nZXR0ZXh0XCIpO1xudmFyIEljb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vSWNvbi9JY29uXCIpKTtcbnZhciByZXF1aXJlZE1hcmsgPSByZWFjdF8xW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ3LXJlcXVpcmVkLW1hcmtcIiB9LCBcIipcIik7XG4vKipcbiAqIEEgc2luZ2xlIG1lbnUgaXRlbSBpbnNpZGUgdGhlIG1pbmltYXAsIGxpbmtpbmcgdG8gYSBzZWN0aW9uIG9mIHRoZSBwYWdlLlxuICovXG52YXIgTWluaW1hcEl0ZW0gPSBmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgaXRlbSA9IF9hLml0ZW0sIGludGVyc2VjdHMgPSBfYS5pbnRlcnNlY3RzLCBleHBhbmRlZCA9IF9hLmV4cGFuZGVkLCBvbkNsaWNrID0gX2Eub25DbGljaztcbiAgICB2YXIgaHJlZiA9IGl0ZW0uaHJlZiwgbGFiZWwgPSBpdGVtLmxhYmVsLCBpY29uID0gaXRlbS5pY29uLCByZXF1aXJlZCA9IGl0ZW0ucmVxdWlyZWQsIGVycm9yQ291bnQgPSBpdGVtLmVycm9yQ291bnQsIGxldmVsID0gaXRlbS5sZXZlbDtcbiAgICB2YXIgaGFzRXJyb3IgPSBlcnJvckNvdW50ID4gMDtcbiAgICB2YXIgZXJyb3JzTGFiZWwgPSAoMCwgZ2V0dGV4dF8xLm5nZXR0ZXh0KSgnJShudW0pcyBlcnJvcicsICclKG51bSlzIGVycm9ycycsIGVycm9yQ291bnQpLnJlcGxhY2UoJyUobnVtKXMnLCBcIlwiLmNvbmNhdChlcnJvckNvdW50KSk7XG4gICAgdmFyIHRleHQgPSBsYWJlbC5sZW5ndGggPiAyNiA/IFwiXCIuY29uY2F0KGxhYmVsLnN1YnN0cmluZygwLCAyNiksIFwiXFx1MjAyNlwiKSA6IGxhYmVsO1xuICAgIHJldHVybiAocmVhY3RfMVtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImFcIiwgeyBocmVmOiBocmVmLCBjbGFzc05hbWU6IFwidy1taW5pbWFwLWl0ZW0gdy1taW5pbWFwLWl0ZW0tLVwiLmNvbmNhdChsZXZlbCwgXCIgXCIpLmNvbmNhdChpbnRlcnNlY3RzID8gJ3ctbWluaW1hcC1pdGVtLS1hY3RpdmUnIDogJycsIFwiIFwiKS5jb25jYXQoaGFzRXJyb3IgPyAndy1taW5pbWFwLWl0ZW0tLWVycm9yJyA6ICcnKSwgb25DbGljazogb25DbGljaywgXCJhcmlhLWN1cnJlbnRcIjogaW50ZXJzZWN0cywgXG4gICAgICAgIC8vIFByZXZlbnQgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgbGlua3Mgd2hlbiB0aGV5IGFyZSBvbmx5IHBhcnRpYWxseSBzaG93bi5cbiAgICAgICAgdGFiSW5kZXg6IGV4cGFuZGVkID8gdW5kZWZpbmVkIDogLTEgfSxcbiAgICAgICAgaGFzRXJyb3IgPyAocmVhY3RfMVtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJ3LW1pbmltYXAtaXRlbV9fZXJyb3JzXCIsIFwiYXJpYS1sYWJlbFwiOiBlcnJvcnNMYWJlbCB9LCBlcnJvckNvdW50KSkgOiBudWxsLFxuICAgICAgICByZWFjdF8xW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KEljb25fMVtcImRlZmF1bHRcIl0sIHsgbmFtZTogXCJtaW51c1wiLCBjbGFzc05hbWU6IFwidy1taW5pbWFwLWl0ZW1fX3BsYWNlaG9sZGVyXCIgfSksXG4gICAgICAgIGxldmVsICE9PSAnaDEnICYmIGxldmVsICE9PSAnaDInID8gKHJlYWN0XzFbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoSWNvbl8xW1wiZGVmYXVsdFwiXSwgeyBuYW1lOiBpY29uLCBjbGFzc05hbWU6IFwidy1taW5pbWFwLWl0ZW1fX2ljb25cIiB9KSkgOiBudWxsLFxuICAgICAgICByZWFjdF8xW1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7IGNsYXNzTmFtZTogXCJ3LW1pbmltYXAtaXRlbV9fbGFiZWxcIiB9LFxuICAgICAgICAgICAgcmVhY3RfMVtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwidy1taW5pbWFwLWl0ZW1fX3RleHRcIiB9LCB0ZXh0KSxcbiAgICAgICAgICAgIHJlcXVpcmVkID8gcmVxdWlyZWRNYXJrIDogbnVsbCkpKTtcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IE1pbmltYXBJdGVtO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./client/src/components/Minimap/MinimapItem.tsx\n");

/***/ }),

/***/ "./client/src/components/Minimap/index.tsx":
/*!*************************************************!*\
  !*** ./client/src/components/Minimap/index.tsx ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.initMinimap = void 0;\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index-exposed.js\"));\nvar react_dom_1 = __importDefault(__webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index-exposed.js\"));\nvar panels_1 = __webpack_require__(/*! ../../includes/panels */ \"./client/src/includes/panels.ts\");\nvar debounce_1 = __webpack_require__(/*! ../../utils/debounce */ \"./client/src/utils/debounce.ts\");\nvar Minimap_1 = __importDefault(__webpack_require__(/*! ./Minimap */ \"./client/src/components/Minimap/Minimap.tsx\"));\n/**\n * Generate a minimap link’s data, based on the panel’s elements.\n */\nvar createMinimapLink = function (anchor) {\n    var _a, _b;\n    var panel = anchor.closest('[data-panel]');\n    var headingId = panel === null || panel === void 0 ? void 0 : panel.getAttribute('aria-labelledby');\n    var heading = panel === null || panel === void 0 ? void 0 : panel.querySelector(\"#\".concat(headingId));\n    var toggle = panel === null || panel === void 0 ? void 0 : panel.querySelector('[data-panel-toggle]');\n    // Special case for InlinePanel, where deleted items are kept until the form is saved.\n    var inlinePanelDeleted = anchor.closest('[data-inline-panel-child].deleted');\n    if (!panel || !heading || !toggle || inlinePanelDeleted) {\n        return null;\n    }\n    var headingText = heading.querySelector('[data-panel-heading-text]');\n    // If the heading’s most correct text content is unavailable (StreamField block collapsed when empty),\n    // fall back to the full heading text.\n    var label = (headingText === null || headingText === void 0 ? void 0 : headingText.textContent) ||\n        ((_a = heading.textContent) === null || _a === void 0 ? void 0 : _a.replace(/\\s+\\*\\s+$/g, '').trim());\n    var required = panel.querySelector('[data-panel-required]') !== null;\n    var useElt = toggle.querySelector('use');\n    var icon = ((_b = useElt === null || useElt === void 0 ? void 0 : useElt.getAttribute('href')) === null || _b === void 0 ? void 0 : _b.replace('#icon-', '')) || '';\n    var ariaLevel = heading.getAttribute('aria-level');\n    var headingLevel = \"h\".concat(ariaLevel || heading.tagName[1] || 2);\n    var errorCount = [].slice\n        .call(panel.querySelectorAll('.error-message'))\n        .filter(function (err) { return err.closest('[data-panel]') === panel; }).length;\n    return {\n        anchor: anchor,\n        toggle: toggle,\n        panel: panel,\n        icon: icon,\n        label: label || '',\n        // Use the attribute rather than property so we only have a hash.\n        href: anchor.getAttribute('href') || '',\n        required: required,\n        errorCount: errorCount,\n        level: headingLevel\n    };\n};\n/**\n * Render the minimap component within a given element.\n * Populates the minimap with the relevant links based on currently-visible collapsible panels.\n */\nvar renderMinimap = function (container) {\n    var anchorsContainer = document.body;\n    var tabs = document.querySelector('[data-tabs]');\n    // Render the minimap based on the active tab when there are tabs.\n    if (tabs) {\n        var activeTab = tabs.querySelector('[role=\"tab\"][aria-selected=\"true\"]');\n        var panelId = activeTab === null || activeTab === void 0 ? void 0 : activeTab.getAttribute('aria-controls');\n        var activeTabpanel = tabs.querySelector(\"#\".concat(panelId));\n        anchorsContainer = activeTabpanel || anchorsContainer;\n    }\n    var anchors = anchorsContainer.querySelectorAll('[data-panel-anchor]');\n    var links = [].slice\n        .call(anchors)\n        .map(createMinimapLink)\n        .filter(Boolean);\n    var toggleAllPanels = function (expanded) {\n        links.forEach(function (link, i) {\n            // Avoid collapsing the title field, where the collapse toggle is hidden.\n            var isTitle = i === 0 && link.href.includes('title');\n            if (!isTitle) {\n                (0, panels_1.toggleCollapsiblePanel)(link.toggle, expanded);\n            }\n        });\n    };\n    react_dom_1[\"default\"].render(react_1[\"default\"].createElement(Minimap_1[\"default\"], { container: container, anchorsContainer: anchorsContainer, links: links, onUpdate: renderMinimap, toggleAllPanels: toggleAllPanels }), container);\n};\n/**\n * Initialise the minimap within the target element,\n * making sure it re-renders when the visible content changes.\n */\nvar initMinimap = function (container) {\n    if (container === void 0) { container = document.querySelector('[data-minimap-container]'); }\n    if (!container) {\n        return;\n    }\n    var updateMinimap = (0, debounce_1.debounce)(renderMinimap.bind(null, container), 100);\n    document.addEventListener('wagtail:tab-changed', updateMinimap);\n    document.addEventListener('wagtail:panel-init', updateMinimap);\n    // Make sure the positioning of the minimap is always correct.\n    var setOffsetTop = function () {\n        return container.style.setProperty('--offset-top', \"\".concat(container.offsetTop, \"px\"));\n    };\n    var updateOffsetTop = (0, debounce_1.debounce)(setOffsetTop, 100);\n    document.addEventListener('resize', updateOffsetTop);\n    setOffsetTop();\n    updateMinimap(container);\n};\nexports.initMinimap = initMinimap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2NvbXBvbmVudHMvTWluaW1hcC9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWd0YWlsLy4vY2xpZW50L3NyYy9jb21wb25lbnRzL01pbmltYXAvaW5kZXgudHN4PzA4ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5pbml0TWluaW1hcCA9IHZvaWQgMDtcbnZhciByZWFjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgcmVhY3RfZG9tXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0LWRvbVwiKSk7XG52YXIgcGFuZWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW5jbHVkZXMvcGFuZWxzXCIpO1xudmFyIGRlYm91bmNlXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvZGVib3VuY2VcIik7XG52YXIgTWluaW1hcF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL01pbmltYXBcIikpO1xuLyoqXG4gKiBHZW5lcmF0ZSBhIG1pbmltYXAgbGlua+KAmXMgZGF0YSwgYmFzZWQgb24gdGhlIHBhbmVs4oCZcyBlbGVtZW50cy5cbiAqL1xudmFyIGNyZWF0ZU1pbmltYXBMaW5rID0gZnVuY3Rpb24gKGFuY2hvcikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHBhbmVsID0gYW5jaG9yLmNsb3Nlc3QoJ1tkYXRhLXBhbmVsXScpO1xuICAgIHZhciBoZWFkaW5nSWQgPSBwYW5lbCA9PT0gbnVsbCB8fCBwYW5lbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFuZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICB2YXIgaGVhZGluZyA9IHBhbmVsID09PSBudWxsIHx8IHBhbmVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYW5lbC5xdWVyeVNlbGVjdG9yKFwiI1wiLmNvbmNhdChoZWFkaW5nSWQpKTtcbiAgICB2YXIgdG9nZ2xlID0gcGFuZWwgPT09IG51bGwgfHwgcGFuZWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBhbmVsLXRvZ2dsZV0nKTtcbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIElubGluZVBhbmVsLCB3aGVyZSBkZWxldGVkIGl0ZW1zIGFyZSBrZXB0IHVudGlsIHRoZSBmb3JtIGlzIHNhdmVkLlxuICAgIHZhciBpbmxpbmVQYW5lbERlbGV0ZWQgPSBhbmNob3IuY2xvc2VzdCgnW2RhdGEtaW5saW5lLXBhbmVsLWNoaWxkXS5kZWxldGVkJyk7XG4gICAgaWYgKCFwYW5lbCB8fCAhaGVhZGluZyB8fCAhdG9nZ2xlIHx8IGlubGluZVBhbmVsRGVsZXRlZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGhlYWRpbmdUZXh0ID0gaGVhZGluZy5xdWVyeVNlbGVjdG9yKCdbZGF0YS1wYW5lbC1oZWFkaW5nLXRleHRdJyk7XG4gICAgLy8gSWYgdGhlIGhlYWRpbmfigJlzIG1vc3QgY29ycmVjdCB0ZXh0IGNvbnRlbnQgaXMgdW5hdmFpbGFibGUgKFN0cmVhbUZpZWxkIGJsb2NrIGNvbGxhcHNlZCB3aGVuIGVtcHR5KSxcbiAgICAvLyBmYWxsIGJhY2sgdG8gdGhlIGZ1bGwgaGVhZGluZyB0ZXh0LlxuICAgIHZhciBsYWJlbCA9IChoZWFkaW5nVGV4dCA9PT0gbnVsbCB8fCBoZWFkaW5nVGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaGVhZGluZ1RleHQudGV4dENvbnRlbnQpIHx8XG4gICAgICAgICgoX2EgPSBoZWFkaW5nLnRleHRDb250ZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucmVwbGFjZSgvXFxzK1xcKlxccyskL2csICcnKS50cmltKCkpO1xuICAgIHZhciByZXF1aXJlZCA9IHBhbmVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBhbmVsLXJlcXVpcmVkXScpICE9PSBudWxsO1xuICAgIHZhciB1c2VFbHQgPSB0b2dnbGUucXVlcnlTZWxlY3RvcigndXNlJyk7XG4gICAgdmFyIGljb24gPSAoKF9iID0gdXNlRWx0ID09PSBudWxsIHx8IHVzZUVsdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXNlRWx0LmdldEF0dHJpYnV0ZSgnaHJlZicpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVwbGFjZSgnI2ljb24tJywgJycpKSB8fCAnJztcbiAgICB2YXIgYXJpYUxldmVsID0gaGVhZGluZy5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGV2ZWwnKTtcbiAgICB2YXIgaGVhZGluZ0xldmVsID0gXCJoXCIuY29uY2F0KGFyaWFMZXZlbCB8fCBoZWFkaW5nLnRhZ05hbWVbMV0gfHwgMik7XG4gICAgdmFyIGVycm9yQ291bnQgPSBbXS5zbGljZVxuICAgICAgICAuY2FsbChwYW5lbC5xdWVyeVNlbGVjdG9yQWxsKCcuZXJyb3ItbWVzc2FnZScpKVxuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIGVyci5jbG9zZXN0KCdbZGF0YS1wYW5lbF0nKSA9PT0gcGFuZWw7IH0pLmxlbmd0aDtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbmNob3I6IGFuY2hvcixcbiAgICAgICAgdG9nZ2xlOiB0b2dnbGUsXG4gICAgICAgIHBhbmVsOiBwYW5lbCxcbiAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgbGFiZWw6IGxhYmVsIHx8ICcnLFxuICAgICAgICAvLyBVc2UgdGhlIGF0dHJpYnV0ZSByYXRoZXIgdGhhbiBwcm9wZXJ0eSBzbyB3ZSBvbmx5IGhhdmUgYSBoYXNoLlxuICAgICAgICBocmVmOiBhbmNob3IuZ2V0QXR0cmlidXRlKCdocmVmJykgfHwgJycsXG4gICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgICAgZXJyb3JDb3VudDogZXJyb3JDb3VudCxcbiAgICAgICAgbGV2ZWw6IGhlYWRpbmdMZXZlbFxuICAgIH07XG59O1xuLyoqXG4gKiBSZW5kZXIgdGhlIG1pbmltYXAgY29tcG9uZW50IHdpdGhpbiBhIGdpdmVuIGVsZW1lbnQuXG4gKiBQb3B1bGF0ZXMgdGhlIG1pbmltYXAgd2l0aCB0aGUgcmVsZXZhbnQgbGlua3MgYmFzZWQgb24gY3VycmVudGx5LXZpc2libGUgY29sbGFwc2libGUgcGFuZWxzLlxuICovXG52YXIgcmVuZGVyTWluaW1hcCA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgICB2YXIgYW5jaG9yc0NvbnRhaW5lciA9IGRvY3VtZW50LmJvZHk7XG4gICAgdmFyIHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10YWJzXScpO1xuICAgIC8vIFJlbmRlciB0aGUgbWluaW1hcCBiYXNlZCBvbiB0aGUgYWN0aXZlIHRhYiB3aGVuIHRoZXJlIGFyZSB0YWJzLlxuICAgIGlmICh0YWJzKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYWIgPSB0YWJzLnF1ZXJ5U2VsZWN0b3IoJ1tyb2xlPVwidGFiXCJdW2FyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCJdJyk7XG4gICAgICAgIHZhciBwYW5lbElkID0gYWN0aXZlVGFiID09PSBudWxsIHx8IGFjdGl2ZVRhYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWN0aXZlVGFiLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpO1xuICAgICAgICB2YXIgYWN0aXZlVGFicGFuZWwgPSB0YWJzLnF1ZXJ5U2VsZWN0b3IoXCIjXCIuY29uY2F0KHBhbmVsSWQpKTtcbiAgICAgICAgYW5jaG9yc0NvbnRhaW5lciA9IGFjdGl2ZVRhYnBhbmVsIHx8IGFuY2hvcnNDb250YWluZXI7XG4gICAgfVxuICAgIHZhciBhbmNob3JzID0gYW5jaG9yc0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1wYW5lbC1hbmNob3JdJyk7XG4gICAgdmFyIGxpbmtzID0gW10uc2xpY2VcbiAgICAgICAgLmNhbGwoYW5jaG9ycylcbiAgICAgICAgLm1hcChjcmVhdGVNaW5pbWFwTGluaylcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICB2YXIgdG9nZ2xlQWxsUGFuZWxzID0gZnVuY3Rpb24gKGV4cGFuZGVkKSB7XG4gICAgICAgIGxpbmtzLmZvckVhY2goZnVuY3Rpb24gKGxpbmssIGkpIHtcbiAgICAgICAgICAgIC8vIEF2b2lkIGNvbGxhcHNpbmcgdGhlIHRpdGxlIGZpZWxkLCB3aGVyZSB0aGUgY29sbGFwc2UgdG9nZ2xlIGlzIGhpZGRlbi5cbiAgICAgICAgICAgIHZhciBpc1RpdGxlID0gaSA9PT0gMCAmJiBsaW5rLmhyZWYuaW5jbHVkZXMoJ3RpdGxlJyk7XG4gICAgICAgICAgICBpZiAoIWlzVGl0bGUpIHtcbiAgICAgICAgICAgICAgICAoMCwgcGFuZWxzXzEudG9nZ2xlQ29sbGFwc2libGVQYW5lbCkobGluay50b2dnbGUsIGV4cGFuZGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZWFjdF9kb21fMVtcImRlZmF1bHRcIl0ucmVuZGVyKHJlYWN0XzFbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoTWluaW1hcF8xW1wiZGVmYXVsdFwiXSwgeyBjb250YWluZXI6IGNvbnRhaW5lciwgYW5jaG9yc0NvbnRhaW5lcjogYW5jaG9yc0NvbnRhaW5lciwgbGlua3M6IGxpbmtzLCBvblVwZGF0ZTogcmVuZGVyTWluaW1hcCwgdG9nZ2xlQWxsUGFuZWxzOiB0b2dnbGVBbGxQYW5lbHMgfSksIGNvbnRhaW5lcik7XG59O1xuLyoqXG4gKiBJbml0aWFsaXNlIHRoZSBtaW5pbWFwIHdpdGhpbiB0aGUgdGFyZ2V0IGVsZW1lbnQsXG4gKiBtYWtpbmcgc3VyZSBpdCByZS1yZW5kZXJzIHdoZW4gdGhlIHZpc2libGUgY29udGVudCBjaGFuZ2VzLlxuICovXG52YXIgaW5pdE1pbmltYXAgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gICAgaWYgKGNvbnRhaW5lciA9PT0gdm9pZCAwKSB7IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1pbmltYXAtY29udGFpbmVyXScpOyB9XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdXBkYXRlTWluaW1hcCA9ICgwLCBkZWJvdW5jZV8xLmRlYm91bmNlKShyZW5kZXJNaW5pbWFwLmJpbmQobnVsbCwgY29udGFpbmVyKSwgMTAwKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3YWd0YWlsOnRhYi1jaGFuZ2VkJywgdXBkYXRlTWluaW1hcCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignd2FndGFpbDpwYW5lbC1pbml0JywgdXBkYXRlTWluaW1hcCk7XG4gICAgLy8gTWFrZSBzdXJlIHRoZSBwb3NpdGlvbmluZyBvZiB0aGUgbWluaW1hcCBpcyBhbHdheXMgY29ycmVjdC5cbiAgICB2YXIgc2V0T2Zmc2V0VG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29udGFpbmVyLnN0eWxlLnNldFByb3BlcnR5KCctLW9mZnNldC10b3AnLCBcIlwiLmNvbmNhdChjb250YWluZXIub2Zmc2V0VG9wLCBcInB4XCIpKTtcbiAgICB9O1xuICAgIHZhciB1cGRhdGVPZmZzZXRUb3AgPSAoMCwgZGVib3VuY2VfMS5kZWJvdW5jZSkoc2V0T2Zmc2V0VG9wLCAxMDApO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHVwZGF0ZU9mZnNldFRvcCk7XG4gICAgc2V0T2Zmc2V0VG9wKCk7XG4gICAgdXBkYXRlTWluaW1hcChjb250YWluZXIpO1xufTtcbmV4cG9ydHMuaW5pdE1pbmltYXAgPSBpbml0TWluaW1hcDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./client/src/components/Minimap/index.tsx\n");

/***/ }),

/***/ "./client/src/entrypoints/admin/wagtailadmin.js":
/*!******************************************************!*\
  !*** ./client/src/entrypoints/admin/wagtailadmin.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar react_1 = __importDefault(__webpack_require__(/*! react */ \"./node_modules/react/index-exposed.js\"));\nvar react_dom_1 = __importDefault(__webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index-exposed.js\"));\nvar __1 = __webpack_require__(/*! ../.. */ \"./client/src/index.ts\");\nvar initTooltips_1 = __webpack_require__(/*! ../../includes/initTooltips */ \"./client/src/includes/initTooltips.ts\");\nvar tabs_1 = __webpack_require__(/*! ../../includes/tabs */ \"./client/src/includes/tabs.js\");\nvar dialog_1 = __webpack_require__(/*! ../../includes/dialog */ \"./client/src/includes/dialog.js\");\nvar breadcrumbs_1 = __importDefault(__webpack_require__(/*! ../../includes/breadcrumbs */ \"./client/src/includes/breadcrumbs.js\"));\nvar sidePanel_1 = __importDefault(__webpack_require__(/*! ../../includes/sidePanel */ \"./client/src/includes/sidePanel.js\"));\nvar panels_1 = __webpack_require__(/*! ../../includes/panels */ \"./client/src/includes/panels.ts\");\nvar Minimap_1 = __webpack_require__(/*! ../../components/Minimap */ \"./client/src/components/Minimap/index.tsx\");\nif (true) {\n    // Run react-axe in development only, so it does not affect performance\n    // in production, and does not break unit tests either.\n    // eslint-disable-next-line global-require, @typescript-eslint/no-var-requires, import/no-extraneous-dependencies\n    var axe = __webpack_require__(/*! react-axe */ \"./node_modules/react-axe/dist/index.js\");\n    axe(react_1[\"default\"], react_dom_1[\"default\"], 1000);\n}\n// Expose components as globals for third-party reuse.\nwindow.wagtail.components = {\n    Icon: __1.Icon,\n    Portal: __1.Portal\n};\n/**\n * Add in here code to run once the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', function () {\n    (0, __1.initUpgradeNotification)();\n    (0, initTooltips_1.initTooltips)();\n    (0, initTooltips_1.initModernDropdown)();\n    (0, tabs_1.initTabs)();\n    (0, __1.initDismissibles)();\n    (0, __1.initSkipLink)();\n    (0, dialog_1.dialog)();\n    (0, breadcrumbs_1[\"default\"])();\n    (0, sidePanel_1[\"default\"])();\n    (0, panels_1.initCollapsiblePanels)();\n});\n/**\n * Prefer the document’s DOMContentLoaded if possible.\n * window `load` only fires once the page’s resources are loaded.\n */\nwindow.addEventListener('load', function () {\n    (0, panels_1.initAnchoredPanels)();\n    (0, Minimap_1.initMinimap)();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2VudHJ5cG9pbnRzL2FkbWluL3dhZ3RhaWxhZG1pbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FndGFpbC8uL2NsaWVudC9zcmMvZW50cnlwb2ludHMvYWRtaW4vd2FndGFpbGFkbWluLmpzPzdiYTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciByZWFjdF9kb21fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3QtZG9tXCIpKTtcbnZhciBfXzEgPSByZXF1aXJlKFwiLi4vLi5cIik7XG52YXIgaW5pdFRvb2x0aXBzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW5jbHVkZXMvaW5pdFRvb2x0aXBzXCIpO1xudmFyIHRhYnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbmNsdWRlcy90YWJzXCIpO1xudmFyIGRpYWxvZ18xID0gcmVxdWlyZShcIi4uLy4uL2luY2x1ZGVzL2RpYWxvZ1wiKTtcbnZhciBicmVhZGNydW1ic18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9pbmNsdWRlcy9icmVhZGNydW1ic1wiKSk7XG52YXIgc2lkZVBhbmVsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2luY2x1ZGVzL3NpZGVQYW5lbFwiKSk7XG52YXIgcGFuZWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW5jbHVkZXMvcGFuZWxzXCIpO1xudmFyIE1pbmltYXBfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21wb25lbnRzL01pbmltYXBcIik7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAvLyBSdW4gcmVhY3QtYXhlIGluIGRldmVsb3BtZW50IG9ubHksIHNvIGl0IGRvZXMgbm90IGFmZmVjdCBwZXJmb3JtYW5jZVxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGFuZCBkb2VzIG5vdCBicmVhayB1bml0IHRlc3RzIGVpdGhlci5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmUsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXMsIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llc1xuICAgIHZhciBheGUgPSByZXF1aXJlKCdyZWFjdC1heGUnKTtcbiAgICBheGUocmVhY3RfMVtcImRlZmF1bHRcIl0sIHJlYWN0X2RvbV8xW1wiZGVmYXVsdFwiXSwgMTAwMCk7XG59XG4vLyBFeHBvc2UgY29tcG9uZW50cyBhcyBnbG9iYWxzIGZvciB0aGlyZC1wYXJ0eSByZXVzZS5cbndpbmRvdy53YWd0YWlsLmNvbXBvbmVudHMgPSB7XG4gICAgSWNvbjogX18xLkljb24sXG4gICAgUG9ydGFsOiBfXzEuUG9ydGFsXG59O1xuLyoqXG4gKiBBZGQgaW4gaGVyZSBjb2RlIHRvIHJ1biBvbmNlIHRoZSBwYWdlIGlzIGxvYWRlZC5cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAoMCwgX18xLmluaXRVcGdyYWRlTm90aWZpY2F0aW9uKSgpO1xuICAgICgwLCBpbml0VG9vbHRpcHNfMS5pbml0VG9vbHRpcHMpKCk7XG4gICAgKDAsIGluaXRUb29sdGlwc18xLmluaXRNb2Rlcm5Ecm9wZG93bikoKTtcbiAgICAoMCwgdGFic18xLmluaXRUYWJzKSgpO1xuICAgICgwLCBfXzEuaW5pdERpc21pc3NpYmxlcykoKTtcbiAgICAoMCwgX18xLmluaXRTa2lwTGluaykoKTtcbiAgICAoMCwgZGlhbG9nXzEuZGlhbG9nKSgpO1xuICAgICgwLCBicmVhZGNydW1ic18xW1wiZGVmYXVsdFwiXSkoKTtcbiAgICAoMCwgc2lkZVBhbmVsXzFbXCJkZWZhdWx0XCJdKSgpO1xuICAgICgwLCBwYW5lbHNfMS5pbml0Q29sbGFwc2libGVQYW5lbHMpKCk7XG59KTtcbi8qKlxuICogUHJlZmVyIHRoZSBkb2N1bWVudOKAmXMgRE9NQ29udGVudExvYWRlZCBpZiBwb3NzaWJsZS5cbiAqIHdpbmRvdyBgbG9hZGAgb25seSBmaXJlcyBvbmNlIHRoZSBwYWdl4oCZcyByZXNvdXJjZXMgYXJlIGxvYWRlZC5cbiAqL1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgKDAsIHBhbmVsc18xLmluaXRBbmNob3JlZFBhbmVscykoKTtcbiAgICAoMCwgTWluaW1hcF8xLmluaXRNaW5pbWFwKSgpO1xufSk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/entrypoints/admin/wagtailadmin.js\n");

/***/ }),

/***/ "./client/src/includes/breadcrumbs.js":
/*!********************************************!*\
  !*** ./client/src/includes/breadcrumbs.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.__esModule = true;\nfunction initCollapsibleBreadcrumbs() {\n    var breadcrumbsContainer = document.querySelector('[data-breadcrumb-next]');\n    if (!breadcrumbsContainer) {\n        return;\n    }\n    var header = breadcrumbsContainer.closest(breadcrumbsContainer.dataset.headerSelector || 'header');\n    if (!header)\n        return;\n    var breadcrumbsToggle = breadcrumbsContainer.querySelector('[data-toggle-breadcrumbs]');\n    if (!breadcrumbsToggle)\n        return;\n    var breadcrumbItems = breadcrumbsContainer.querySelectorAll('[data-breadcrumb-item]');\n    var cssClass = {\n        maxWidth: 'w-max-w-4xl'\n    };\n    // Local state\n    var open = false;\n    var mouseExitedToggle = true;\n    var keepOpen = false;\n    function hideBreadcrumbs() {\n        breadcrumbItems.forEach(function (breadcrumb) {\n            breadcrumb.classList.remove(cssClass.maxWidth);\n            // eslint-disable-next-line no-param-reassign\n            breadcrumb.hidden = true;\n        });\n        breadcrumbsToggle.setAttribute('aria-expanded', 'false');\n        // Change Icon to dots\n        breadcrumbsToggle\n            .querySelector('svg use')\n            .setAttribute('href', '#icon-breadcrumb-expand');\n        open = false;\n        keepOpen = false;\n        document.dispatchEvent(new CustomEvent('wagtail:breadcrumbs-collapse'));\n    }\n    function showBreadcrumbs() {\n        breadcrumbItems.forEach(function (breadcrumb) {\n            // eslint-disable-next-line no-param-reassign\n            breadcrumb.hidden = false;\n            breadcrumb.classList.add(cssClass.maxWidth);\n        });\n        breadcrumbsToggle.setAttribute('aria-expanded', 'true');\n        open = true;\n        document.dispatchEvent(new CustomEvent('wagtail:breadcrumbs-expand'));\n    }\n    breadcrumbsToggle.addEventListener('keydown', function (e) {\n        if (e.key === ' ' || e.key === 'Enter') {\n            e.preventDefault();\n            if (keepOpen || open) {\n                hideBreadcrumbs();\n            }\n            else {\n                showBreadcrumbs();\n                keepOpen = true;\n                // Change Icon to cross\n                breadcrumbsToggle\n                    .querySelector('svg use')\n                    .setAttribute('href', '#icon-cross');\n            }\n        }\n    });\n    // Events\n    breadcrumbsToggle.addEventListener('click', function () {\n        if (keepOpen) {\n            mouseExitedToggle = false;\n            hideBreadcrumbs();\n        }\n        if (open) {\n            mouseExitedToggle = false;\n            keepOpen = true;\n            // Change Icon to cross\n            breadcrumbsToggle\n                .querySelector('svg use')\n                .setAttribute('href', '#icon-cross');\n        }\n        else if (mouseExitedToggle) {\n            showBreadcrumbs();\n        }\n    });\n    breadcrumbsToggle.addEventListener('mouseenter', function () {\n        // If menu is open or the mouse hasn't exited button zone do nothing\n        if (open || !mouseExitedToggle) {\n            return;\n        }\n        open = true;\n        // Set mouse exited so mouseover doesn't restart until mouse leaves\n        mouseExitedToggle = false;\n        showBreadcrumbs();\n    });\n    breadcrumbsToggle.addEventListener('mouseleave', function () {\n        mouseExitedToggle = true;\n    });\n    header.addEventListener('mouseleave', function () {\n        if (!keepOpen) {\n            hideBreadcrumbs();\n        }\n    });\n    document.addEventListener('keydown', function (e) {\n        if (e.key === 'Escape') {\n            hideBreadcrumbs();\n        }\n    });\n}\nexports[\"default\"] = initCollapsibleBreadcrumbs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2luY2x1ZGVzL2JyZWFkY3J1bWJzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhZ3RhaWwvLi9jbGllbnQvc3JjL2luY2x1ZGVzL2JyZWFkY3J1bWJzLmpzP2IwNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gaW5pdENvbGxhcHNpYmxlQnJlYWRjcnVtYnMoKSB7XG4gICAgdmFyIGJyZWFkY3J1bWJzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtYnJlYWRjcnVtYi1uZXh0XScpO1xuICAgIGlmICghYnJlYWRjcnVtYnNDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaGVhZGVyID0gYnJlYWRjcnVtYnNDb250YWluZXIuY2xvc2VzdChicmVhZGNydW1ic0NvbnRhaW5lci5kYXRhc2V0LmhlYWRlclNlbGVjdG9yIHx8ICdoZWFkZXInKTtcbiAgICBpZiAoIWhlYWRlcilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBicmVhZGNydW1ic1RvZ2dsZSA9IGJyZWFkY3J1bWJzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXRvZ2dsZS1icmVhZGNydW1ic10nKTtcbiAgICBpZiAoIWJyZWFkY3J1bWJzVG9nZ2xlKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIGJyZWFkY3J1bWJJdGVtcyA9IGJyZWFkY3J1bWJzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJyZWFkY3J1bWItaXRlbV0nKTtcbiAgICB2YXIgY3NzQ2xhc3MgPSB7XG4gICAgICAgIG1heFdpZHRoOiAndy1tYXgtdy00eGwnXG4gICAgfTtcbiAgICAvLyBMb2NhbCBzdGF0ZVxuICAgIHZhciBvcGVuID0gZmFsc2U7XG4gICAgdmFyIG1vdXNlRXhpdGVkVG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIga2VlcE9wZW4gPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBoaWRlQnJlYWRjcnVtYnMoKSB7XG4gICAgICAgIGJyZWFkY3J1bWJJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChicmVhZGNydW1iKSB7XG4gICAgICAgICAgICBicmVhZGNydW1iLmNsYXNzTGlzdC5yZW1vdmUoY3NzQ2xhc3MubWF4V2lkdGgpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICBicmVhZGNydW1iLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhZGNydW1ic1RvZ2dsZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgLy8gQ2hhbmdlIEljb24gdG8gZG90c1xuICAgICAgICBicmVhZGNydW1ic1RvZ2dsZVxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ3N2ZyB1c2UnKVxuICAgICAgICAgICAgLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjaWNvbi1icmVhZGNydW1iLWV4cGFuZCcpO1xuICAgICAgICBvcGVuID0gZmFsc2U7XG4gICAgICAgIGtlZXBPcGVuID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCd3YWd0YWlsOmJyZWFkY3J1bWJzLWNvbGxhcHNlJykpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzaG93QnJlYWRjcnVtYnMoKSB7XG4gICAgICAgIGJyZWFkY3J1bWJJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChicmVhZGNydW1iKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICAgIGJyZWFkY3J1bWIuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhZGNydW1iLmNsYXNzTGlzdC5hZGQoY3NzQ2xhc3MubWF4V2lkdGgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWRjcnVtYnNUb2dnbGUuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgJ3RydWUnKTtcbiAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCd3YWd0YWlsOmJyZWFkY3J1bWJzLWV4cGFuZCcpKTtcbiAgICB9XG4gICAgYnJlYWRjcnVtYnNUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJyAnIHx8IGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZiAoa2VlcE9wZW4gfHwgb3Blbikge1xuICAgICAgICAgICAgICAgIGhpZGVCcmVhZGNydW1icygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2hvd0JyZWFkY3J1bWJzKCk7XG4gICAgICAgICAgICAgICAga2VlcE9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIC8vIENoYW5nZSBJY29uIHRvIGNyb3NzXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYnNUb2dnbGVcbiAgICAgICAgICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJ3N2ZyB1c2UnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0QXR0cmlidXRlKCdocmVmJywgJyNpY29uLWNyb3NzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBFdmVudHNcbiAgICBicmVhZGNydW1ic1RvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGtlZXBPcGVuKSB7XG4gICAgICAgICAgICBtb3VzZUV4aXRlZFRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICAgICAgaGlkZUJyZWFkY3J1bWJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgICAgIG1vdXNlRXhpdGVkVG9nZ2xlID0gZmFsc2U7XG4gICAgICAgICAgICBrZWVwT3BlbiA9IHRydWU7XG4gICAgICAgICAgICAvLyBDaGFuZ2UgSWNvbiB0byBjcm9zc1xuICAgICAgICAgICAgYnJlYWRjcnVtYnNUb2dnbGVcbiAgICAgICAgICAgICAgICAucXVlcnlTZWxlY3Rvcignc3ZnIHVzZScpXG4gICAgICAgICAgICAgICAgLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjaWNvbi1jcm9zcycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1vdXNlRXhpdGVkVG9nZ2xlKSB7XG4gICAgICAgICAgICBzaG93QnJlYWRjcnVtYnMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGJyZWFkY3J1bWJzVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIElmIG1lbnUgaXMgb3BlbiBvciB0aGUgbW91c2UgaGFzbid0IGV4aXRlZCBidXR0b24gem9uZSBkbyBub3RoaW5nXG4gICAgICAgIGlmIChvcGVuIHx8ICFtb3VzZUV4aXRlZFRvZ2dsZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9wZW4gPSB0cnVlO1xuICAgICAgICAvLyBTZXQgbW91c2UgZXhpdGVkIHNvIG1vdXNlb3ZlciBkb2Vzbid0IHJlc3RhcnQgdW50aWwgbW91c2UgbGVhdmVzXG4gICAgICAgIG1vdXNlRXhpdGVkVG9nZ2xlID0gZmFsc2U7XG4gICAgICAgIHNob3dCcmVhZGNydW1icygpO1xuICAgIH0pO1xuICAgIGJyZWFkY3J1bWJzVG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG1vdXNlRXhpdGVkVG9nZ2xlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBoZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFrZWVwT3Blbikge1xuICAgICAgICAgICAgaGlkZUJyZWFkY3J1bWJzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGUua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgaGlkZUJyZWFkY3J1bWJzKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaW5pdENvbGxhcHNpYmxlQnJlYWRjcnVtYnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/includes/breadcrumbs.js\n");

/***/ }),

/***/ "./client/src/includes/dialog.js":
/*!***************************************!*\
  !*** ./client/src/includes/dialog.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nexports.dialog = void 0;\nvar a11y_dialog_1 = __importDefault(__webpack_require__(/*! a11y-dialog */ \"./node_modules/a11y-dialog/dist/a11y-dialog.esm.js\"));\nvar dialog = function (dialogs) {\n    if (dialogs === void 0) { dialogs = document.querySelectorAll('[data-dialog]'); }\n    dialogs.forEach(function (template) {\n        var html = document.documentElement;\n        var templateContent = template.content.firstElementChild;\n        var dialogRootSelector = templateContent.dataset.dialogRootSelector;\n        var dialogRoot = (dialogRootSelector && document.querySelector(dialogRootSelector)) ||\n            document.body;\n        dialogRoot.appendChild(templateContent);\n        var dialogTemplate = new a11y_dialog_1[\"default\"](templateContent);\n        // Prevent scrolling when dialog is open\n        dialogTemplate\n            .on('show', function () {\n            html.style.overflowY = 'hidden';\n        })\n            .on('hide', function () {\n            html.style.overflowY = '';\n        });\n        // Attach event listeners to the dialog root (element with id), so it's\n        // possible to show/close the dialog somewhere else with no access to the\n        // A11yDialog instance.\n        templateContent.addEventListener('wagtail:show', function () {\n            return dialogTemplate.show();\n        });\n        templateContent.addEventListener('wagtail:hide', function () {\n            return dialogTemplate.hide();\n        });\n    });\n};\nexports.dialog = dialog;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2luY2x1ZGVzL2RpYWxvZy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhZ3RhaWwvLi9jbGllbnQvc3JjL2luY2x1ZGVzL2RpYWxvZy5qcz9lM2RlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGlhbG9nID0gdm9pZCAwO1xudmFyIGExMXlfZGlhbG9nXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImExMXktZGlhbG9nXCIpKTtcbnZhciBkaWFsb2cgPSBmdW5jdGlvbiAoZGlhbG9ncykge1xuICAgIGlmIChkaWFsb2dzID09PSB2b2lkIDApIHsgZGlhbG9ncyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWRpYWxvZ10nKTsgfVxuICAgIGRpYWxvZ3MuZm9yRWFjaChmdW5jdGlvbiAodGVtcGxhdGUpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciB0ZW1wbGF0ZUNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICB2YXIgZGlhbG9nUm9vdFNlbGVjdG9yID0gdGVtcGxhdGVDb250ZW50LmRhdGFzZXQuZGlhbG9nUm9vdFNlbGVjdG9yO1xuICAgICAgICB2YXIgZGlhbG9nUm9vdCA9IChkaWFsb2dSb290U2VsZWN0b3IgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkaWFsb2dSb290U2VsZWN0b3IpKSB8fFxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgZGlhbG9nUm9vdC5hcHBlbmRDaGlsZCh0ZW1wbGF0ZUNvbnRlbnQpO1xuICAgICAgICB2YXIgZGlhbG9nVGVtcGxhdGUgPSBuZXcgYTExeV9kaWFsb2dfMVtcImRlZmF1bHRcIl0odGVtcGxhdGVDb250ZW50KTtcbiAgICAgICAgLy8gUHJldmVudCBzY3JvbGxpbmcgd2hlbiBkaWFsb2cgaXMgb3BlblxuICAgICAgICBkaWFsb2dUZW1wbGF0ZVxuICAgICAgICAgICAgLm9uKCdzaG93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaHRtbC5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignaGlkZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGh0bWwuc3R5bGUub3ZlcmZsb3dZID0gJyc7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBBdHRhY2ggZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBkaWFsb2cgcm9vdCAoZWxlbWVudCB3aXRoIGlkKSwgc28gaXQnc1xuICAgICAgICAvLyBwb3NzaWJsZSB0byBzaG93L2Nsb3NlIHRoZSBkaWFsb2cgc29tZXdoZXJlIGVsc2Ugd2l0aCBubyBhY2Nlc3MgdG8gdGhlXG4gICAgICAgIC8vIEExMXlEaWFsb2cgaW5zdGFuY2UuXG4gICAgICAgIHRlbXBsYXRlQ29udGVudC5hZGRFdmVudExpc3RlbmVyKCd3YWd0YWlsOnNob3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlhbG9nVGVtcGxhdGUuc2hvdygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGVtcGxhdGVDb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3dhZ3RhaWw6aGlkZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkaWFsb2dUZW1wbGF0ZS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydHMuZGlhbG9nID0gZGlhbG9nO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./client/src/includes/dialog.js\n");

/***/ }),

/***/ "./client/src/includes/initSkipLink.ts":
/*!*********************************************!*\
  !*** ./client/src/includes/initSkipLink.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.__esModule = true;\nexports.initSkipLink = void 0;\n/**\n * Appears at the top left corner of the admin page with the tab button is clicked.\n * Used to provide an accessible skip button for keyboard control so that users can\n * easily navigate to the main content without having to navigate a long list of navigation links.\n *\n * Inspired by https://github.com/selfthinker/dokuwiki_template_writr/blob/master/js/skip-link-focus-fix.js\n *\n */\nvar initSkipLink = function () {\n    var skiplink = document.querySelector('[data-skiplink]');\n    var main = document.querySelector('main');\n    var handleBlur = function () {\n        if (!main)\n            return;\n        main.removeAttribute('tabindex');\n        main.removeEventListener('blur', handleBlur);\n        main.removeEventListener('focusout', handleBlur);\n    };\n    var handleClick = function () {\n        if (!main)\n            return;\n        main.setAttribute('tabindex', '-1');\n        main.addEventListener('blur', handleBlur);\n        main.addEventListener('focusout', handleBlur);\n        main.focus();\n    };\n    if (skiplink && main) {\n        skiplink.addEventListener('click', handleClick);\n    }\n};\nexports.initSkipLink = initSkipLink;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2luY2x1ZGVzL2luaXRTa2lwTGluay50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhZ3RhaWwvLi9jbGllbnQvc3JjL2luY2x1ZGVzL2luaXRTa2lwTGluay50cz9kMzViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuaW5pdFNraXBMaW5rID0gdm9pZCAwO1xuLyoqXG4gKiBBcHBlYXJzIGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGFkbWluIHBhZ2Ugd2l0aCB0aGUgdGFiIGJ1dHRvbiBpcyBjbGlja2VkLlxuICogVXNlZCB0byBwcm92aWRlIGFuIGFjY2Vzc2libGUgc2tpcCBidXR0b24gZm9yIGtleWJvYXJkIGNvbnRyb2wgc28gdGhhdCB1c2VycyBjYW5cbiAqIGVhc2lseSBuYXZpZ2F0ZSB0byB0aGUgbWFpbiBjb250ZW50IHdpdGhvdXQgaGF2aW5nIHRvIG5hdmlnYXRlIGEgbG9uZyBsaXN0IG9mIG5hdmlnYXRpb24gbGlua3MuXG4gKlxuICogSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL3NlbGZ0aGlua2VyL2Rva3V3aWtpX3RlbXBsYXRlX3dyaXRyL2Jsb2IvbWFzdGVyL2pzL3NraXAtbGluay1mb2N1cy1maXguanNcbiAqXG4gKi9cbnZhciBpbml0U2tpcExpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNraXBsaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2tpcGxpbmtdJyk7XG4gICAgdmFyIG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyk7XG4gICAgdmFyIGhhbmRsZUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghbWFpbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFpbi5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG4gICAgICAgIG1haW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZUJsdXIpO1xuICAgICAgICBtYWluLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgaGFuZGxlQmx1cik7XG4gICAgfTtcbiAgICB2YXIgaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghbWFpbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFpbi5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIG1haW4uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGhhbmRsZUJsdXIpO1xuICAgICAgICBtYWluLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3Vzb3V0JywgaGFuZGxlQmx1cik7XG4gICAgICAgIG1haW4uZm9jdXMoKTtcbiAgICB9O1xuICAgIGlmIChza2lwbGluayAmJiBtYWluKSB7XG4gICAgICAgIHNraXBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2spO1xuICAgIH1cbn07XG5leHBvcnRzLmluaXRTa2lwTGluayA9IGluaXRTa2lwTGluaztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./client/src/includes/initSkipLink.ts\n");

/***/ }),

/***/ "./client/src/includes/initUpgradeNotification.ts":
/*!********************************************************!*\
  !*** ./client/src/includes/initUpgradeNotification.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nexports.__esModule = true;\nexports.initUpgradeNotification = void 0;\nvar version_1 = __webpack_require__(/*! ../utils/version */ \"./client/src/utils/version.js\");\n/**\n * Controls the upgrade notification component to request the latest version\n * of Wagtail and presents a message to the user if the current version\n * is out of date.\n *\n * Expected JSON payload:\n *\n * {\n *     \"version\": \"2.15.2\",\n *     \"url\":     \"https://docs.wagtail.io/en/stable/releases/2.15.2.html\",\n *     \"minorUrl\": \"https://docs.wagtail.io/en/stable/releases/2.15.html\",\n *     \"lts\": {\n *         \"version\": \"2.12.8\",\n *         \"url\": \"https://docs.wagtail.io/en/stable/releases/2.12.8.html\",\n *         \"minorUrl\": \"https://docs.wagtail.io/en/stable/releases/2.12.html\"\n *     }\n * }\n */\nvar initUpgradeNotification = function () {\n    var container = document.querySelector('[data-upgrade-notification]');\n    if (!container)\n        return;\n    var releasesUrl = 'https://releases.wagtail.io/latest.txt';\n    var currentVersion = new version_1.VersionNumber(container.dataset.currentVersion);\n    var showLTSOnly = container.hasAttribute('data-upgrade-lts-only');\n    var upgradeVersion = container.querySelector('[data-upgrade-version]');\n    var upgradeLink = container.querySelector('[data-upgrade-link]');\n    fetch(releasesUrl, {\n        referrerPolicy: 'strict-origin-when-cross-origin'\n    })\n        .then(function (response) {\n        if (response.status !== 200) {\n            // eslint-disable-next-line no-console\n            console.error(\"Unexpected response from \".concat(releasesUrl, \". Status: \").concat(response.status));\n            return false;\n        }\n        return response.json();\n    })\n        .then(function (payload) {\n        var data = payload;\n        if (data && data.lts && showLTSOnly) {\n            data = data.lts;\n        }\n        if (data && data.version) {\n            var latestVersion = new version_1.VersionNumber(data.version);\n            var versionDelta = currentVersion.howMuchBehind(latestVersion);\n            var releaseNotesUrl = null;\n            if (!versionDelta) {\n                return;\n            }\n            if (versionDelta === version_1.VersionDeltaType.MAJOR ||\n                versionDelta === version_1.VersionDeltaType.MINOR) {\n                releaseNotesUrl = data.minorUrl;\n            }\n            else {\n                releaseNotesUrl = data.url;\n            }\n            if (upgradeVersion instanceof HTMLElement) {\n                upgradeVersion.innerText = [data.version, showLTSOnly ? '(LTS)' : '']\n                    .join(' ')\n                    .trim();\n            }\n            if (upgradeLink instanceof HTMLElement) {\n                upgradeLink.setAttribute('href', releaseNotesUrl || '');\n            }\n            container.style.display = '';\n        }\n    })[\"catch\"](function (err) {\n        // eslint-disable-next-line no-console\n        console.error(\"Error fetching \".concat(releasesUrl, \". Error: \").concat(err));\n    });\n};\nexports.initUpgradeNotification = initUpgradeNotification;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2luY2x1ZGVzL2luaXRVcGdyYWRlTm90aWZpY2F0aW9uLnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWd0YWlsLy4vY2xpZW50L3NyYy9pbmNsdWRlcy9pbml0VXBncmFkZU5vdGlmaWNhdGlvbi50cz8yNWE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuaW5pdFVwZ3JhZGVOb3RpZmljYXRpb24gPSB2b2lkIDA7XG52YXIgdmVyc2lvbl8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3ZlcnNpb25cIik7XG4vKipcbiAqIENvbnRyb2xzIHRoZSB1cGdyYWRlIG5vdGlmaWNhdGlvbiBjb21wb25lbnQgdG8gcmVxdWVzdCB0aGUgbGF0ZXN0IHZlcnNpb25cbiAqIG9mIFdhZ3RhaWwgYW5kIHByZXNlbnRzIGEgbWVzc2FnZSB0byB0aGUgdXNlciBpZiB0aGUgY3VycmVudCB2ZXJzaW9uXG4gKiBpcyBvdXQgb2YgZGF0ZS5cbiAqXG4gKiBFeHBlY3RlZCBKU09OIHBheWxvYWQ6XG4gKlxuICoge1xuICogICAgIFwidmVyc2lvblwiOiBcIjIuMTUuMlwiLFxuICogICAgIFwidXJsXCI6ICAgICBcImh0dHBzOi8vZG9jcy53YWd0YWlsLmlvL2VuL3N0YWJsZS9yZWxlYXNlcy8yLjE1LjIuaHRtbFwiLFxuICogICAgIFwibWlub3JVcmxcIjogXCJodHRwczovL2RvY3Mud2FndGFpbC5pby9lbi9zdGFibGUvcmVsZWFzZXMvMi4xNS5odG1sXCIsXG4gKiAgICAgXCJsdHNcIjoge1xuICogICAgICAgICBcInZlcnNpb25cIjogXCIyLjEyLjhcIixcbiAqICAgICAgICAgXCJ1cmxcIjogXCJodHRwczovL2RvY3Mud2FndGFpbC5pby9lbi9zdGFibGUvcmVsZWFzZXMvMi4xMi44Lmh0bWxcIixcbiAqICAgICAgICAgXCJtaW5vclVybFwiOiBcImh0dHBzOi8vZG9jcy53YWd0YWlsLmlvL2VuL3N0YWJsZS9yZWxlYXNlcy8yLjEyLmh0bWxcIlxuICogICAgIH1cbiAqIH1cbiAqL1xudmFyIGluaXRVcGdyYWRlTm90aWZpY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS11cGdyYWRlLW5vdGlmaWNhdGlvbl0nKTtcbiAgICBpZiAoIWNvbnRhaW5lcilcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciByZWxlYXNlc1VybCA9ICdodHRwczovL3JlbGVhc2VzLndhZ3RhaWwuaW8vbGF0ZXN0LnR4dCc7XG4gICAgdmFyIGN1cnJlbnRWZXJzaW9uID0gbmV3IHZlcnNpb25fMS5WZXJzaW9uTnVtYmVyKGNvbnRhaW5lci5kYXRhc2V0LmN1cnJlbnRWZXJzaW9uKTtcbiAgICB2YXIgc2hvd0xUU09ubHkgPSBjb250YWluZXIuaGFzQXR0cmlidXRlKCdkYXRhLXVwZ3JhZGUtbHRzLW9ubHknKTtcbiAgICB2YXIgdXBncmFkZVZlcnNpb24gPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignW2RhdGEtdXBncmFkZS12ZXJzaW9uXScpO1xuICAgIHZhciB1cGdyYWRlTGluayA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS11cGdyYWRlLWxpbmtdJyk7XG4gICAgZmV0Y2gocmVsZWFzZXNVcmwsIHtcbiAgICAgICAgcmVmZXJyZXJQb2xpY3k6ICdzdHJpY3Qtb3JpZ2luLXdoZW4tY3Jvc3Mtb3JpZ2luJ1xuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5leHBlY3RlZCByZXNwb25zZSBmcm9tIFwiLmNvbmNhdChyZWxlYXNlc1VybCwgXCIuIFN0YXR1czogXCIpLmNvbmNhdChyZXNwb25zZS5zdGF0dXMpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHZhciBkYXRhID0gcGF5bG9hZDtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sdHMgJiYgc2hvd0xUU09ubHkpIHtcbiAgICAgICAgICAgIGRhdGEgPSBkYXRhLmx0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnZlcnNpb24pIHtcbiAgICAgICAgICAgIHZhciBsYXRlc3RWZXJzaW9uID0gbmV3IHZlcnNpb25fMS5WZXJzaW9uTnVtYmVyKGRhdGEudmVyc2lvbik7XG4gICAgICAgICAgICB2YXIgdmVyc2lvbkRlbHRhID0gY3VycmVudFZlcnNpb24uaG93TXVjaEJlaGluZChsYXRlc3RWZXJzaW9uKTtcbiAgICAgICAgICAgIHZhciByZWxlYXNlTm90ZXNVcmwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKCF2ZXJzaW9uRGVsdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmVyc2lvbkRlbHRhID09PSB2ZXJzaW9uXzEuVmVyc2lvbkRlbHRhVHlwZS5NQUpPUiB8fFxuICAgICAgICAgICAgICAgIHZlcnNpb25EZWx0YSA9PT0gdmVyc2lvbl8xLlZlcnNpb25EZWx0YVR5cGUuTUlOT1IpIHtcbiAgICAgICAgICAgICAgICByZWxlYXNlTm90ZXNVcmwgPSBkYXRhLm1pbm9yVXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVsZWFzZU5vdGVzVXJsID0gZGF0YS51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBncmFkZVZlcnNpb24gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHVwZ3JhZGVWZXJzaW9uLmlubmVyVGV4dCA9IFtkYXRhLnZlcnNpb24sIHNob3dMVFNPbmx5ID8gJyhMVFMpJyA6ICcnXVxuICAgICAgICAgICAgICAgICAgICAuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgIC50cmltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXBncmFkZUxpbmsgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHVwZ3JhZGVMaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIHJlbGVhc2VOb3Rlc1VybCB8fCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICB9XG4gICAgfSlbXCJjYXRjaFwiXShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBcIi5jb25jYXQocmVsZWFzZXNVcmwsIFwiLiBFcnJvcjogXCIpLmNvbmNhdChlcnIpKTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmluaXRVcGdyYWRlTm90aWZpY2F0aW9uID0gaW5pdFVwZ3JhZGVOb3RpZmljYXRpb247XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/includes/initUpgradeNotification.ts\n");

/***/ }),

/***/ "./client/src/includes/sidePanel.js":
/*!******************************************!*\
  !*** ./client/src/includes/sidePanel.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nexports.__esModule = true;\nvar gettext_1 = __webpack_require__(/*! ../utils/gettext */ \"./client/src/utils/gettext.ts\");\nfunction initSidePanel() {\n    var sidePanelWrapper = document.querySelector('[data-form-side]');\n    // Abort if the side panel isn't available\n    if (!sidePanelWrapper)\n        return;\n    // For now, we do not want to persist the side panel state in the explorer\n    var inExplorer = 'formSideExplorer' in sidePanelWrapper.dataset;\n    var resizeGrip = document.querySelector('[data-form-side-resize-grip]');\n    var widthInput = document.querySelector('[data-form-side-width-input]');\n    var getSidePanelWidthStyles = function () {\n        var sidePanelStyles = getComputedStyle(sidePanelWrapper);\n        var minWidth = parseFloat(sidePanelStyles.minWidth);\n        var maxWidth = parseFloat(sidePanelStyles.maxWidth);\n        var width = parseFloat(sidePanelStyles.width);\n        var range = maxWidth - minWidth;\n        var percentage = ((width - minWidth) / range) * 100;\n        return { minWidth: minWidth, maxWidth: maxWidth, width: width, range: range, percentage: percentage };\n    };\n    var setPanel = function (panelName) {\n        var body = document.querySelector('body');\n        var selectedPanel = document.querySelector(\"[data-side-panel-toggle=\\\"\".concat(panelName, \"\\\"]\"));\n        // Abort if panelName is specified but it does not exist\n        if (panelName && !selectedPanel)\n            return;\n        // Open / close side panel\n        // HACK: For now, the comments will show without the side-panel opening.\n        // They will later be updated so that they render inside the side panel.\n        // We couldn't implement this for Wagtail 3.0 as the existing field styling\n        // renders the \"Add comment\" button on the right hand side, and this gets\n        // covered up by the side panel.\n        if (panelName === '' || panelName === 'comments') {\n            sidePanelWrapper.classList.remove('form-side--open');\n            sidePanelWrapper.removeAttribute('aria-labelledby');\n        }\n        else {\n            sidePanelWrapper.classList.add('form-side--open');\n            sidePanelWrapper.setAttribute('aria-labelledby', \"side-panel-\".concat(panelName, \"-title\"));\n        }\n        document.querySelectorAll('[data-side-panel]').forEach(function (panel) {\n            var name = panel.dataset.sidePanel;\n            if (name === panelName) {\n                if (panel.hidden) {\n                    // eslint-disable-next-line no-param-reassign\n                    panel.hidden = false;\n                    panel.dispatchEvent(new CustomEvent('show'));\n                    sidePanelWrapper.classList.add(\"form-side--\".concat(name));\n                    body.classList.add('side-panel-open');\n                }\n            }\n            else if (!panel.hidden) {\n                // eslint-disable-next-line no-param-reassign\n                panel.hidden = true;\n                panel.dispatchEvent(new CustomEvent('hide'));\n                sidePanelWrapper.classList.remove(\"form-side--\".concat(name));\n                if (panelName === '') {\n                    body.classList.remove('side-panel-open');\n                }\n            }\n        });\n        // Update aria-expanded attribute on the panel toggles\n        document.querySelectorAll('[data-side-panel-toggle]').forEach(function (toggle) {\n            toggle.setAttribute('aria-expanded', toggle.dataset.sidePanelToggle === panelName ? 'true' : 'false');\n        });\n        // Remember last opened side panel if not in explorer\n        if (!inExplorer) {\n            try {\n                localStorage.setItem('wagtail:side-panel-open', panelName);\n            }\n            catch (e) {\n                // Proceed without saving the last-open panel.\n            }\n            // Update width input percentage as each panel may have its own maxWidth\n            // (e.g. the preview panel), use timeout to wait until the resize\n            // transition has finished\n            setTimeout(function () {\n                var percentage = getSidePanelWidthStyles().percentage;\n                // Invert the percentage to make the slider work in the opposite direction\n                widthInput.value = 100 - percentage;\n            }, 500);\n        }\n    };\n    var togglePanel = function (panelName) {\n        var isAlreadyOpen = !document\n            .querySelector(\"[data-side-panel=\\\"\".concat(panelName, \"\\\"]\"))\n            .hasAttribute('hidden');\n        if (isAlreadyOpen) {\n            // Close the sidebar\n            setPanel('');\n        }\n        else {\n            // Open the sidebar / navigate to the panel\n            setPanel(panelName);\n        }\n    };\n    document.querySelectorAll('[data-side-panel-toggle]').forEach(function (toggle) {\n        toggle.addEventListener('click', function () {\n            togglePanel(toggle.dataset.sidePanelToggle);\n        });\n    });\n    var closeButton = document.querySelector('[data-form-side-close-button]');\n    if (closeButton instanceof HTMLButtonElement) {\n        closeButton.addEventListener('click', function () {\n            setPanel('');\n        });\n    }\n    var setSidePanelWidth = function (targetWidth) {\n        var _a = getSidePanelWidthStyles(), minWidth = _a.minWidth, maxWidth = _a.maxWidth, range = _a.range, width = _a.width;\n        var newWidth = parseInt(Math.max(minWidth, Math.min(targetWidth, maxWidth)), 10) ||\n            width;\n        var valueText = (0, gettext_1.ngettext)('%(num)s pixel', '%(num)s pixels', newWidth).replace('%(num)s', newWidth);\n        sidePanelWrapper.style.width = \"\".concat(newWidth, \"px\");\n        widthInput.value = 100 - ((newWidth - minWidth) / range) * 100;\n        widthInput.setAttribute('aria-valuetext', valueText);\n        // Save the new width to localStorage unless we're in the explorer\n        if (inExplorer)\n            return;\n        try {\n            localStorage.setItem('wagtail:side-panel-width', newWidth);\n        }\n        catch (e) {\n            // Proceed without saving the side panel width.\n        }\n    };\n    var startPos;\n    var startWidth;\n    var onPointerMove = function (e) {\n        if (!e.screenX || !startPos || !startWidth)\n            return;\n        var delta = startPos - e.screenX;\n        setSidePanelWidth(startWidth + delta);\n    };\n    resizeGrip.addEventListener('pointerdown', function (e) {\n        // Remember the starting position and width of the side panel, so we can\n        // calculate the new width based on the position change during the drag and\n        // not resize the panel when it has gone past the minimum/maximum width.\n        startPos = e.screenX;\n        startWidth = getSidePanelWidthStyles().width;\n        document.body.classList.add('side-panel-resizing');\n        resizeGrip.setPointerCapture(e.pointerId);\n        resizeGrip.addEventListener('pointermove', onPointerMove);\n    });\n    resizeGrip.addEventListener('pointerup', function (e) {\n        resizeGrip.removeEventListener('pointermove', onPointerMove);\n        resizeGrip.releasePointerCapture(e.pointerId);\n        document.body.classList.remove('side-panel-resizing');\n    });\n    // Handle resizing with keyboard using a hidden range input.\n    widthInput.addEventListener('change', function (event) {\n        var _a = getSidePanelWidthStyles(), minWidth = _a.minWidth, range = _a.range;\n        var inputPercentage = 100 - parseInt(event.target.value, 10);\n        var newWidth = minWidth + (range * inputPercentage) / 100;\n        setSidePanelWidth(newWidth);\n    });\n    // Open the last opened panel if not in explorer,\n    // use timeout to allow comments to load first\n    setTimeout(function () {\n        try {\n            var sidePanelOpen = localStorage.getItem('wagtail:side-panel-open');\n            if (!inExplorer && sidePanelOpen) {\n                setPanel(sidePanelOpen);\n            }\n            setSidePanelWidth(localStorage.getItem('wagtail:side-panel-width'));\n        }\n        catch (e) {\n            // Proceed without remembering the last-open panel and the panel width.\n        }\n        // Skip the animation on initial load only,\n        // use timeout to ensure the panel has been triggered to open\n        setTimeout(function () {\n            sidePanelWrapper.classList.remove('form-side--initial');\n        });\n    });\n}\nexports[\"default\"] = initSidePanel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./client/src/includes/sidePanel.js\n");

/***/ }),

/***/ "./client/src/index.ts":
/*!*****************************!*\
  !*** ./client/src/index.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Entry point for the wagtail package.\n * Re-exports components and other modules via a cleaner API.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nexports.__esModule = true;\nexports.initUpgradeNotification = exports.initSkipLink = exports.initDismissibles = exports.Transition = exports.PublicationStatus = exports.Portal = exports.LoadingSpinner = exports.Icon = exports.Button = void 0;\nvar Button_1 = __webpack_require__(/*! ./components/Button/Button */ \"./client/src/components/Button/Button.tsx\");\n__createBinding(exports, Button_1, \"default\", \"Button\");\nvar Icon_1 = __webpack_require__(/*! ./components/Icon/Icon */ \"./client/src/components/Icon/Icon.tsx\");\n__createBinding(exports, Icon_1, \"default\", \"Icon\");\nvar LoadingSpinner_1 = __webpack_require__(/*! ./components/LoadingSpinner/LoadingSpinner */ \"./client/src/components/LoadingSpinner/LoadingSpinner.tsx\");\n__createBinding(exports, LoadingSpinner_1, \"default\", \"LoadingSpinner\");\nvar Portal_1 = __webpack_require__(/*! ./components/Portal/Portal */ \"./client/src/components/Portal/Portal.tsx\");\n__createBinding(exports, Portal_1, \"default\", \"Portal\");\nvar PublicationStatus_1 = __webpack_require__(/*! ./components/PublicationStatus/PublicationStatus */ \"./client/src/components/PublicationStatus/PublicationStatus.tsx\");\n__createBinding(exports, PublicationStatus_1, \"default\", \"PublicationStatus\");\nvar Transition_1 = __webpack_require__(/*! ./components/Transition/Transition */ \"./client/src/components/Transition/Transition.tsx\");\n__createBinding(exports, Transition_1, \"default\", \"Transition\");\nvar initDismissibles_1 = __webpack_require__(/*! ./includes/initDismissibles */ \"./client/src/includes/initDismissibles.ts\");\n__createBinding(exports, initDismissibles_1, \"initDismissibles\");\nvar initSkipLink_1 = __webpack_require__(/*! ./includes/initSkipLink */ \"./client/src/includes/initSkipLink.ts\");\n__createBinding(exports, initSkipLink_1, \"initSkipLink\");\nvar initUpgradeNotification_1 = __webpack_require__(/*! ./includes/initUpgradeNotification */ \"./client/src/includes/initUpgradeNotification.ts\");\n__createBinding(exports, initUpgradeNotification_1, \"initUpgradeNotification\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL2luZGV4LnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWd0YWlsLy4vY2xpZW50L3NyYy9pbmRleC50cz83Zjk4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIHdhZ3RhaWwgcGFja2FnZS5cbiAqIFJlLWV4cG9ydHMgY29tcG9uZW50cyBhbmQgb3RoZXIgbW9kdWxlcyB2aWEgYSBjbGVhbmVyIEFQSS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmluaXRVcGdyYWRlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5pbml0U2tpcExpbmsgPSBleHBvcnRzLmluaXREaXNtaXNzaWJsZXMgPSBleHBvcnRzLlRyYW5zaXRpb24gPSBleHBvcnRzLlB1YmxpY2F0aW9uU3RhdHVzID0gZXhwb3J0cy5Qb3J0YWwgPSBleHBvcnRzLkxvYWRpbmdTcGlubmVyID0gZXhwb3J0cy5JY29uID0gZXhwb3J0cy5CdXR0b24gPSB2b2lkIDA7XG52YXIgQnV0dG9uXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL0J1dHRvbi9CdXR0b25cIik7XG5fX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgQnV0dG9uXzEsIFwiZGVmYXVsdFwiLCBcIkJ1dHRvblwiKTtcbnZhciBJY29uXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL0ljb24vSWNvblwiKTtcbl9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBJY29uXzEsIFwiZGVmYXVsdFwiLCBcIkljb25cIik7XG52YXIgTG9hZGluZ1NwaW5uZXJfMSA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTG9hZGluZ1NwaW5uZXIvTG9hZGluZ1NwaW5uZXJcIik7XG5fX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgTG9hZGluZ1NwaW5uZXJfMSwgXCJkZWZhdWx0XCIsIFwiTG9hZGluZ1NwaW5uZXJcIik7XG52YXIgUG9ydGFsXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL1BvcnRhbC9Qb3J0YWxcIik7XG5fX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgUG9ydGFsXzEsIFwiZGVmYXVsdFwiLCBcIlBvcnRhbFwiKTtcbnZhciBQdWJsaWNhdGlvblN0YXR1c18xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9QdWJsaWNhdGlvblN0YXR1cy9QdWJsaWNhdGlvblN0YXR1c1wiKTtcbl9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBQdWJsaWNhdGlvblN0YXR1c18xLCBcImRlZmF1bHRcIiwgXCJQdWJsaWNhdGlvblN0YXR1c1wiKTtcbnZhciBUcmFuc2l0aW9uXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL1RyYW5zaXRpb24vVHJhbnNpdGlvblwiKTtcbl9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBUcmFuc2l0aW9uXzEsIFwiZGVmYXVsdFwiLCBcIlRyYW5zaXRpb25cIik7XG52YXIgaW5pdERpc21pc3NpYmxlc18xID0gcmVxdWlyZShcIi4vaW5jbHVkZXMvaW5pdERpc21pc3NpYmxlc1wiKTtcbl9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBpbml0RGlzbWlzc2libGVzXzEsIFwiaW5pdERpc21pc3NpYmxlc1wiKTtcbnZhciBpbml0U2tpcExpbmtfMSA9IHJlcXVpcmUoXCIuL2luY2x1ZGVzL2luaXRTa2lwTGlua1wiKTtcbl9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBpbml0U2tpcExpbmtfMSwgXCJpbml0U2tpcExpbmtcIik7XG52YXIgaW5pdFVwZ3JhZGVOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuL2luY2x1ZGVzL2luaXRVcGdyYWRlTm90aWZpY2F0aW9uXCIpO1xuX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIGluaXRVcGdyYWRlTm90aWZpY2F0aW9uXzEsIFwiaW5pdFVwZ3JhZGVOb3RpZmljYXRpb25cIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/index.ts\n");

/***/ }),

/***/ "./client/src/utils/debounce.ts":
/*!**************************************!*\
  !*** ./client/src/utils/debounce.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexports.__esModule = true;\nexports.debounce = void 0;\n/**\n * Creates a debounced function that delays invoking func until after wait\n * milliseconds have elapsed since the last time the debounced function was invoked.\n * The debounced function comes with a cancel method to cancel delayed func invocations.\n */\nvar debounce = function (func, wait) {\n    if (wait === void 0) { wait = 0; }\n    var timeoutId;\n    var debounced = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        window.clearTimeout(timeoutId);\n        timeoutId = window.setTimeout(function () {\n            func.apply(void 0, __spreadArray([], __read(args), false));\n        }, wait);\n    };\n    debounced.cancel = function () {\n        if (typeof timeoutId !== 'number')\n            return;\n        window.clearTimeout(timeoutId);\n    };\n    return debounced;\n};\nexports.debounce = debounce;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL3V0aWxzL2RlYm91bmNlLnRzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhZ3RhaWwvLi9jbGllbnQvc3JjL3V0aWxzL2RlYm91bmNlLnRzPzVlNWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWJvdW5jZSA9IHZvaWQgMDtcbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBmdW5jIHVudGlsIGFmdGVyIHdhaXRcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhcyBpbnZva2VkLlxuICogVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgY2FuY2VsIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBmdW5jIGludm9jYXRpb25zLlxuICovXG52YXIgZGVib3VuY2UgPSBmdW5jdGlvbiAoZnVuYywgd2FpdCkge1xuICAgIGlmICh3YWl0ID09PSB2b2lkIDApIHsgd2FpdCA9IDA7IH1cbiAgICB2YXIgdGltZW91dElkO1xuICAgIHZhciBkZWJvdW5jZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICB0aW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpLCBmYWxzZSkpO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICB9O1xuICAgIGRlYm91bmNlZC5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGltZW91dElkICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH07XG4gICAgcmV0dXJuIGRlYm91bmNlZDtcbn07XG5leHBvcnRzLmRlYm91bmNlID0gZGVib3VuY2U7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./client/src/utils/debounce.ts\n");

/***/ }),

/***/ "./client/src/utils/version.js":
/*!*************************************!*\
  !*** ./client/src/utils/version.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\nexports.VersionNumber = exports.VersionDeltaType = exports.VersionNumberFormatError = exports.CanOnlyComparePreReleaseVersionsError = void 0;\nvar VersionNumberFormatError = /** @class */ (function (_super) {\n    __extends(VersionNumberFormatError, _super);\n    function VersionNumberFormatError(versionString) {\n        var _this = this;\n        _this.message = \"Version number '\".concat(versionString, \"' is not formatted correctly.\");\n        return _this;\n    }\n    return VersionNumberFormatError;\n}(Error));\nexports.VersionNumberFormatError = VersionNumberFormatError;\nvar CanOnlyComparePreReleaseVersionsError = /** @class */ (function (_super) {\n    __extends(CanOnlyComparePreReleaseVersionsError, _super);\n    function CanOnlyComparePreReleaseVersionsError() {\n        var _this = this;\n        _this.message = 'Can only compare prerelease versions';\n        return _this;\n    }\n    return CanOnlyComparePreReleaseVersionsError;\n}(Error));\nexports.CanOnlyComparePreReleaseVersionsError = CanOnlyComparePreReleaseVersionsError;\nvar VersionDeltaType = /** @class */ (function () {\n    function VersionDeltaType(name) {\n        this.name = name;\n    }\n    VersionDeltaType.MAJOR = new VersionDeltaType('Major');\n    VersionDeltaType.MINOR = new VersionDeltaType('Minor');\n    VersionDeltaType.PATCH = new VersionDeltaType('Patch');\n    VersionDeltaType.PRE_RELEASE_STEP = new VersionDeltaType('PreReleaseStep');\n    VersionDeltaType.PRE_RELEASE_VERSION = new VersionDeltaType('PreReleaseVersion');\n    return VersionDeltaType;\n}());\nexports.VersionDeltaType = VersionDeltaType;\nvar VersionNumber = /** @class */ (function () {\n    function VersionNumber(versionString) {\n        var versionRegex = /^(?<major>\\d+)\\.{1}(?<minor>\\d+)((\\.{1}(?<patch>\\d+))|(?<preReleaseStep>a|b|rc|\\.dev){1}(?<preReleaseVersion>\\d+)){0,1}$/;\n        var matches = versionString.match(versionRegex);\n        if (matches === null) {\n            throw new VersionNumberFormatError(versionString);\n        }\n        var groups = matches.groups;\n        this.major = parseInt(groups.major, 10);\n        this.minor = parseInt(groups.minor, 10);\n        this.patch = groups.patch ? parseInt(groups.patch, 10) : 0;\n        this.preReleaseStep = groups.preReleaseStep ? groups.preReleaseStep : null;\n        this.preReleaseVersion = groups.preReleaseVersion\n            ? parseInt(groups.preReleaseVersion, 10)\n            : null;\n    }\n    VersionNumber.prototype.isPreRelease = function () {\n        return this.preReleaseStep !== null;\n    };\n    /*\n     * Check if preReleaseStep of this versionNumber is behind another versionNumber's.\n     */\n    VersionNumber.prototype.isPreReleaseStepBehind = function (that) {\n        if (!this.isPreRelease() || !that.isPreRelease()) {\n            throw new CanOnlyComparePreReleaseVersionsError();\n        }\n        if (this.preReleaseStep === 'a' &&\n            (that.preReleaseStep === 'b' || that.preReleaseStep === 'rc')) {\n            return true;\n        }\n        else if (this.preReleaseStep === 'b' && that.preReleaseStep === 'rc') {\n            return true;\n        }\n        return false;\n    };\n    /*\n     * Get VersionDeltaType that this version is behind the other version passed in.\n     */\n    VersionNumber.prototype.howMuchBehind = function (that) {\n        if (this.major < that.major) {\n            return VersionDeltaType.MAJOR;\n        }\n        else if (this.major === that.major && this.minor < that.minor) {\n            return VersionDeltaType.MINOR;\n        }\n        else if (this.major === that.major &&\n            this.minor === that.minor &&\n            !this.isPreRelease() &&\n            !that.isPreRelease() &&\n            this.patch < that.patch) {\n            return VersionDeltaType.PATCH;\n        }\n        else if (this.major === that.major &&\n            this.minor === that.minor &&\n            this.isPreRelease()) {\n            if (!that.isPreRelease()) {\n                return VersionDeltaType.MINOR;\n            }\n            else if (this.isPreReleaseStepBehind(that)) {\n                return VersionDeltaType.PRE_RELEASE_STEP;\n            }\n            else if (this.preReleaseStep === that.preReleaseStep &&\n                this.preReleaseVersion < that.preReleaseVersion) {\n                return VersionDeltaType.PRE_RELEASE_VERSION;\n            }\n        }\n        return null;\n    };\n    return VersionNumber;\n}());\nexports.VersionNumber = VersionNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jbGllbnQvc3JjL3V0aWxzL3ZlcnNpb24uanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWd0YWlsLy4vY2xpZW50L3NyYy91dGlscy92ZXJzaW9uLmpzPzQzYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuVmVyc2lvbk51bWJlciA9IGV4cG9ydHMuVmVyc2lvbkRlbHRhVHlwZSA9IGV4cG9ydHMuVmVyc2lvbk51bWJlckZvcm1hdEVycm9yID0gZXhwb3J0cy5DYW5Pbmx5Q29tcGFyZVByZVJlbGVhc2VWZXJzaW9uc0Vycm9yID0gdm9pZCAwO1xudmFyIFZlcnNpb25OdW1iZXJGb3JtYXRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVmVyc2lvbk51bWJlckZvcm1hdEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFZlcnNpb25OdW1iZXJGb3JtYXRFcnJvcih2ZXJzaW9uU3RyaW5nKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBcIlZlcnNpb24gbnVtYmVyICdcIi5jb25jYXQodmVyc2lvblN0cmluZywgXCInIGlzIG5vdCBmb3JtYXR0ZWQgY29ycmVjdGx5LlwiKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVmVyc2lvbk51bWJlckZvcm1hdEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5WZXJzaW9uTnVtYmVyRm9ybWF0RXJyb3IgPSBWZXJzaW9uTnVtYmVyRm9ybWF0RXJyb3I7XG52YXIgQ2FuT25seUNvbXBhcmVQcmVSZWxlYXNlVmVyc2lvbnNFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2FuT25seUNvbXBhcmVQcmVSZWxlYXNlVmVyc2lvbnNFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDYW5Pbmx5Q29tcGFyZVByZVJlbGVhc2VWZXJzaW9uc0Vycm9yKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gJ0NhbiBvbmx5IGNvbXBhcmUgcHJlcmVsZWFzZSB2ZXJzaW9ucyc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIENhbk9ubHlDb21wYXJlUHJlUmVsZWFzZVZlcnNpb25zRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLkNhbk9ubHlDb21wYXJlUHJlUmVsZWFzZVZlcnNpb25zRXJyb3IgPSBDYW5Pbmx5Q29tcGFyZVByZVJlbGVhc2VWZXJzaW9uc0Vycm9yO1xudmFyIFZlcnNpb25EZWx0YVR5cGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVmVyc2lvbkRlbHRhVHlwZShuYW1lKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIFZlcnNpb25EZWx0YVR5cGUuTUFKT1IgPSBuZXcgVmVyc2lvbkRlbHRhVHlwZSgnTWFqb3InKTtcbiAgICBWZXJzaW9uRGVsdGFUeXBlLk1JTk9SID0gbmV3IFZlcnNpb25EZWx0YVR5cGUoJ01pbm9yJyk7XG4gICAgVmVyc2lvbkRlbHRhVHlwZS5QQVRDSCA9IG5ldyBWZXJzaW9uRGVsdGFUeXBlKCdQYXRjaCcpO1xuICAgIFZlcnNpb25EZWx0YVR5cGUuUFJFX1JFTEVBU0VfU1RFUCA9IG5ldyBWZXJzaW9uRGVsdGFUeXBlKCdQcmVSZWxlYXNlU3RlcCcpO1xuICAgIFZlcnNpb25EZWx0YVR5cGUuUFJFX1JFTEVBU0VfVkVSU0lPTiA9IG5ldyBWZXJzaW9uRGVsdGFUeXBlKCdQcmVSZWxlYXNlVmVyc2lvbicpO1xuICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlO1xufSgpKTtcbmV4cG9ydHMuVmVyc2lvbkRlbHRhVHlwZSA9IFZlcnNpb25EZWx0YVR5cGU7XG52YXIgVmVyc2lvbk51bWJlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWZXJzaW9uTnVtYmVyKHZlcnNpb25TdHJpbmcpIHtcbiAgICAgICAgdmFyIHZlcnNpb25SZWdleCA9IC9eKD88bWFqb3I+XFxkKylcXC57MX0oPzxtaW5vcj5cXGQrKSgoXFwuezF9KD88cGF0Y2g+XFxkKykpfCg/PHByZVJlbGVhc2VTdGVwPmF8YnxyY3xcXC5kZXYpezF9KD88cHJlUmVsZWFzZVZlcnNpb24+XFxkKykpezAsMX0kLztcbiAgICAgICAgdmFyIG1hdGNoZXMgPSB2ZXJzaW9uU3RyaW5nLm1hdGNoKHZlcnNpb25SZWdleCk7XG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVmVyc2lvbk51bWJlckZvcm1hdEVycm9yKHZlcnNpb25TdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cHMgPSBtYXRjaGVzLmdyb3VwcztcbiAgICAgICAgdGhpcy5tYWpvciA9IHBhcnNlSW50KGdyb3Vwcy5tYWpvciwgMTApO1xuICAgICAgICB0aGlzLm1pbm9yID0gcGFyc2VJbnQoZ3JvdXBzLm1pbm9yLCAxMCk7XG4gICAgICAgIHRoaXMucGF0Y2ggPSBncm91cHMucGF0Y2ggPyBwYXJzZUludChncm91cHMucGF0Y2gsIDEwKSA6IDA7XG4gICAgICAgIHRoaXMucHJlUmVsZWFzZVN0ZXAgPSBncm91cHMucHJlUmVsZWFzZVN0ZXAgPyBncm91cHMucHJlUmVsZWFzZVN0ZXAgOiBudWxsO1xuICAgICAgICB0aGlzLnByZVJlbGVhc2VWZXJzaW9uID0gZ3JvdXBzLnByZVJlbGVhc2VWZXJzaW9uXG4gICAgICAgICAgICA/IHBhcnNlSW50KGdyb3Vwcy5wcmVSZWxlYXNlVmVyc2lvbiwgMTApXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuICAgIFZlcnNpb25OdW1iZXIucHJvdG90eXBlLmlzUHJlUmVsZWFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlUmVsZWFzZVN0ZXAgIT09IG51bGw7XG4gICAgfTtcbiAgICAvKlxuICAgICAqIENoZWNrIGlmIHByZVJlbGVhc2VTdGVwIG9mIHRoaXMgdmVyc2lvbk51bWJlciBpcyBiZWhpbmQgYW5vdGhlciB2ZXJzaW9uTnVtYmVyJ3MuXG4gICAgICovXG4gICAgVmVyc2lvbk51bWJlci5wcm90b3R5cGUuaXNQcmVSZWxlYXNlU3RlcEJlaGluZCA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ByZVJlbGVhc2UoKSB8fCAhdGhhdC5pc1ByZVJlbGVhc2UoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENhbk9ubHlDb21wYXJlUHJlUmVsZWFzZVZlcnNpb25zRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcmVSZWxlYXNlU3RlcCA9PT0gJ2EnICYmXG4gICAgICAgICAgICAodGhhdC5wcmVSZWxlYXNlU3RlcCA9PT0gJ2InIHx8IHRoYXQucHJlUmVsZWFzZVN0ZXAgPT09ICdyYycpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnByZVJlbGVhc2VTdGVwID09PSAnYicgJiYgdGhhdC5wcmVSZWxlYXNlU3RlcCA9PT0gJ3JjJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLypcbiAgICAgKiBHZXQgVmVyc2lvbkRlbHRhVHlwZSB0aGF0IHRoaXMgdmVyc2lvbiBpcyBiZWhpbmQgdGhlIG90aGVyIHZlcnNpb24gcGFzc2VkIGluLlxuICAgICAqL1xuICAgIFZlcnNpb25OdW1iZXIucHJvdG90eXBlLmhvd011Y2hCZWhpbmQgPSBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgICBpZiAodGhpcy5tYWpvciA8IHRoYXQubWFqb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlLk1BSk9SO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubWFqb3IgPT09IHRoYXQubWFqb3IgJiYgdGhpcy5taW5vciA8IHRoYXQubWlub3IpIHtcbiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlLk1JTk9SO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubWFqb3IgPT09IHRoYXQubWFqb3IgJiZcbiAgICAgICAgICAgIHRoaXMubWlub3IgPT09IHRoYXQubWlub3IgJiZcbiAgICAgICAgICAgICF0aGlzLmlzUHJlUmVsZWFzZSgpICYmXG4gICAgICAgICAgICAhdGhhdC5pc1ByZVJlbGVhc2UoKSAmJlxuICAgICAgICAgICAgdGhpcy5wYXRjaCA8IHRoYXQucGF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlLlBBVENIO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMubWFqb3IgPT09IHRoYXQubWFqb3IgJiZcbiAgICAgICAgICAgIHRoaXMubWlub3IgPT09IHRoYXQubWlub3IgJiZcbiAgICAgICAgICAgIHRoaXMuaXNQcmVSZWxlYXNlKCkpIHtcbiAgICAgICAgICAgIGlmICghdGhhdC5pc1ByZVJlbGVhc2UoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlLk1JTk9SO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc1ByZVJlbGVhc2VTdGVwQmVoaW5kKHRoYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZlcnNpb25EZWx0YVR5cGUuUFJFX1JFTEVBU0VfU1RFUDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMucHJlUmVsZWFzZVN0ZXAgPT09IHRoYXQucHJlUmVsZWFzZVN0ZXAgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnByZVJlbGVhc2VWZXJzaW9uIDwgdGhhdC5wcmVSZWxlYXNlVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBWZXJzaW9uRGVsdGFUeXBlLlBSRV9SRUxFQVNFX1ZFUlNJT047XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gVmVyc2lvbk51bWJlcjtcbn0oKSk7XG5leHBvcnRzLlZlcnNpb25OdW1iZXIgPSBWZXJzaW9uTnVtYmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./client/src/utils/version.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"wagtailadmin": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = globalThis["webpackChunkwagtail"] = globalThis["webpackChunkwagtail"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["wagtail/admin/static/wagtailadmin/js/vendor"], () => (__webpack_require__("./client/src/entrypoints/admin/wagtailadmin.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;